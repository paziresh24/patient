// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: sq-hoyjtWZlg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RaviAlert from "../../RaviAlert"; // plasmic-import: 22UkaHSSFOEU/component
import { Popover } from "@plasmicpkgs/radix-ui";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviRateAndCommentCount.module.css"; // plasmic-import: sq-hoyjtWZlg/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 3-8JABhvj3fe/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: xTYazYoaptk0/icon

createPlasmicElementProxy;

export type PlasmicRaviRateAndCommentCount__VariantMembers = {};
export type PlasmicRaviRateAndCommentCount__VariantsArgs = {};
type VariantPropType = keyof PlasmicRaviRateAndCommentCount__VariantsArgs;
export const PlasmicRaviRateAndCommentCount__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRaviRateAndCommentCount__ArgsType = {
  rate?: string;
  rateCount?: string;
  hideRates?: boolean;
};
type ArgPropType = keyof PlasmicRaviRateAndCommentCount__ArgsType;
export const PlasmicRaviRateAndCommentCount__ArgProps = new Array<ArgPropType>(
  "rate",
  "rateCount",
  "hideRates"
);

export type PlasmicRaviRateAndCommentCount__OverridesType = {
  root?: Flex__<"div">;
  raviAlert?: Flex__<typeof RaviAlert>;
  popoverCore?: Flex__<typeof Popover>;
};

export interface DefaultRaviRateAndCommentCountProps {
  rate?: string;
  rateCount?: string;
  hideRates?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviRateAndCommentCount__RenderFunc(props: {
  variants: PlasmicRaviRateAndCommentCount__VariantsArgs;
  args: PlasmicRaviRateAndCommentCount__ArgsType;
  overrides: PlasmicRaviRateAndCommentCount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hideRates: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    (() => {
      try {
        return !$props.hideRates;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens,
          sty.root
        )}
      >
        {(() => {
          try {
            return $props.rateCount < 5;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <RaviAlert
            data-plasmic-name={"raviAlert"}
            data-plasmic-override={overrides.raviAlert}
            className={classNames("__wab_instance", sty.raviAlert)}
            content={
              "\u0628\u0647 \u062f\u0644\u06cc\u0644 \u062a\u0639\u062f\u0627\u062f \u06a9\u0645 \u0646\u0638\u0631\u0627\u062a\u060c \u0627\u0645\u062a\u06cc\u0627\u0632 \u0642\u0627\u0628\u0644 \u0646\u0645\u0627\u06cc\u0634 \u0646\u06cc\u0633\u062a."
            }
            isSmall={true}
          />
        ) : null}
        {(() => {
          try {
            return $props.rateCount >= 5;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lhPr)}
            dir={"rtl"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fcVvV)}
            >
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__xtczf)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vn3Dw
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.rate || "0";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "80%";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2Xdk7
                )}
              >
                {"\u0627\u0632 \u06f5"}
              </div>
            </Stack__>
            {(() => {
              try {
                return !!$props.rateCount;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jcnBu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `رضایت (${$props.rateCount} نظر)`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
            <Popover
              data-plasmic-name={"popoverCore"}
              data-plasmic-override={overrides.popoverCore}
              className={classNames("__wab_instance", sty.popoverCore)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "popoverCore",
                  "open"
                ]).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["popoverCore", "open"])}
              overlay={
                <div className={classNames(projectcss.all, sty.freeBox__eciHr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ocRkp
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          '\u062f\u0631\u0635\u062f \u0631\u0636\u0627\u06cc\u062a\u060c \u062d\u0627\u0635\u0644 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0633\u0647 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 "'
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"\u0628\u0631\u062e\u0648\u0631\u062f"}
                      </span>
                      <React.Fragment>{'"\u060c "'}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"\u062a\u0648\u0636\u06cc\u062d"}
                      </span>
                      <React.Fragment>{'" \u0648 "'}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u0645\u0647\u0627\u0631\u062a \u0648 \u062a\u062e\u0635\u0635"
                        }
                      </span>
                      <React.Fragment>
                        {
                          '" \u067e\u0632\u0634\u06a9 \u0645\u06cc \u0628\u0627\u0634\u062f \u06a9\u0647 \u0647\u0645\u06af\u06cc \u062a\u0648\u0633\u0637 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0627\u0639\u0644\u0627\u0645 \u06af\u0631\u062f\u06cc\u062f\u0647 \u0627\u0646\u062f.'
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              }
              themeResetClass={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_paziresh_24_design_system_css.plasmic_tokens
              )}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__cD7Jb)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return event.stopPropagation();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg___8KaA5)}
                  role={"img"}
                />
              </div>
            </Popover>
          </Stack__>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "raviAlert", "popoverCore"],
  raviAlert: ["raviAlert"],
  popoverCore: ["popoverCore"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  raviAlert: typeof RaviAlert;
  popoverCore: typeof Popover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviRateAndCommentCount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviRateAndCommentCount__VariantsArgs;
    args?: PlasmicRaviRateAndCommentCount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviRateAndCommentCount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviRateAndCommentCount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviRateAndCommentCount__ArgProps,
          internalVariantPropNames: PlasmicRaviRateAndCommentCount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviRateAndCommentCount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviRateAndCommentCount";
  } else {
    func.displayName = `PlasmicRaviRateAndCommentCount.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviRateAndCommentCount = Object.assign(
  // Top-level PlasmicRaviRateAndCommentCount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    raviAlert: makeNodeComponent("raviAlert"),
    popoverCore: makeNodeComponent("popoverCore"),

    // Metadata about props expected for PlasmicRaviRateAndCommentCount
    internalVariantProps: PlasmicRaviRateAndCommentCount__VariantProps,
    internalArgProps: PlasmicRaviRateAndCommentCount__ArgProps
  }
);

export default PlasmicRaviRateAndCommentCount;
/* prettier-ignore-end */
