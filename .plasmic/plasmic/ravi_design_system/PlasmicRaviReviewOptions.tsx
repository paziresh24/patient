// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: WPpw5PhLSljG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import RaviOption from "../../RaviOption"; // plasmic-import: 7P-1fooJZx0C/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviReviewOptions.module.css"; // plasmic-import: WPpw5PhLSljG/css

import MenuIcon from "../fragment_icons/icons/PlasmicIcon__Menu"; // plasmic-import: dmfb3Ga2IoVt/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2uzLLHig1Vpp/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: EZeYNol_o3Nk/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicRaviReviewOptions__VariantMembers = {};
export type PlasmicRaviReviewOptions__VariantsArgs = {};
type VariantPropType = keyof PlasmicRaviReviewOptions__VariantsArgs;
export const PlasmicRaviReviewOptions__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRaviReviewOptions__ArgsType = {
  onClickSendReport?: (value: string) => void;
  isOther?: boolean;
  onIsOtherChange?: (val: string) => void;
  isUserComment?: boolean;
  commentText?: string;
  onClickEdit?: (value: string) => void;
  onClickDelete?: () => void;
};
type ArgPropType = keyof PlasmicRaviReviewOptions__ArgsType;
export const PlasmicRaviReviewOptions__ArgProps = new Array<ArgPropType>(
  "onClickSendReport",
  "isOther",
  "onIsOtherChange",
  "isUserComment",
  "commentText",
  "onClickEdit",
  "onClickDelete"
);

export type PlasmicRaviReviewOptions__OverridesType = {
  root?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
  reportDialog?: Flex__<typeof Paziresh24Dialog>;
  raviOption?: Flex__<typeof RaviOption>;
  textarea?: Flex__<"textarea">;
  deleteDialog?: Flex__<typeof Paziresh24Dialog>;
  editDialog?: Flex__<typeof Paziresh24Dialog>;
  editComment?: Flex__<"textarea">;
};

export interface DefaultRaviReviewOptionsProps {
  onClickSendReport?: (value: string) => void;
  isOther?: boolean;
  onIsOtherChange?: (val: string) => void;
  isUserComment?: boolean;
  commentText?: string;
  onClickEdit?: (value: string) => void;
  onClickDelete?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviReviewOptions__RenderFunc(props: {
  variants: PlasmicRaviReviewOptions__VariantsArgs;
  args: PlasmicRaviReviewOptions__ArgsType;
  overrides: PlasmicRaviReviewOptions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isUserComment: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "isOther",
        type: "writable",
        variableType: "boolean",

        valueProp: "isOther",
        onChangeProp: "onIsOtherChange"
      },
      {
        path: "reports",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title: "\u0646\u0627\u0645\u0631\u062a\u0628\u0637",
            description:
              "\u0627\u06cc\u0646 \u0646\u0638\u0631 \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u0627\u06cc\u0646 \u067e\u0632\u0634\u06a9 \u06cc\u0627 \u062d\u0648\u0632\u0647 \u0645\u0631\u0628\u0648\u0637\u0647 \u0646\u0645\u06cc \u0628\u0627\u0634\u062f"
          },
          {
            title: "\u063a\u06cc\u0631\u0648\u0627\u0642\u0639\u06cc",
            description:
              "\u0627\u06cc\u0646 \u0646\u0638\u0631 \u0628\u0627 \u0647\u062f\u0641 \u062a\u062e\u0631\u06cc\u0628 \u06cc\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0628\u062f\u0648\u0646 \u0639\u0644\u062a \u062f\u0631\u062c \u0634\u062f\u0647 \u0627\u0633\u062a"
          },
          {
            title: "\u062a\u0636\u0627\u062f \u0645\u0646\u0627\u0641\u0639",
            description:
              "\u0646\u0638\u0631 \u0627\u0632 \u0637\u0631\u0641 \u0631\u0642\u0628\u0627 \u06cc\u0627 \u06a9\u0633\u0628 \u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc \u0631\u0642\u06cc\u0628 \u062f\u0631\u062c \u0634\u062f\u0647 \u0627\u0633\u062a"
          },
          {
            title:
              "\u062a\u0648\u0647\u06cc\u0646 \u06cc\u0627 \u0641\u062d\u0627\u0634\u06cc",
            description:
              "\u062d\u0627\u0648\u06cc \u0627\u0644\u0641\u0627\u0638 \u0631\u06a9\u06cc\u06a9\u060c \u062e\u0634\u0648\u0646\u062a \u06cc\u0627 \u0627\u0644\u0641\u0627\u0638 \u062c\u0646\u0633\u06cc \u0645\u06cc \u0628\u0627\u0634\u062f"
          },
          {
            title:
              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u062e\u0635\u06cc",
            description:
              "\u0627\u06cc\u0646 \u0646\u0638\u0631 \u062f\u0627\u0631\u0627\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u062e\u0635\u06cc \u0645\u062b\u0644 \u0627\u062f\u0631\u0633 \u06cc\u0627 \u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0645\u06cc \u0628\u0627\u0634\u062f"
          }
        ]
      },
      {
        path: "selectedReport",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editComment.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.commentText;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoadingEdit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoadingDelete",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Popover
        data-plasmic-name={"popoverCore"}
        data-plasmic-override={overrides.popoverCore}
        className={classNames("__wab_instance", sty.popoverCore)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["popoverCore", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["popoverCore", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__gYjii)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rnAqM)}
              onClick={async event => {
                const $steps = {};

                $steps["updateEditDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditDialogOpen"] != null &&
                  typeof $steps["updateEditDialogOpen"] === "object" &&
                  typeof $steps["updateEditDialogOpen"].then === "function"
                ) {
                  $steps["updateEditDialogOpen"] = await $steps[
                    "updateEditDialogOpen"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pw57K
                )}
              >
                {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
              </div>
              <IconIcon
                className={classNames(projectcss.all, sty.svg__yzaqe)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__i4Lgq)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDeleteDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteDialogOpen"] != null &&
                  typeof $steps["updateDeleteDialogOpen"] === "object" &&
                  typeof $steps["updateDeleteDialogOpen"].then === "function"
                ) {
                  $steps["updateDeleteDialogOpen"] = await $steps[
                    "updateDeleteDialogOpen"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yzRwT
                )}
              >
                {"\u062d\u0630\u0641"}
              </div>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__pNEbA)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gwNoZ)}
              onClick={async event => {
                const $steps = {};

                $steps["updateReportDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["reportDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateReportDialogOpen"] != null &&
                  typeof $steps["updateReportDialogOpen"] === "object" &&
                  typeof $steps["updateReportDialogOpen"].then === "function"
                ) {
                  $steps["updateReportDialogOpen"] = await $steps[
                    "updateReportDialogOpen"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zAnF9
                )}
              >
                {"\u06af\u0632\u0627\u0631\u0634"}
              </div>
              <InfoIcon
                className={classNames(projectcss.all, sty.svg___28Cxz)}
                role={"img"}
              />
            </Stack__>
          </div>
        }
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jp5SJ)}>
          <MenuIcon
            className={classNames(projectcss.all, sty.svg___4Ta3X)}
            role={"img"}
          />
        </div>
      </Popover>
      <Paziresh24Dialog
        data-plasmic-name={"reportDialog"}
        data-plasmic-override={overrides.reportDialog}
        body={
          <React.Fragment>
            <div className={classNames(projectcss.all, sty.freeBox__rBBuf)}>
              {(() => {
                try {
                  return !$state.isOther;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sFqba)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.reports;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <RaviOption
                        data-plasmic-name={"raviOption"}
                        data-plasmic-override={overrides.raviOption}
                        className={classNames("__wab_instance", sty.raviOption)}
                        description={(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        isSelected={(() => {
                          try {
                            return currentItem.title == $state.selectedReport;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        onClick={async () => {
                          const $steps = {};

                          $steps["updateSelectedReport"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedReport"]
                                  },
                                  operation: 0,
                                  value: currentItem.title
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedReport"] != null &&
                            typeof $steps["updateSelectedReport"] ===
                              "object" &&
                            typeof $steps["updateSelectedReport"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedReport"] = await $steps[
                              "updateSelectedReport"
                            ];
                          }
                        }}
                        title={(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.isOther;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(
                    projectcss.all,
                    projectcss.textarea,
                    sty.textarea
                  )}
                  onChange={async (...eventArgs: any) => {
                    (e => {
                      generateStateOnChangeProp($state, ["textarea", "value"])(
                        e.target.value
                      );
                    }).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0648 \u0634\u0631\u062d \u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631 \u0627\u06cc\u0646 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u062a\u06cc\u0645 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u0630\u06cc\u0631\u063424 \u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u0645\u0627\u060c \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0645\u062c\u062f\u062f\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u062f."
                  }
                  ref={ref => {
                    $refs["textarea"] = ref;
                  }}
                  value={
                    generateStateValueProp($state, ["textarea", "value"]) ?? ""
                  }
                />
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__triVb)}>
                <Paziresh24Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tqZsV
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.isOther ? "بازگشت" : "سایر";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0627\u06cc\u0631";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button___71Rt3
                  )}
                  color={"clear"}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__qLK)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsOther"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isOther"]
                            },
                            operation: 4,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsOther"] != null &&
                      typeof $steps["updateIsOther"] === "object" &&
                      typeof $steps["updateIsOther"].then === "function"
                    ) {
                      $steps["updateIsOther"] = await $steps["updateIsOther"];
                    }

                    $steps["updateTextareaValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["textarea", "value"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateTextareaValue"] != null &&
                      typeof $steps["updateTextareaValue"] === "object" &&
                      typeof $steps["updateTextareaValue"].then === "function"
                    ) {
                      $steps["updateTextareaValue"] = await $steps[
                        "updateTextareaValue"
                      ];
                    }

                    $steps["updateSelectedReport"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedReport"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedReport"] != null &&
                      typeof $steps["updateSelectedReport"] === "object" &&
                      typeof $steps["updateSelectedReport"].then === "function"
                    ) {
                      $steps["updateSelectedReport"] = await $steps[
                        "updateSelectedReport"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return !$state.isOther;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "showEndIcon";
                      }
                      throw e;
                    }
                  })()}
                  showStartIcon={(() => {
                    try {
                      return $state.isOther;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__rq61N)}
                      role={"img"}
                    />
                  }
                />
              </div>
            </div>
            <Paziresh24Button
              children2={
                "\u0627\u0631\u0633\u0627\u0644 \u06af\u0632\u0627\u0631\u0634"
              }
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__oU0Ku
              )}
              isDisabled={(() => {
                try {
                  return !$state.selectedReport && !$state.textarea.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              loading={(() => {
                try {
                  return $state.isLoading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["startLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["startLoading"] != null &&
                  typeof $steps["startLoading"] === "object" &&
                  typeof $steps["startLoading"].then === "function"
                ) {
                  $steps["startLoading"] = await $steps["startLoading"];
                }

                $steps["runOnClickSendReport"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onClickSendReport"],
                        args: [
                          (() => {
                            try {
                              return $state.isOther
                                ? $state.textarea.value
                                : $state.selectedReport;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnClickSendReport"] != null &&
                  typeof $steps["runOnClickSendReport"] === "object" &&
                  typeof $steps["runOnClickSendReport"].then === "function"
                ) {
                  $steps["runOnClickSendReport"] = await $steps[
                    "runOnClickSendReport"
                  ];
                }

                $steps["endLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["endLoading"] != null &&
                  typeof $steps["endLoading"] === "object" &&
                  typeof $steps["endLoading"].then === "function"
                ) {
                  $steps["endLoading"] = await $steps["endLoading"];
                }

                $steps["updateReportDialogOpen"] = (() => {
                  return $state.isOther
                    ? $state.textarea.value?.length > 10
                    : true;
                })()
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["reportDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateReportDialogOpen"] != null &&
                  typeof $steps["updateReportDialogOpen"] === "object" &&
                  typeof $steps["updateReportDialogOpen"].then === "function"
                ) {
                  $steps["updateReportDialogOpen"] = await $steps[
                    "updateReportDialogOpen"
                  ];
                }
              }}
            />
          </React.Fragment>
        }
        className={classNames("__wab_instance", sty.reportDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["reportDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["reportDialog", "open"])}
        title={"\u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631"}
        trigger={null}
      />

      <Paziresh24Dialog
        data-plasmic-name={"deleteDialog"}
        data-plasmic-override={overrides.deleteDialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kondS)}
          >
            <Paziresh24Button
              children2={"\u062d\u0630\u0641"}
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__fbvq8
              )}
              color={"red"}
              loading={(() => {
                try {
                  return $state.isLoadingDelete;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoadingDelete"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingDelete"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingDelete"] != null &&
                  typeof $steps["updateIsLoadingDelete"] === "object" &&
                  typeof $steps["updateIsLoadingDelete"].then === "function"
                ) {
                  $steps["updateIsLoadingDelete"] = await $steps[
                    "updateIsLoadingDelete"
                  ];
                }

                $steps["runOnClickDelete"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["onClickDelete"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnClickDelete"] != null &&
                  typeof $steps["runOnClickDelete"] === "object" &&
                  typeof $steps["runOnClickDelete"].then === "function"
                ) {
                  $steps["runOnClickDelete"] = await $steps["runOnClickDelete"];
                }

                $steps["updateIsLoadingDelete2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingDelete"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingDelete2"] != null &&
                  typeof $steps["updateIsLoadingDelete2"] === "object" &&
                  typeof $steps["updateIsLoadingDelete2"].then === "function"
                ) {
                  $steps["updateIsLoadingDelete2"] = await $steps[
                    "updateIsLoadingDelete2"
                  ];
                }

                $steps["updateDeleteDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteDialog", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteDialogOpen"] != null &&
                  typeof $steps["updateDeleteDialogOpen"] === "object" &&
                  typeof $steps["updateDeleteDialogOpen"].then === "function"
                ) {
                  $steps["updateDeleteDialogOpen"] = await $steps[
                    "updateDeleteDialogOpen"
                  ];
                }
              }}
            />

            <Paziresh24Button
              children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button___0Hy1
              )}
              color={"red"}
              onClick={async event => {
                const $steps = {};

                $steps["updateDeleteDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteDialog", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteDialogOpen"] != null &&
                  typeof $steps["updateDeleteDialogOpen"] === "object" &&
                  typeof $steps["updateDeleteDialogOpen"].then === "function"
                ) {
                  $steps["updateDeleteDialogOpen"] = await $steps[
                    "updateDeleteDialogOpen"
                  ];
                }
              }}
              outline={true}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.deleteDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["deleteDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["deleteDialog", "open"])}
        title={
          "\u0622\u06cc\u0627 \u0627\u0632 \u062d\u0630\u0641 \u0646\u0638\u0631 \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
        }
        trigger={null}
      />

      <Paziresh24Dialog
        data-plasmic-name={"editDialog"}
        data-plasmic-override={overrides.editDialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0HOhi)}
          >
            <textarea
              data-plasmic-name={"editComment"}
              data-plasmic-override={overrides.editComment}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.editComment
              )}
              onChange={async (...eventArgs: any) => {
                (e => {
                  generateStateOnChangeProp($state, ["editComment", "value"])(
                    e.target.value
                  );
                }).apply(null, eventArgs);
              }}
              placeholder={
                "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0646\u0638\u0631..."
              }
              ref={ref => {
                $refs["editComment"] = ref;
              }}
              value={
                generateStateValueProp($state, ["editComment", "value"]) ?? ""
              }
            />

            <Paziresh24Button
              children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__i1ZQh
              )}
              isDisabled={(() => {
                try {
                  return $state.editComment.value.length < 10;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              loading={(() => {
                try {
                  return $state.isLoadingEdit;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoadingEdit"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingEdit"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingEdit"] != null &&
                  typeof $steps["updateIsLoadingEdit"] === "object" &&
                  typeof $steps["updateIsLoadingEdit"].then === "function"
                ) {
                  $steps["updateIsLoadingEdit"] = await $steps[
                    "updateIsLoadingEdit"
                  ];
                }

                $steps["runOnClickEdit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onClickEdit"],
                        args: [
                          (() => {
                            try {
                              return $state.editComment.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnClickEdit"] != null &&
                  typeof $steps["runOnClickEdit"] === "object" &&
                  typeof $steps["runOnClickEdit"].then === "function"
                ) {
                  $steps["runOnClickEdit"] = await $steps["runOnClickEdit"];
                }

                $steps["updateIsLoadingEdit2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingEdit"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingEdit2"] != null &&
                  typeof $steps["updateIsLoadingEdit2"] === "object" &&
                  typeof $steps["updateIsLoadingEdit2"].then === "function"
                ) {
                  $steps["updateIsLoadingEdit2"] = await $steps[
                    "updateIsLoadingEdit2"
                  ];
                }

                $steps["updateEditDialogOpen"] = (
                  $state.editComment.value.length < 10 ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editDialog", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditDialogOpen"] != null &&
                  typeof $steps["updateEditDialogOpen"] === "object" &&
                  typeof $steps["updateEditDialogOpen"].then === "function"
                ) {
                  $steps["updateEditDialogOpen"] = await $steps[
                    "updateEditDialogOpen"
                  ];
                }
              }}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.editDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["editDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["editDialog", "open"])}
        title={"\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0646\u0638\u0631"}
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "popoverCore",
    "reportDialog",
    "raviOption",
    "textarea",
    "deleteDialog",
    "editDialog",
    "editComment"
  ],
  popoverCore: ["popoverCore"],
  reportDialog: ["reportDialog", "raviOption", "textarea"],
  raviOption: ["raviOption"],
  textarea: ["textarea"],
  deleteDialog: ["deleteDialog"],
  editDialog: ["editDialog", "editComment"],
  editComment: ["editComment"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popoverCore: typeof Popover;
  reportDialog: typeof Paziresh24Dialog;
  raviOption: typeof RaviOption;
  textarea: "textarea";
  deleteDialog: typeof Paziresh24Dialog;
  editDialog: typeof Paziresh24Dialog;
  editComment: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviReviewOptions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviReviewOptions__VariantsArgs;
    args?: PlasmicRaviReviewOptions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviReviewOptions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviReviewOptions__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviReviewOptions__ArgProps,
          internalVariantPropNames: PlasmicRaviReviewOptions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviReviewOptions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviReviewOptions";
  } else {
    func.displayName = `PlasmicRaviReviewOptions.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviReviewOptions = Object.assign(
  // Top-level PlasmicRaviReviewOptions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popoverCore: makeNodeComponent("popoverCore"),
    reportDialog: makeNodeComponent("reportDialog"),
    raviOption: makeNodeComponent("raviOption"),
    textarea: makeNodeComponent("textarea"),
    deleteDialog: makeNodeComponent("deleteDialog"),
    editDialog: makeNodeComponent("editDialog"),
    editComment: makeNodeComponent("editComment"),

    // Metadata about props expected for PlasmicRaviReviewOptions
    internalVariantProps: PlasmicRaviReviewOptions__VariantProps,
    internalArgProps: PlasmicRaviReviewOptions__ArgProps
  }
);

export default PlasmicRaviReviewOptions;
/* prettier-ignore-end */
