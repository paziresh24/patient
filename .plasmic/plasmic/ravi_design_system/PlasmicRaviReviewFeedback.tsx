/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: lZJoIJWYs8o9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RaviRateStar from "../../RaviRateStar"; // plasmic-import: e1uyHZLgwx11/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import RaviTabs from "../../RaviTabs"; // plasmic-import: eIcAmCTlZ2yT/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import Checkbox from "../../Checkbox"; // plasmic-import: 3y7pc6cf4L1a/component
import Paziresh24MultilineTextInput from "../../Paziresh24MultilineTextInput"; // plasmic-import: 5O8XqcSJJk6J/component

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviReviewFeedback.module.css"; // plasmic-import: lZJoIJWYs8o9/css

import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 2uzLLHig1Vpp/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: xTYazYoaptk0/icon

createPlasmicElementProxy;

export type PlasmicRaviReviewFeedback__VariantMembers = {};
export type PlasmicRaviReviewFeedback__VariantsArgs = {};
type VariantPropType = keyof PlasmicRaviReviewFeedback__VariantsArgs;
export const PlasmicRaviReviewFeedback__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRaviReviewFeedback__ArgsType = {
  positiveList?: any;
  negativeList?: any;
  timeList?: any;
  onSubmit?: (values: string) => void;
  onClickSendComment?: (value: string) => void;
  alert?: any;
};
type ArgPropType = keyof PlasmicRaviReviewFeedback__ArgsType;
export const PlasmicRaviReviewFeedback__ArgProps = new Array<ArgPropType>(
  "positiveList",
  "negativeList",
  "timeList",
  "onSubmit",
  "onClickSendComment",
  "alert"
);

export type PlasmicRaviReviewFeedback__OverridesType = {
  root?: Flex__<"div">;
  raviRateStar?: Flex__<typeof RaviRateStar>;
  raviTabs?: Flex__<typeof RaviTabs>;
  commentDialog?: Flex__<typeof Paziresh24Dialog>;
  checkbox?: Flex__<typeof Checkbox>;
  multilineTextInput?: Flex__<typeof Paziresh24MultilineTextInput>;
};

export interface DefaultRaviReviewFeedbackProps {
  positiveList?: any;
  negativeList?: any;
  timeList?: any;
  onSubmit?: (values: string) => void;
  onClickSendComment?: (value: string) => void;
  alert?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviReviewFeedback__RenderFunc(props: {
  variants: PlasmicRaviReviewFeedback__VariantsArgs;
  args: PlasmicRaviReviewFeedback__ArgsType;
  overrides: PlasmicRaviReviewFeedback__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isPositiveTab",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "selected",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "commentDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "multilineTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoadingComment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__pmfY1)}
        dir={"rtl"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fTTq)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ha5P0
            )}
          >
            {
              "\u062b\u0628\u062a \u062a\u062c\u0631\u0628\u0647 \u0648\u06cc\u0632\u06cc\u062a"
            }
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.freeBox__giY,
              "rating-stars"
            )}
            dir={"ltr"}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return [1, 2, 3, 4, 5];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__z3P7)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateRate"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["rate"]
                            },
                            operation: 0,
                            value: currentItem
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRate"] != null &&
                      typeof $steps["updateRate"] === "object" &&
                      typeof $steps["updateRate"].then === "function"
                    ) {
                      $steps["updateRate"] = await $steps["updateRate"];
                    }
                  }}
                >
                  <RaviRateStar
                    data-plasmic-name={"raviRateStar"}
                    data-plasmic-override={overrides.raviRateStar}
                    className={classNames("__wab_instance", sty.raviRateStar)}
                    isLarge={true}
                    isSelected={(() => {
                      try {
                        return currentItem <= $state.rate;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              );
            })}
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gwuGh
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    if ($state.rate == 1) {
                      return "خیلی بد";
                    } else if ($state.rate == 2) {
                      return "بد";
                    } else if ($state.rate == 3) {
                      return "متوسط";
                    } else if ($state.rate == 4) {
                      return "خوب";
                    } else if ($state.rate == 5) {
                      return "خیلی خوب";
                    } else {
                      return " ";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062b\u0628\u062a \u062a\u062c\u0631\u0628\u0647 \u0648\u06cc\u0632\u06cc\u062a";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p5Ee)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cvqo5)}
            >
              <Paziresh24Button
                children2={
                  "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0645\u062b\u0628\u062a"
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__rtUjF
                )}
                color={"softBlue"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsPositiveTab"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isPositiveTab"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsPositiveTab"] != null &&
                    typeof $steps["updateIsPositiveTab"] === "object" &&
                    typeof $steps["updateIsPositiveTab"].then === "function"
                  ) {
                    $steps["updateIsPositiveTab"] = await $steps[
                      "updateIsPositiveTab"
                    ];
                  }
                }}
              />

              <Paziresh24Button
                children2={
                  "\u0628\u0627\u0632\u062e\u0648\u0631\u062f \u0645\u0646\u0641\u06cc"
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__dvDL
                )}
                color={"softRed"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateIsPositiveTab"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isPositiveTab"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsPositiveTab"] != null &&
                    typeof $steps["updateIsPositiveTab"] === "object" &&
                    typeof $steps["updateIsPositiveTab"].then === "function"
                  ) {
                    $steps["updateIsPositiveTab"] = await $steps[
                      "updateIsPositiveTab"
                    ];
                  }
                }}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__zM4De)}>
              <RaviTabs
                data-plasmic-name={"raviTabs"}
                data-plasmic-override={overrides.raviTabs}
                className={classNames("__wab_instance", sty.raviTabs)}
                isNegative={(() => {
                  try {
                    return !$state.isPositiveTab;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClickTab={async value => {
                  const $steps = {};

                  $steps["updateIsPositiveTab"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isPositiveTab"]
                          },
                          operation: 0,
                          value: value == "positive" ? true : false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsPositiveTab"] != null &&
                    typeof $steps["updateIsPositiveTab"] === "object" &&
                    typeof $steps["updateIsPositiveTab"].then === "function"
                  ) {
                    $steps["updateIsPositiveTab"] = await $steps[
                      "updateIsPositiveTab"
                    ];
                  }
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1Bslz)}>
              <div className={classNames(projectcss.all, sty.freeBox__rbnhc)} />

              <div className={classNames(projectcss.all, sty.freeBox__h8Ig4)} />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vOlxk)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.isPositiveTab
                        ? $props.positiveList
                        : $props.negativeList;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Paziresh24Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wo6DO
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__bHSuU
                      )}
                      color={(() => {
                        try {
                          return (() => {
                            const exist = $state.selected.some(
                              item => item == currentItem.value
                            );
                            if (exist && $state.isPositiveTab) {
                              return "softBlue";
                            } else if (exist && !$state.isPositiveTab) {
                              return "softRed";
                            } else {
                              return "sand";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "softBlue";
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selected"]
                                },
                                operation: 0,
                                value: (() => {
                                  const exist = $state.selected.some(
                                    item => item == currentItem.value
                                  );
                                  if (exist) {
                                    return $state.selected.filter(
                                      item => item != currentItem.value
                                    );
                                  } else {
                                    return [
                                      ...$state.selected,
                                      currentItem.value
                                    ];
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelected"] != null &&
                          typeof $steps["updateSelected"] === "object" &&
                          typeof $steps["updateSelected"].then === "function"
                        ) {
                          $steps["updateSelected"] = await $steps[
                            "updateSelected"
                          ];
                        }
                      }}
                      outline={(() => {
                        try {
                          return (() => {
                            const exist = $state.selected.some(
                              item => item == currentItem.value
                            );
                            if (exist && !$state.isPositiveTab) {
                              return false;
                            } else {
                              return "outline";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "outline";
                          }
                          throw e;
                        }
                      })()}
                      shape={"rounded"}
                      size={"compact"}
                    />
                  );
                })}
              </Stack__>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__aMz0P)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qrSj
              )}
            >
              {
                "\ufb7c\ufed8\ufeaa\ufead \ufea9\ufead \ufee3\ufec4\ufe90 \ufee3\ufee8\ufe98\ufec8\ufeae \ufee3\ufe8e\ufee7\ufeaa\ufbfe\ufeaa\u061f"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2JhQn)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.timeList;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Paziresh24Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r0Gau
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Button__sgucu
                    )}
                    color={(() => {
                      try {
                        return (() => {
                          if ($state.selectedTime == currentItem.value) {
                            return "softGreen";
                          } else {
                            return "sand";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "softBlue";
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSelectedTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedTime"]
                              },
                              operation: 0,
                              value: currentItem.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedTime"] != null &&
                        typeof $steps["updateSelectedTime"] === "object" &&
                        typeof $steps["updateSelectedTime"].then === "function"
                      ) {
                        $steps["updateSelectedTime"] = await $steps[
                          "updateSelectedTime"
                        ];
                      }
                    }}
                    outline={(() => {
                      try {
                        return (() => {
                          const exist = $state.selected.some(
                            item => item == currentItem.value
                          );
                          if (exist && !$state.isPositiveTab) {
                            return false;
                          } else {
                            return "outline";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "outline";
                        }
                        throw e;
                      }
                    })()}
                    shape={"rounded"}
                    size={"compact"}
                  />
                );
              })}
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xuCq)}
          >
            <Paziresh24Button
              children2={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qoOy)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ziSgz
                    )}
                  >
                    {
                      "\u0646\u0648\u0634\u062a\u0646 \u06a9\u0627\u0645\u0646\u062a"
                    }
                  </div>
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___1W4Rg)}
                    role={"img"}
                  />
                </Stack__>
              }
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__gIf2F
              )}
              color={"softSand"}
              endIcon={null}
              onClick={async event => {
                const $steps = {};

                $steps["updateCommentDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["commentDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCommentDialogOpen"] != null &&
                  typeof $steps["updateCommentDialogOpen"] === "object" &&
                  typeof $steps["updateCommentDialogOpen"].then === "function"
                ) {
                  $steps["updateCommentDialogOpen"] = await $steps[
                    "updateCommentDialogOpen"
                  ];
                }
              }}
            />

            {(() => {
              try {
                return !!$props?.alert?.text;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xBXdG)}
                style={{
                  ...($props.alert.type == "error" && { color: "red" })
                }}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__qtxDh)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bVjan
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.alert.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            ) : null}
            <Paziresh24Button
              children2={"\u062b\u0628\u062a \u0646\u0638\u0631"}
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__q1Rv7
              )}
              isDisabled={(() => {
                try {
                  return $state.rate == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading"] != null &&
                  typeof $steps["updateIsLoading"] === "object" &&
                  typeof $steps["updateIsLoading"].then === "function"
                ) {
                  $steps["updateIsLoading"] = await $steps["updateIsLoading"];
                }

                $steps["runOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSubmit"],
                        args: [
                          (() => {
                            try {
                              return {
                                rate: $state.rate,
                                waitingTime: $state.selectedTime,
                                details: $state.selected,
                                private: $state.checkbox.isSelected,
                                commentText: $state.multilineTextInput.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSubmit"] != null &&
                  typeof $steps["runOnSubmit"] === "object" &&
                  typeof $steps["runOnSubmit"].then === "function"
                ) {
                  $steps["runOnSubmit"] = await $steps["runOnSubmit"];
                }

                $steps["updateIsLoading2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoading2"] != null &&
                  typeof $steps["updateIsLoading2"] === "object" &&
                  typeof $steps["updateIsLoading2"].then === "function"
                ) {
                  $steps["updateIsLoading2"] = await $steps["updateIsLoading2"];
                }
              }}
            />
          </Stack__>
        </Stack__>
      </div>
      <Paziresh24Dialog
        data-plasmic-name={"commentDialog"}
        data-plasmic-override={overrides.commentDialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___4HpLt)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fzD7)}
            >
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames("__wab_instance", sty.checkbox)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9PFwN
                    )}
                  >
                    {"\u062e\u0635\u0648\u0635\u06cc"}
                  </div>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "checkbox",
                    "isSelected"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              />

              <Paziresh24MultilineTextInput
                data-plasmic-name={"multilineTextInput"}
                data-plasmic-override={overrides.multilineTextInput}
                className={classNames("__wab_instance", sty.multilineTextInput)}
                onValueChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "multilineTextInput",
                    "value"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f..."
                }
                value={generateStateValueProp($state, [
                  "multilineTextInput",
                  "value"
                ])}
              />
            </Stack__>
            <Paziresh24Button
              children2={"\u062b\u0628\u062a"}
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button___56OIw
              )}
              loading={(() => {
                try {
                  return $state.isLoadingComment;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateIsLoadingComment"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingComment"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingComment"] != null &&
                  typeof $steps["updateIsLoadingComment"] === "object" &&
                  typeof $steps["updateIsLoadingComment"].then === "function"
                ) {
                  $steps["updateIsLoadingComment"] = await $steps[
                    "updateIsLoadingComment"
                  ];
                }

                $steps["runOnClickSendComment"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onClickSendComment"],
                        args: [
                          (() => {
                            try {
                              return $state.multilineTextInput.value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnClickSendComment"] != null &&
                  typeof $steps["runOnClickSendComment"] === "object" &&
                  typeof $steps["runOnClickSendComment"].then === "function"
                ) {
                  $steps["runOnClickSendComment"] = await $steps[
                    "runOnClickSendComment"
                  ];
                }

                $steps["updateIsLoadingComment2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadingComment"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsLoadingComment2"] != null &&
                  typeof $steps["updateIsLoadingComment2"] === "object" &&
                  typeof $steps["updateIsLoadingComment2"].then === "function"
                ) {
                  $steps["updateIsLoadingComment2"] = await $steps[
                    "updateIsLoadingComment2"
                  ];
                }

                $steps["updateCommentDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["commentDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCommentDialogOpen"] != null &&
                  typeof $steps["updateCommentDialogOpen"] === "object" &&
                  typeof $steps["updateCommentDialogOpen"].then === "function"
                ) {
                  $steps["updateCommentDialogOpen"] = await $steps[
                    "updateCommentDialogOpen"
                  ];
                }
              }}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.commentDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["commentDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["commentDialog", "open"])}
        title={
          "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f"
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "raviRateStar",
    "raviTabs",
    "commentDialog",
    "checkbox",
    "multilineTextInput"
  ],
  raviRateStar: ["raviRateStar"],
  raviTabs: ["raviTabs"],
  commentDialog: ["commentDialog", "checkbox", "multilineTextInput"],
  checkbox: ["checkbox"],
  multilineTextInput: ["multilineTextInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  raviRateStar: typeof RaviRateStar;
  raviTabs: typeof RaviTabs;
  commentDialog: typeof Paziresh24Dialog;
  checkbox: typeof Checkbox;
  multilineTextInput: typeof Paziresh24MultilineTextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviReviewFeedback__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviReviewFeedback__VariantsArgs;
    args?: PlasmicRaviReviewFeedback__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviReviewFeedback__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviReviewFeedback__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviReviewFeedback__ArgProps,
          internalVariantPropNames: PlasmicRaviReviewFeedback__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviReviewFeedback__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviReviewFeedback";
  } else {
    func.displayName = `PlasmicRaviReviewFeedback.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviReviewFeedback = Object.assign(
  // Top-level PlasmicRaviReviewFeedback renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    raviRateStar: makeNodeComponent("raviRateStar"),
    raviTabs: makeNodeComponent("raviTabs"),
    commentDialog: makeNodeComponent("commentDialog"),
    checkbox: makeNodeComponent("checkbox"),
    multilineTextInput: makeNodeComponent("multilineTextInput"),

    // Metadata about props expected for PlasmicRaviReviewFeedback
    internalVariantProps: PlasmicRaviReviewFeedback__VariantProps,
    internalArgProps: PlasmicRaviReviewFeedback__ArgProps
  }
);

export default PlasmicRaviReviewFeedback;
/* prettier-ignore-end */
