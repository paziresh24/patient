// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: mdyuGePDb8Fy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RaviUser from "../../RaviUser"; // plasmic-import: LGI_uX8bDUNt/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { Popover } from "@plasmicpkgs/radix-ui";
import RaviRateStar from "../../RaviRateStar"; // plasmic-import: e1uyHZLgwx11/component
import Paziresh24MultilineTextInput from "../../Paziresh24MultilineTextInput"; // plasmic-import: 5O8XqcSJJk6J/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviReviewCard.module.css"; // plasmic-import: mdyuGePDb8Fy/css

import RepliesIcon from "../fragment_icons/icons/PlasmicIcon__Replies"; // plasmic-import: BamIPHX72k5k/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ThumbUpIcon from "../fragment_icons/icons/PlasmicIcon__ThumbUp"; // plasmic-import: GRY2zHJ6uxOn/icon
import ShareIcon from "../fragment_icons/icons/PlasmicIcon__Share"; // plasmic-import: NSxX1Iy4jDVL/icon
import Icon17Icon from "../paziresh_24_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: K0KrVjcOVNaS/icon

createPlasmicElementProxy;

export type PlasmicRaviReviewCard__VariantMembers = {};
export type PlasmicRaviReviewCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicRaviReviewCard__VariantsArgs;
export const PlasmicRaviReviewCard__VariantProps = new Array<VariantPropType>();

export type PlasmicRaviReviewCard__ArgsType = {
  userName?: string;
  date?: string;
  onlyDoctor?: boolean;
  isVisited?: boolean;
  avatarUrl?: string;
  subTitle?: string;
  avgRateValue?: number;
  commentText?: string;
  replies?: any;
  onRate?: (value: string) => void;
  userId?: string;
  isLoadingSendReport?: boolean;
  isDoctor?: boolean;
  showReplies?: boolean;
  onReplySend?: (value: string) => void;
  rate?: number;
  onRateChange?: (val: string) => void;
  feedbackId?: string;
  likeCount?: number;
  options?: React.ReactNode;
  replyCard?: React.ReactNode;
  replies2?: React.ReactNode;
  share?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRaviReviewCard__ArgsType;
export const PlasmicRaviReviewCard__ArgProps = new Array<ArgPropType>(
  "userName",
  "date",
  "onlyDoctor",
  "isVisited",
  "avatarUrl",
  "subTitle",
  "avgRateValue",
  "commentText",
  "replies",
  "onRate",
  "userId",
  "isLoadingSendReport",
  "isDoctor",
  "showReplies",
  "onReplySend",
  "rate",
  "onRateChange",
  "feedbackId",
  "likeCount",
  "options",
  "replyCard",
  "replies2",
  "share"
);

export type PlasmicRaviReviewCard__OverridesType = {
  root?: Flex__<"div">;
  raviUser?: Flex__<typeof RaviUser>;
  popoverCore?: Flex__<typeof Popover>;
  raviRateStar?: Flex__<typeof RaviRateStar>;
  multilineTextInput?: Flex__<typeof Paziresh24MultilineTextInput>;
  repliesDialog?: Flex__<typeof Paziresh24Dialog>;
  shareDialog?: Flex__<typeof Paziresh24Dialog>;
};

export interface DefaultRaviReviewCardProps {
  userName?: string;
  date?: string;
  onlyDoctor?: boolean;
  isVisited?: boolean;
  avatarUrl?: string;
  subTitle?: string;
  avgRateValue?: number;
  commentText?: string;
  replies?: any;
  onRate?: (value: string) => void;
  userId?: string;
  isLoadingSendReport?: boolean;
  isDoctor?: boolean;
  showReplies?: boolean;
  onReplySend?: (value: string) => void;
  rate?: number;
  onRateChange?: (val: string) => void;
  feedbackId?: string;
  likeCount?: number;
  options?: React.ReactNode;
  replyCard?: React.ReactNode;
  replies2?: React.ReactNode;
  share?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviReviewCard__RenderFunc(props: {
  variants: PlasmicRaviReviewCard__VariantsArgs;
  args: PlasmicRaviReviewCard__ArgsType;
  overrides: PlasmicRaviReviewCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          onlyDoctor: false,
          isVisited: false,
          isLoadingSendReport: false,
          isDoctor: false,
          showReplies: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "shareDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isOpenReportDialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "multilineTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "rate",
        type: "writable",
        variableType: "number",

        valueProp: "rate",
        onChangeProp: "onRateChange"
      },
      {
        path: "isLoadingReply",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bvPaw)}
        dir={"rtl"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hbgQp)}
        >
          <RaviUser
            data-plasmic-name={"raviUser"}
            data-plasmic-override={overrides.raviUser}
            avatarUrl={(() => {
              try {
                return $props.avatarUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.raviUser)}
            date={(() => {
              try {
                return $props.date;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isVisited={(() => {
              try {
                return $props.isVisited;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            onlyDoctor={(() => {
              try {
                return $props.onlyDoctor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            subTitle={(() => {
              try {
                return $props.subTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userId={(() => {
              try {
                return $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userName={(() => {
              try {
                return $props.userName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          {(() => {
            try {
              return !!$props.avgRateValue;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__fXjRy)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__orIvg
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return Number($props.avgRateValue.toFixed(1));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__oix5Z)}>
            {renderPlasmicSlot({
              defaultContents: null,
              value: args.options
            })}
          </div>
        </Stack__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lTjcn
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $props.commentText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__b7MAv)}
          onClick={async event => {
            const $steps = {};
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__lbidY)}>
            {(() => {
              try {
                return $props.showReplies;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Paziresh24Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zMbEi
                    )}
                  >
                    {
                      "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                    }
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__e0FnY
                )}
                color={"clear"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateRepliesDialogOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["repliesDialog", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateRepliesDialogOpen"] != null &&
                    typeof $steps["updateRepliesDialogOpen"] === "object" &&
                    typeof $steps["updateRepliesDialogOpen"].then === "function"
                  ) {
                    $steps["updateRepliesDialogOpen"] = await $steps[
                      "updateRepliesDialogOpen"
                    ];
                  }
                }}
                showStartIcon={true}
                startIcon={
                  <RepliesIcon
                    className={classNames(projectcss.all, sty.svg__lzAa)}
                    role={"img"}
                  />
                }
              />
            ) : null}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kv2Iy)}
          >
            <Popover
              data-plasmic-name={"popoverCore"}
              data-plasmic-override={overrides.popoverCore}
              className={classNames("__wab_instance", sty.popoverCore)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "popoverCore",
                  "open"
                ]).apply(null, eventArgs);
              }}
              open={generateStateValueProp($state, ["popoverCore", "open"])}
              overlay={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fBedF)}
                  dir={"ltr"}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [1, 2, 3, 4, 5];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vNfI
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runOnClickLike"] = true
                            ? (() => {
                                const actionArgs = {
                                  eventRef: $props["onRate"],
                                  args: [
                                    (() => {
                                      try {
                                        return currentItem;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return (({ eventRef, args }) => {
                                  return eventRef?.(...(args ?? []));
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runOnClickLike"] != null &&
                            typeof $steps["runOnClickLike"] === "object" &&
                            typeof $steps["runOnClickLike"].then === "function"
                          ) {
                            $steps["runOnClickLike"] = await $steps[
                              "runOnClickLike"
                            ];
                          }
                        }}
                      >
                        <RaviRateStar
                          data-plasmic-name={"raviRateStar"}
                          data-plasmic-override={overrides.raviRateStar}
                          className={classNames(
                            "__wab_instance",
                            sty.raviRateStar
                          )}
                          isSelected={(() => {
                            try {
                              return currentItem <= $state.rate;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    );
                  })}
                </Stack__>
              }
              themeResetClass={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_paziresh_24_design_system_css.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens
              )}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3LcFx)}
              >
                {(() => {
                  try {
                    return $props.likeCount > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ykqG3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.likeCount;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.rate == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ThumbUpIcon
                    className={classNames(projectcss.all, sty.svg__qxVr8)}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.rate > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <ThumbUpIcon
                    className={classNames(projectcss.all, sty.svg__uc4Ku)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t6Ixd
                  )}
                >
                  {
                    "\u0686\u0642\u062f\u0631 \u0645\u0641\u06cc\u062f \u0628\u0648\u062f\u061f"
                  }
                </div>
              </Stack__>
            </Popover>
            <Paziresh24Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rKbaW
                  )}
                >
                  {"\u0627\u0631\u0633\u0627\u0644 \u06a9\u0646"}
                </div>
              }
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button__ae33Y
              )}
              color={"clear"}
              onClick={async event => {
                const $steps = {};

                $steps["updateShareDialogOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["shareDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateShareDialogOpen"] != null &&
                  typeof $steps["updateShareDialogOpen"] === "object" &&
                  typeof $steps["updateShareDialogOpen"].then === "function"
                ) {
                  $steps["updateShareDialogOpen"] = await $steps[
                    "updateShareDialogOpen"
                  ];
                }
              }}
              showStartIcon={true}
              startIcon={
                <ShareIcon
                  className={classNames(projectcss.all, sty.svg__ejx0Y)}
                  role={"img"}
                />
              }
            />
          </Stack__>
        </div>
        {(() => {
          try {
            return $props.isDoctor;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__oYtt5)}>
            <Paziresh24MultilineTextInput
              data-plasmic-name={"multilineTextInput"}
              data-plasmic-override={overrides.multilineTextInput}
              className={classNames("__wab_instance", sty.multilineTextInput)}
              onValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "multilineTextInput",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f..."
              }
              value={generateStateValueProp($state, [
                "multilineTextInput",
                "value"
              ])}
            />

            <div className={classNames(projectcss.all, sty.freeBox__mM6Pz)}>
              {(() => {
                try {
                  return !$state.isLoadingReply;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zoEu
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIsLoadingReply"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isLoadingReply"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsLoadingReply"] != null &&
                      typeof $steps["updateIsLoadingReply"] === "object" &&
                      typeof $steps["updateIsLoadingReply"].then === "function"
                    ) {
                      $steps["updateIsLoadingReply"] = await $steps[
                        "updateIsLoadingReply"
                      ];
                    }

                    $steps["runOnReplySend"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onReplySend"],
                            args: [
                              (() => {
                                try {
                                  return $state.multilineTextInput.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnReplySend"] != null &&
                      typeof $steps["runOnReplySend"] === "object" &&
                      typeof $steps["runOnReplySend"].then === "function"
                    ) {
                      $steps["runOnReplySend"] = await $steps["runOnReplySend"];
                    }

                    $steps["updateIsLoadingReply2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isLoadingReply"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsLoadingReply2"] != null &&
                      typeof $steps["updateIsLoadingReply2"] === "object" &&
                      typeof $steps["updateIsLoadingReply2"].then === "function"
                    ) {
                      $steps["updateIsLoadingReply2"] = await $steps[
                        "updateIsLoadingReply2"
                      ];
                    }

                    $steps["updateMultilineTextInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["multilineTextInput", "value"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMultilineTextInputValue"] != null &&
                      typeof $steps["updateMultilineTextInputValue"] ===
                        "object" &&
                      typeof $steps["updateMultilineTextInputValue"].then ===
                        "function"
                    ) {
                      $steps["updateMultilineTextInputValue"] = await $steps[
                        "updateMultilineTextInputValue"
                      ];
                    }
                  }}
                >
                  {"\u0627\u0631\u0633\u0627\u0644"}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.isLoadingReply;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Icon17Icon
                  className={classNames(projectcss.all, sty.svg___0HioH)}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        ) : null}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__yzxqQ)}>
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.replyCard
        })}
      </div>
      <Paziresh24Dialog
        data-plasmic-name={"repliesDialog"}
        data-plasmic-override={overrides.repliesDialog}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__kDd2H)}>
            {renderPlasmicSlot({
              defaultContents: null,
              value: args.replies2
            })}
          </div>
        }
        className={classNames("__wab_instance", sty.repliesDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["repliesDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["repliesDialog", "open"])}
        title={"\u067e\u0627\u0633\u062e \u0647\u0627"}
        trigger={null}
      />

      <Paziresh24Dialog
        data-plasmic-name={"shareDialog"}
        data-plasmic-override={overrides.shareDialog}
        body={renderPlasmicSlot({
          defaultContents: (
            <div className={classNames(projectcss.all, sty.freeBox__ragMz)} />
          ),

          value: args.share
        })}
        className={classNames("__wab_instance", sty.shareDialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["shareDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["shareDialog", "open"])}
        title={
          "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "raviUser",
    "popoverCore",
    "raviRateStar",
    "multilineTextInput",
    "repliesDialog",
    "shareDialog"
  ],
  raviUser: ["raviUser"],
  popoverCore: ["popoverCore", "raviRateStar"],
  raviRateStar: ["raviRateStar"],
  multilineTextInput: ["multilineTextInput"],
  repliesDialog: ["repliesDialog"],
  shareDialog: ["shareDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  raviUser: typeof RaviUser;
  popoverCore: typeof Popover;
  raviRateStar: typeof RaviRateStar;
  multilineTextInput: typeof Paziresh24MultilineTextInput;
  repliesDialog: typeof Paziresh24Dialog;
  shareDialog: typeof Paziresh24Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviReviewCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviReviewCard__VariantsArgs;
    args?: PlasmicRaviReviewCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviReviewCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviReviewCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviReviewCard__ArgProps,
          internalVariantPropNames: PlasmicRaviReviewCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviReviewCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviReviewCard";
  } else {
    func.displayName = `PlasmicRaviReviewCard.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviReviewCard = Object.assign(
  // Top-level PlasmicRaviReviewCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    raviUser: makeNodeComponent("raviUser"),
    popoverCore: makeNodeComponent("popoverCore"),
    raviRateStar: makeNodeComponent("raviRateStar"),
    multilineTextInput: makeNodeComponent("multilineTextInput"),
    repliesDialog: makeNodeComponent("repliesDialog"),
    shareDialog: makeNodeComponent("shareDialog"),

    // Metadata about props expected for PlasmicRaviReviewCard
    internalVariantProps: PlasmicRaviReviewCard__VariantProps,
    internalArgProps: PlasmicRaviReviewCard__ArgProps
  }
);

export default PlasmicRaviReviewCard;
/* prettier-ignore-end */
