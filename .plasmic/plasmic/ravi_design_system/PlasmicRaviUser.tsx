// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: LGI_uX8bDUNt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import Paziresh24Chip from "../../Paziresh24Chip"; // plasmic-import: df-BFL5jhiFc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviUser.module.css"; // plasmic-import: LGI_uX8bDUNt/css

import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon

createPlasmicElementProxy;

export type PlasmicRaviUser__VariantMembers = {};
export type PlasmicRaviUser__VariantsArgs = {};
type VariantPropType = keyof PlasmicRaviUser__VariantsArgs;
export const PlasmicRaviUser__VariantProps = new Array<VariantPropType>();

export type PlasmicRaviUser__ArgsType = {
  userName?: string;
  date?: string;
  subTitle?: string;
  avatarUrl?: string;
  isVisited?: boolean;
  onlyDoctor?: boolean;
  isDoctor?: boolean;
  userId?: string;
  doctorLink?: any;
};
type ArgPropType = keyof PlasmicRaviUser__ArgsType;
export const PlasmicRaviUser__ArgProps = new Array<ArgPropType>(
  "userName",
  "date",
  "subTitle",
  "avatarUrl",
  "isVisited",
  "onlyDoctor",
  "isDoctor",
  "userId",
  "doctorLink"
);

export type PlasmicRaviUser__OverridesType = {
  root?: Flex__<"div">;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
};

export interface DefaultRaviUserProps {
  userName?: string;
  date?: string;
  subTitle?: string;
  avatarUrl?: string;
  isVisited?: boolean;
  onlyDoctor?: boolean;
  isDoctor?: boolean;
  userId?: string;
  doctorLink?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviUser__RenderFunc(props: {
  variants: PlasmicRaviUser__VariantsArgs;
  args: PlasmicRaviUser__ArgsType;
  overrides: PlasmicRaviUser__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userName:
            "\u06a9\u0627\u0631\u0628\u0631 \u0628\u062f\u0648\u0646 \u0646\u0627\u0645",
          isVisited: false,
          onlyDoctor: false,
          isDoctor: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___8UK9)}
        dir={"rtl"}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__tY3G)}
          component={Link}
          href={undefined}
          onClick={async event => {
            const $steps = {};

            $steps["goToPage"] = !!$props.userId
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return `/ravi/${$props.userId}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
          platform={"nextjs"}
        >
          <Paziresh24Avatar
            data-plasmic-name={"paziresh24Avatar"}
            data-plasmic-override={overrides.paziresh24Avatar}
            className={classNames("__wab_instance", sty.paziresh24Avatar)}
            name={(() => {
              try {
                return $props.userName || "کابر بدون نام";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            src={(() => {
              try {
                return $props.avatarUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </PlasmicLink__>
        <div className={classNames(projectcss.all, sty.freeBox___3QZhk)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yKFgb)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n2L5R
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.userName || "کابر بدون نام";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return $props.isDoctor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Paziresh24Chip
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Chip__e9B9S
                )}
                color={"green"}
                content={"\u062f\u0631\u0645\u0627\u0646\u06af\u0631"}
                rounded={true}
                size={"xSmall"}
              />
            ) : null}
            {(() => {
              try {
                return $props.isVisited;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Paziresh24Chip
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Chip__hZtW1
                )}
                color={"gray"}
                content={"\u0648\u06cc\u0632\u06cc\u062a \u0634\u062f\u0647"}
                rounded={true}
                size={"xSmall"}
              />
            ) : null}
            {(() => {
              try {
                return $props.onlyDoctor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Paziresh24Chip
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Chip__ymlF7
                )}
                color={"blue"}
                content={
                  "\u0642\u0627\u0628\u0644 \u0646\u0645\u0627\u06cc\u0634 \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc \u062e\u0648\u062f \u062f\u0631\u0645\u0627\u0646\u06af\u0631"
                }
                rounded={true}
                size={"xSmall"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__io37I)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l6LFh
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.date;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return !!$props.date && !!$props.subTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wv5Dg
                )}
              >
                {"|"}
              </div>
            ) : null}
            {(() => {
              try {
                return !$props.doctorLink.url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tPEgh
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.subTitle;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
            {(() => {
              try {
                return !!$props?.doctorLink?.url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xAgss
                )}
                component={Link}
                href={(() => {
                  try {
                    return $props.doctorLink.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "/";
                    }
                    throw e;
                  }
                })()}
                platform={"nextjs"}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.doctorLink.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Some link text";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </PlasmicLink__>
            ) : null}
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24Avatar: typeof Paziresh24Avatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviUser__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviUser__VariantsArgs;
    args?: PlasmicRaviUser__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviUser__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviUser__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviUser__ArgProps,
          internalVariantPropNames: PlasmicRaviUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviUser";
  } else {
    func.displayName = `PlasmicRaviUser.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviUser = Object.assign(
  // Top-level PlasmicRaviUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),

    // Metadata about props expected for PlasmicRaviUser
    internalVariantProps: PlasmicRaviUser__VariantProps,
    internalArgProps: PlasmicRaviUser__ArgProps
  }
);

export default PlasmicRaviUser;
/* prettier-ignore-end */
