// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pkMLinFwM9pzwv5S5KpiAu
// Component: e1uyHZLgwx11

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import sty from "./PlasmicRaviRateStar.module.css"; // plasmic-import: e1uyHZLgwx11/css

import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: Y1pYk8CLZmXg/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: Tqt69LLPHWCT/icon

createPlasmicElementProxy;

export type PlasmicRaviRateStar__VariantMembers = {
  isSelected: "isSelected";
  isLarge: "isLarge";
};
export type PlasmicRaviRateStar__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  isLarge?: SingleBooleanChoiceArg<"isLarge">;
};
type VariantPropType = keyof PlasmicRaviRateStar__VariantsArgs;
export const PlasmicRaviRateStar__VariantProps = new Array<VariantPropType>(
  "isSelected",
  "isLarge"
);

export type PlasmicRaviRateStar__ArgsType = {};
type ArgPropType = keyof PlasmicRaviRateStar__ArgsType;
export const PlasmicRaviRateStar__ArgProps = new Array<ArgPropType>();

export type PlasmicRaviRateStar__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultRaviRateStarProps {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  isLarge?: SingleBooleanChoiceArg<"isLarge">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRaviRateStar__RenderFunc(props: {
  variants: PlasmicRaviRateStar__VariantsArgs;
  args: PlasmicRaviRateStar__ArgsType;
  overrides: PlasmicRaviRateStar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected
      },
      {
        path: "isLarge",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isLarge
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisLarge]: hasVariant($state, "isLarge", "isLarge"),
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected")
        }
      )}
    >
      <Icon20Icon
        className={classNames(projectcss.all, sty.svg__thGRo, {
          [sty.svgisLarge__thGRocjGnA]: hasVariant(
            $state,
            "isLarge",
            "isLarge"
          ),
          [sty.svgisSelected__thGRoD4OS]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          )
        })}
        role={"img"}
      />

      {(hasVariant($state, "isSelected", "isSelected") ? true : false) ? (
        <Icon19Icon
          className={classNames(projectcss.all, sty.svg__elWvz, {
            [sty.svgisLarge__elWvzcjGnA]: hasVariant(
              $state,
              "isLarge",
              "isLarge"
            ),
            [sty.svgisSelected__elWvzD4OS]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            )
          })}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRaviRateStar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRaviRateStar__VariantsArgs;
    args?: PlasmicRaviRateStar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRaviRateStar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRaviRateStar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRaviRateStar__ArgProps,
          internalVariantPropNames: PlasmicRaviRateStar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRaviRateStar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRaviRateStar";
  } else {
    func.displayName = `PlasmicRaviRateStar.${nodeName}`;
  }
  return func;
}

export const PlasmicRaviRateStar = Object.assign(
  // Top-level PlasmicRaviRateStar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicRaviRateStar
    internalVariantProps: PlasmicRaviRateStar__VariantProps,
    internalArgProps: PlasmicRaviRateStar__ArgProps
  }
);

export default PlasmicRaviRateStar;
/* prettier-ignore-end */
