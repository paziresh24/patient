/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: 1JVvWgQsicxr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherComponentsTitle from "../../LauncherComponentsTitle"; // plasmic-import: hyfYYMUJ_ZCV/component
import LauncherComponentsApp from "../../LauncherComponentsApp"; // plasmic-import: 25u6_6Q-fQwp/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksApps.module.css"; // plasmic-import: 1JVvWgQsicxr/css

createPlasmicElementProxy;

export type PlasmicLauncherBlocksApps__VariantMembers = {};
export type PlasmicLauncherBlocksApps__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlocksApps__VariantsArgs;
export const PlasmicLauncherBlocksApps__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksApps__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherBlocksApps__ArgsType;
export const PlasmicLauncherBlocksApps__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherBlocksApps__OverridesType = {
  root?: Flex__<"div">;
  launcherComponentsTitle?: Flex__<typeof LauncherComponentsTitle>;
  freeBox?: Flex__<"div">;
};

export interface DefaultLauncherBlocksAppsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksApps__RenderFunc(props: {
  variants: PlasmicLauncherBlocksApps__VariantsArgs;
  args: PlasmicLauncherBlocksApps__ArgsType;
  overrides: PlasmicLauncherBlocksApps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <LauncherComponentsTitle
        data-plasmic-name={"launcherComponentsTitle"}
        data-plasmic-override={overrides.launcherComponentsTitle}
        className={classNames("__wab_instance", sty.launcherComponentsTitle)}
        isNew={true}
        moreLink={"/_/apps"}
        moreTitle={
          "\u0647\u0645\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627"
        }
        subTitle={(() => {
          try {
            return $ctx.auth.info?.provider?.job_title === "doctor"
              ? "حرفه‌ای‌‌تر در پذیرش۲۴"
              : "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        title={"\u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(() => {
          try {
            return $ctx.auth.info?.provider?.job_title === "doctor";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <LauncherComponentsApp
            avatar={
              "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fnelson-notification.png?versionId="
            }
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsApp__c9Nm0
            )}
            description={
              "\u0627\u0631\u0633\u0627\u0644 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0647\u0627 \u0628\u0631\u0627\u0633\u0627\u0633 \u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627\u06cc \u0645\u062e\u0644\u062a\u0641"
            }
            link={"/dashboard/apps/drapp/notification/"}
            name={
              "\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9"
            }
          />
        ) : null}
        {(() => {
          try {
            return $ctx.auth.info?.provider?.job_title === "doctor";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <LauncherComponentsApp
            avatar={
              "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finsurance-plugin.png?versionId="
            }
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsApp__yf3EN
            )}
            description={
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0628\u06cc\u0645\u0647 \u0647\u0627\u06cc \u067e\u0627\u06cc\u0647 \u0648 \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
            }
            link={"/_/bimehnama/setting/"}
            name={"\u0628\u06cc\u0645\u0647 \u0646\u0645\u0627"}
            soon={(() => {
              try {
                return !$ctx.Growthbook.features["hamdast::bimehnama"];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "soon";
                }
                throw e;
              }
            })()}
            widgetId={"hhhzbbsffq0nlna"}
          />
        ) : null}
        {(() => {
          try {
            return $ctx.auth.info?.provider?.job_title === "doctor";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <LauncherComponentsApp
            avatar={
              "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finstagram-plugin.png?versionId="
            }
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsApp__kHecn
            )}
            description={
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u067e\u0633\u062a\u200c\u0647\u0627\u06cc \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645 \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
            }
            link={"/_/cywoc24/setting/"}
            name={
              "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645"
            }
            soon={true}
            widgetId={"aed80eahprc1qs0"}
          />
        ) : null}
        {(() => {
          try {
            return $ctx.auth.info?.provider?.job_title !== "doctor";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <LauncherComponentsApp
            avatar={
              "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom%2Ficon.png"
            }
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsApp__iwAwY
            )}
            description={
              "\u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0646\u0627\u0645\u0646\u0638\u0645 \u0627\u0633\u062a\u061f \u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646\u060c \u06af\u0641\u062a\u06af\u0648 \u0631\u0627 \u0622\u063a\u0627\u0632 \u06a9\u0646\u06cc\u062f."
            }
            link={"/_/liom/irregularities/?origin=launcher"}
            name={
              "\u062a\u0634\u062e\u06cc\u0635 \u062f\u0647\u0646\u062f\u0647 \u0639\u0644\u062a \u067e\u0631\u06cc\u0648\u062f \u0646\u0627\u0645\u0646\u0638\u0645"
            }
          />
        ) : null}
        {(() => {
          try {
            return $ctx.auth.info?.provider?.job_title !== "doctor";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <LauncherComponentsApp
            avatar={
              "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2FSalamat%20Logo.svg?versionId="
            }
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsApp__huggg
            )}
            description={
              "\u0628\u0627 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0628\u0647 \u0635\u0648\u0631\u062a \u0631\u0627\u06cc\u06af\u0627\u0646 \u0635\u062d\u0628\u062a \u06a9\u0646\u06cc\u062f."
            }
            link={"/_/roshan/salamat/?origin=launcher-apps"}
            name={
              "\u0645\u0634\u0627\u0648\u0631 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0633\u0644\u0627\u0645\u062a \u0645\u0627\u062f\u0631 \u0648 \u06a9\u0648\u062f\u06a9"
            }
          />
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "launcherComponentsTitle", "freeBox"],
  launcherComponentsTitle: ["launcherComponentsTitle"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  launcherComponentsTitle: typeof LauncherComponentsTitle;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksApps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksApps__VariantsArgs;
    args?: PlasmicLauncherBlocksApps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherBlocksApps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherBlocksApps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlocksApps__ArgProps,
          internalVariantPropNames: PlasmicLauncherBlocksApps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksApps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksApps";
  } else {
    func.displayName = `PlasmicLauncherBlocksApps.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksApps = Object.assign(
  // Top-level PlasmicLauncherBlocksApps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    launcherComponentsTitle: makeNodeComponent("launcherComponentsTitle"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicLauncherBlocksApps
    internalVariantProps: PlasmicLauncherBlocksApps__VariantProps,
    internalArgProps: PlasmicLauncherBlocksApps__ArgProps
  }
);

export default PlasmicLauncherBlocksApps;
/* prettier-ignore-end */
