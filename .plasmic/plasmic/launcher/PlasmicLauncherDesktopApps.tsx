/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: rMG1ZGZR_tFC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { Portal } from "@/common/fragment/components/portal"; // plasmic-import: 8JnrBOuqUY30/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherApps from "../../LauncherApps"; // plasmic-import: Qz6g1T5BaK7n/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherDesktopApps.module.css"; // plasmic-import: rMG1ZGZR_tFC/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: SGzD5_1b_OtM/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicLauncherDesktopApps__VariantMembers = {};
export type PlasmicLauncherDesktopApps__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherDesktopApps__VariantsArgs;
export const PlasmicLauncherDesktopApps__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherDesktopApps__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherDesktopApps__ArgsType;
export const PlasmicLauncherDesktopApps__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherDesktopApps__OverridesType = {
  root?: Flex__<"div">;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  fragmentPortal?: Flex__<typeof Portal>;
  launcherApps?: Flex__<typeof LauncherApps>;
};

export interface DefaultLauncherDesktopAppsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherDesktopApps__RenderFunc(props: {
  variants: PlasmicLauncherDesktopApps__VariantsArgs;
  args: PlasmicLauncherDesktopApps__ArgsType;
  overrides: PlasmicLauncherDesktopApps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <Paziresh24Button
        data-plasmic-name={"paziresh24Button"}
        data-plasmic-override={overrides.paziresh24Button}
        children2={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"\u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627"}
          </div>
        }
        className={classNames("__wab_instance", sty.paziresh24Button)}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isOpen"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsOpen"] != null &&
            typeof $steps["updateIsOpen"] === "object" &&
            typeof $steps["updateIsOpen"].then === "function"
          ) {
            $steps["updateIsOpen"] = await $steps["updateIsOpen"];
          }

          $steps["updateIsOpen2"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (globalThis.document.body.style.overflow = "hidden");
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsOpen2"] != null &&
            typeof $steps["updateIsOpen2"] === "object" &&
            typeof $steps["updateIsOpen2"].then === "function"
          ) {
            $steps["updateIsOpen2"] = await $steps["updateIsOpen2"];
          }
        }}
        outline={true}
        showStartIcon={true}
        size={"compact"}
        startIcon={
          <IconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
      />

      <Portal
        data-plasmic-name={"fragmentPortal"}
        data-plasmic-override={overrides.fragmentPortal}
        className={classNames("__wab_instance", sty.fragmentPortal)}
        container={(() => {
          try {
            return globalThis.document.body;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        {(() => {
          try {
            return $state.isOpen;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Reveal
            className={classNames("__wab_instance", sty.reveal__lN8Uc)}
            duration={400}
            triggerOnce={false}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__wNyAd)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (globalThis.document.body.style.overflow = "");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateIsOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isOpen"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsOpen"] != null &&
                  typeof $steps["updateIsOpen"] === "object" &&
                  typeof $steps["updateIsOpen"].then === "function"
                ) {
                  $steps["updateIsOpen"] = await $steps["updateIsOpen"];
                }
              }}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__rgO5E)}
                direction={"up"}
                duration={500}
                triggerOnce={true}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__p3Im9)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return event.stopPropagation();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <LauncherApps
                    data-plasmic-name={"launcherApps"}
                    data-plasmic-override={overrides.launcherApps}
                    className={classNames("__wab_instance", sty.launcherApps)}
                    widgetFrames={true}
                  />
                </div>
              </Reveal>
            </div>
          </Reveal>
        ) : null}
      </Portal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "paziresh24Button",
    "svg",
    "text",
    "fragmentPortal",
    "launcherApps"
  ],
  paziresh24Button: ["paziresh24Button", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  fragmentPortal: ["fragmentPortal", "launcherApps"],
  launcherApps: ["launcherApps"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24Button: typeof Paziresh24Button;
  svg: "svg";
  text: "div";
  fragmentPortal: typeof Portal;
  launcherApps: typeof LauncherApps;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherDesktopApps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherDesktopApps__VariantsArgs;
    args?: PlasmicLauncherDesktopApps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherDesktopApps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherDesktopApps__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherDesktopApps__ArgProps,
          internalVariantPropNames: PlasmicLauncherDesktopApps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherDesktopApps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherDesktopApps";
  } else {
    func.displayName = `PlasmicLauncherDesktopApps.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherDesktopApps = Object.assign(
  // Top-level PlasmicLauncherDesktopApps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    fragmentPortal: makeNodeComponent("fragmentPortal"),
    launcherApps: makeNodeComponent("launcherApps"),

    // Metadata about props expected for PlasmicLauncherDesktopApps
    internalVariantProps: PlasmicLauncherDesktopApps__VariantProps,
    internalArgProps: PlasmicLauncherDesktopApps__ArgProps
  }
);

export default PlasmicLauncherDesktopApps;
/* prettier-ignore-end */
