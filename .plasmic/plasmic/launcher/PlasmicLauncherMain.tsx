/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: zKD4DmZLEtqh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherWrapper from "../../LauncherWrapper"; // plasmic-import: 3TTnoIEhqXMk/component
import LauncherBlocksProfile from "../../LauncherBlocksProfile"; // plasmic-import: AdXQLu7KAuFc/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherBlocksWallet from "../../LauncherBlocksWallet"; // plasmic-import: h-1safqUkN1a/component
import LauncherBlocksShortcuts from "../../LauncherBlocksShortcuts"; // plasmic-import: SALc6_vQPXlG/component
import LauncherBlocksWidgetsSanje from "../../LauncherBlocksWidgetsSanje"; // plasmic-import: p_ncR6UWroPY/component
import LauncherBlocksWidgetsNelson from "../../LauncherBlocksWidgetsNelson"; // plasmic-import: kPpI69i3raKy/component
import LauncherBlocksApps from "../../LauncherBlocksApps"; // plasmic-import: 1JVvWgQsicxr/component
import LauncherBlocksPatientServices from "../../LauncherBlocksPatientServices"; // plasmic-import: ofxhzuPg2IHJ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherMain.module.css"; // plasmic-import: zKD4DmZLEtqh/css

import LauncherIconsLoaderIcon from "./icons/PlasmicIcon__LauncherIconsLoader"; // plasmic-import: 4lP5I8e4Rz71/icon

createPlasmicElementProxy;

export type PlasmicLauncherMain__VariantMembers = {};
export type PlasmicLauncherMain__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherMain__VariantsArgs;
export const PlasmicLauncherMain__VariantProps = new Array<VariantPropType>();

export type PlasmicLauncherMain__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherMain__ArgsType;
export const PlasmicLauncherMain__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherMain__OverridesType = {
  root?: Flex__<"div">;
  launcherWrapper?: Flex__<typeof LauncherWrapper>;
  launcherBlocksProfile?: Flex__<typeof LauncherBlocksProfile>;
  launcherBlocksWallet?: Flex__<typeof LauncherBlocksWallet>;
  launcherBlocksShortcuts?: Flex__<typeof LauncherBlocksShortcuts>;
  launcherBlocksWidgetsSanje?: Flex__<typeof LauncherBlocksWidgetsSanje>;
  launcherBlocksWidgetsNelson?: Flex__<typeof LauncherBlocksWidgetsNelson>;
  launcherBlocksApps?: Flex__<typeof LauncherBlocksApps>;
  launcherBlocksPatientServices?: Flex__<typeof LauncherBlocksPatientServices>;
  svg?: Flex__<"svg">;
};

export interface DefaultLauncherMainProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherMain__RenderFunc(props: {
  variants: PlasmicLauncherMain__VariantsArgs;
  args: PlasmicLauncherMain__ArgsType;
  overrides: PlasmicLauncherMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return !!$ctx.auth.info?.id;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__by7Eu)}
        >
          <LauncherWrapper
            data-plasmic-name={"launcherWrapper"}
            data-plasmic-override={overrides.launcherWrapper}
            className={classNames("__wab_instance", sty.launcherWrapper)}
          />

          {(() => {
            try {
              return $ctx.auth.info?.provider?.job_title === "doctor";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LauncherBlocksProfile
              data-plasmic-name={"launcherBlocksProfile"}
              data-plasmic-override={overrides.launcherBlocksProfile}
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksProfile
              )}
            />
          ) : null}
          {(() => {
            try {
              return (() => {
                if ($ctx.auth.info?.provider?.job_title === "doctor")
                  return false;
                return (
                  $ctx.Growthbook.features["hamdast::katibe"]?.hide == false
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__j6Oe5)}
              duration={300}
              triggerOnce={true}
            >
              <LauncherBlocksWallet
                data-plasmic-name={"launcherBlocksWallet"}
                data-plasmic-override={overrides.launcherBlocksWallet}
                className={classNames(
                  "__wab_instance",
                  sty.launcherBlocksWallet
                )}
              />
            </Reveal>
          ) : null}
          <Reveal
            className={classNames("__wab_instance", sty.reveal__pf8Ib)}
            duration={300}
            triggerOnce={true}
          >
            <LauncherBlocksShortcuts
              data-plasmic-name={"launcherBlocksShortcuts"}
              data-plasmic-override={overrides.launcherBlocksShortcuts}
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksShortcuts
              )}
            />
          </Reveal>
          {(() => {
            try {
              return $ctx.auth.info?.provider?.job_title === "doctor";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__vsuQt)}
              duration={300}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cJfkN)}
              >
                <LauncherBlocksWidgetsSanje
                  data-plasmic-name={"launcherBlocksWidgetsSanje"}
                  data-plasmic-override={overrides.launcherBlocksWidgetsSanje}
                  className={classNames(
                    "__wab_instance",
                    sty.launcherBlocksWidgetsSanje
                  )}
                />

                <LauncherBlocksWidgetsNelson
                  data-plasmic-name={"launcherBlocksWidgetsNelson"}
                  data-plasmic-override={overrides.launcherBlocksWidgetsNelson}
                  className={classNames(
                    "__wab_instance",
                    sty.launcherBlocksWidgetsNelson
                  )}
                />
              </Stack__>
            </Reveal>
          ) : null}
          <Reveal
            className={classNames("__wab_instance", sty.reveal__vvBKi)}
            duration={300}
            triggerOnce={true}
          >
            <LauncherBlocksApps
              data-plasmic-name={"launcherBlocksApps"}
              data-plasmic-override={overrides.launcherBlocksApps}
              className={classNames("__wab_instance", sty.launcherBlocksApps)}
            />
          </Reveal>
          {(() => {
            try {
              return $ctx.auth.info?.provider?.job_title === "doctor";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__h09Vw)}
              duration={300}
              triggerOnce={true}
            >
              <LauncherBlocksPatientServices
                data-plasmic-name={"launcherBlocksPatientServices"}
                data-plasmic-override={overrides.launcherBlocksPatientServices}
                className={classNames(
                  "__wab_instance",
                  sty.launcherBlocksPatientServices
                )}
              />
            </Reveal>
          ) : null}
        </Stack__>
      ) : null}
      {(() => {
        try {
          return !$ctx.auth.info?.id;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <LauncherIconsLoaderIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "launcherWrapper",
    "launcherBlocksProfile",
    "launcherBlocksWallet",
    "launcherBlocksShortcuts",
    "launcherBlocksWidgetsSanje",
    "launcherBlocksWidgetsNelson",
    "launcherBlocksApps",
    "launcherBlocksPatientServices",
    "svg"
  ],
  launcherWrapper: ["launcherWrapper"],
  launcherBlocksProfile: ["launcherBlocksProfile"],
  launcherBlocksWallet: ["launcherBlocksWallet"],
  launcherBlocksShortcuts: ["launcherBlocksShortcuts"],
  launcherBlocksWidgetsSanje: ["launcherBlocksWidgetsSanje"],
  launcherBlocksWidgetsNelson: ["launcherBlocksWidgetsNelson"],
  launcherBlocksApps: ["launcherBlocksApps"],
  launcherBlocksPatientServices: ["launcherBlocksPatientServices"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  launcherWrapper: typeof LauncherWrapper;
  launcherBlocksProfile: typeof LauncherBlocksProfile;
  launcherBlocksWallet: typeof LauncherBlocksWallet;
  launcherBlocksShortcuts: typeof LauncherBlocksShortcuts;
  launcherBlocksWidgetsSanje: typeof LauncherBlocksWidgetsSanje;
  launcherBlocksWidgetsNelson: typeof LauncherBlocksWidgetsNelson;
  launcherBlocksApps: typeof LauncherBlocksApps;
  launcherBlocksPatientServices: typeof LauncherBlocksPatientServices;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherMain__VariantsArgs;
    args?: PlasmicLauncherMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherMain__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherMain__ArgProps,
          internalVariantPropNames: PlasmicLauncherMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherMain";
  } else {
    func.displayName = `PlasmicLauncherMain.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherMain = Object.assign(
  // Top-level PlasmicLauncherMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    launcherWrapper: makeNodeComponent("launcherWrapper"),
    launcherBlocksProfile: makeNodeComponent("launcherBlocksProfile"),
    launcherBlocksWallet: makeNodeComponent("launcherBlocksWallet"),
    launcherBlocksShortcuts: makeNodeComponent("launcherBlocksShortcuts"),
    launcherBlocksWidgetsSanje: makeNodeComponent("launcherBlocksWidgetsSanje"),
    launcherBlocksWidgetsNelson: makeNodeComponent(
      "launcherBlocksWidgetsNelson"
    ),
    launcherBlocksApps: makeNodeComponent("launcherBlocksApps"),
    launcherBlocksPatientServices: makeNodeComponent(
      "launcherBlocksPatientServices"
    ),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicLauncherMain
    internalVariantProps: PlasmicLauncherMain__VariantProps,
    internalArgProps: PlasmicLauncherMain__ArgProps
  }
);

export default PlasmicLauncherMain;
/* prettier-ignore-end */
