/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: 3TTnoIEhqXMk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherWrapper.module.css"; // plasmic-import: 3TTnoIEhqXMk/css

createPlasmicElementProxy;

export type PlasmicLauncherWrapper__VariantMembers = {};
export type PlasmicLauncherWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherWrapper__VariantsArgs;
export const PlasmicLauncherWrapper__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherWrapper__ArgsType = { page?: string };
type ArgPropType = keyof PlasmicLauncherWrapper__ArgsType;
export const PlasmicLauncherWrapper__ArgProps = new Array<ArgPropType>("page");

export type PlasmicLauncherWrapper__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultLauncherWrapperProps {
  page?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherWrapper__RenderFunc(props: {
  variants: PlasmicLauncherWrapper__VariantsArgs;
  args: PlasmicLauncherWrapper__ArgsType;
  overrides: PlasmicLauncherWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_paziresh_24_design_system,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={(() => {
          try {
            return [$ctx.auth.info?.id, $ctx.Growthbook.isReady];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["growthbookAttributes"] =
            $ctx.Growthbook.isReady && $ctx?.auth?.info?.id
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            user_id: $ctx.auth?.info?.id
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions[
                    "GrowthbookGlobalContext.setAttributes"
                  ]?.apply(null, [...actionArgs.args]);
                })()
              : undefined;
          if (
            $steps["growthbookAttributes"] != null &&
            typeof $steps["growthbookAttributes"] === "object" &&
            typeof $steps["growthbookAttributes"].then === "function"
          ) {
            $steps["growthbookAttributes"] = await $steps[
              "growthbookAttributes"
            ];
          }

          $steps["sendLog"] = $ctx?.auth?.info?.id
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return {
                          evant_group: "launcher_statistics",
                          event_type: "page_load",
                          user_id: $ctx.auth.info?.id,
                          is_doctor: $ctx.auth.info?.is_doctor,
                          page: $props.page
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Splunk.sendLog"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["sendLog"] != null &&
            typeof $steps["sendLog"] === "object" &&
            typeof $steps["sendLog"].then === "function"
          ) {
            $steps["sendLog"] = await $steps["sendLog"];
          }

          $steps["setClariyUserId"] = !!$ctx.auth.info.id
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if (globalThis?.clarity) {
                        return globalThis.clarity?.(
                          "identify",
                          $ctx.auth?.info?.id
                        );
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["setClariyUserId"] != null &&
            typeof $steps["setClariyUserId"] === "object" &&
            typeof $steps["setClariyUserId"].then === "function"
          ) {
            $steps["setClariyUserId"] = await $steps["setClariyUserId"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherWrapper__VariantsArgs;
    args?: PlasmicLauncherWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherWrapper__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherWrapper__ArgProps,
          internalVariantPropNames: PlasmicLauncherWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherWrapper";
  } else {
    func.displayName = `PlasmicLauncherWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherWrapper = Object.assign(
  // Top-level PlasmicLauncherWrapper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicLauncherWrapper
    internalVariantProps: PlasmicLauncherWrapper__VariantProps,
    internalArgProps: PlasmicLauncherWrapper__ArgProps
  }
);

export default PlasmicLauncherWrapper;
/* prettier-ignore-end */
