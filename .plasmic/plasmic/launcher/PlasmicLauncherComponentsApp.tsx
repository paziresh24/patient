/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: 25u6_6Q-fQwp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Portal } from "@/common/fragment/components/portal"; // plasmic-import: 8JnrBOuqUY30/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { AppFrame } from "@/modules/hamdast/appFrame"; // plasmic-import: m7qJ9qUrvaxd/codeComponent
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherComponentsApp.module.css"; // plasmic-import: 25u6_6Q-fQwp/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: vvmOP9mnVRyD/icon

createPlasmicElementProxy;

export type PlasmicLauncherComponentsApp__VariantMembers = {
  soon: "soon";
};
export type PlasmicLauncherComponentsApp__VariantsArgs = {
  soon?: SingleBooleanChoiceArg<"soon">;
};
type VariantPropType = keyof PlasmicLauncherComponentsApp__VariantsArgs;
export const PlasmicLauncherComponentsApp__VariantProps =
  new Array<VariantPropType>("soon");

export type PlasmicLauncherComponentsApp__ArgsType = {
  name?: string;
  link?: string;
  avatar?: string;
  description?: string;
  widgetId?: string;
  widgetFrame?: boolean;
  onEvent?: () => void;
  appkey?: string;
  pagekey?: string;
};
type ArgPropType = keyof PlasmicLauncherComponentsApp__ArgsType;
export const PlasmicLauncherComponentsApp__ArgProps = new Array<ArgPropType>(
  "name",
  "link",
  "avatar",
  "description",
  "widgetId",
  "widgetFrame",
  "onEvent",
  "appkey",
  "pagekey"
);

export type PlasmicLauncherComponentsApp__OverridesType = {
  root?: Flex__<"div">;
  fragmentPortal?: Flex__<typeof Portal>;
  svg?: Flex__<"svg">;
  hamdastAppFrame?: Flex__<typeof AppFrame>;
  apiRequest?: Flex__<typeof ApiRequest>;
  modal?: Flex__<typeof Paziresh24Modal>;
  span?: Flex__<"span">;
};

export interface DefaultLauncherComponentsAppProps {
  name?: string;
  link?: string;
  avatar?: string;
  description?: string;
  widgetId?: string;
  widgetFrame?: boolean;
  onEvent?: () => void;
  appkey?: string;
  pagekey?: string;
  soon?: SingleBooleanChoiceArg<"soon">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherComponentsApp__RenderFunc(props: {
  variants: PlasmicLauncherComponentsApp__VariantsArgs;
  args: PlasmicLauncherComponentsApp__ArgsType;
  overrides: PlasmicLauncherComponentsApp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          widgetFrame: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "soon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.soon
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root,
        { [sty.rootsoon]: hasVariant($state, "soon", "soon") }
      )}
    >
      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Portal
          data-plasmic-name={"fragmentPortal"}
          data-plasmic-override={overrides.fragmentPortal}
          className={classNames("__wab_instance", sty.fragmentPortal)}
          container={(() => {
            try {
              return globalThis.document.body;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(() => {
            try {
              return $state.isOpen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Reveal
              className={classNames("__wab_instance", sty.reveal__uJw7O)}
              duration={400}
              triggerOnce={true}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal___56UiD)}
                direction={"up"}
                duration={500}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__h9WDu)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ojupf)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateIsOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["isOpen"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsOpen"] != null &&
                        typeof $steps["updateIsOpen"] === "object" &&
                        typeof $steps["updateIsOpen"].then === "function"
                      ) {
                        $steps["updateIsOpen"] = await $steps["updateIsOpen"];
                      }
                    }}
                  >
                    <XIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vjSbm)}
                  >
                    <AppFrame
                      data-plasmic-name={"hamdastAppFrame"}
                      data-plasmic-override={overrides.hamdastAppFrame}
                      appKey={(() => {
                        try {
                          return $props.appkey;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      className={classNames(
                        "__wab_instance",
                        sty.hamdastAppFrame
                      )}
                      params={(() => {
                        try {
                          return [$props.pagekey];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                </div>
              </Reveal>
            </Reveal>
          ) : null}
        </Portal>
      ) : null}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wxtDc, {
          [sty.freeBoxsoon__wxtDcwdK6]: hasVariant($state, "soon", "soon")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsOpen"] =
            !!$props.link && !$state.soon && $props.widgetFrame
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isOpen"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateIsOpen"] != null &&
            typeof $steps["updateIsOpen"] === "object" &&
            typeof $steps["updateIsOpen"].then === "function"
          ) {
            $steps["updateIsOpen"] = await $steps["updateIsOpen"];
          }

          $steps["goToPage"] =
            !!$props.link && !$state.soon && !$props.widgetFrame
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return $props.link;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
          }

          $steps["runOnEvent"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onEvent"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnEvent"] != null &&
            typeof $steps["runOnEvent"] === "object" &&
            typeof $steps["runOnEvent"].then === "function"
          ) {
            $steps["runOnEvent"] = await $steps["runOnEvent"];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3Yal5)}
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__vnPue, {
              [sty.imgsoon__vnPuewdK6]: hasVariant($state, "soon", "soon")
            })}
            displayHeight={"46px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"46px"}
            height={"46"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.avatar;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            width={"46"}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox___94WL, {
              [sty.freeBoxsoon___94WLwdK6]: hasVariant($state, "soon", "soon")
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9RkNp, {
                [sty.freeBoxsoon___9RkNPwdK6]: hasVariant(
                  $state,
                  "soon",
                  "soon"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wwO2O,
                  {
                    [sty.textsoon__wwO2OwdK6]: hasVariant(
                      $state,
                      "soon",
                      "soon"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(hasVariant($state, "soon", "soon") ? true : false) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rrEuk,
                    {
                      [sty.textsoon__rrEukwdK6]: hasVariant(
                        $state,
                        "soon",
                        "soon"
                      )
                    }
                  )}
                >
                  {"\u0628\u0632\u0648\u062f\u06cc"}
                </div>
              ) : null}
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xiGce,
                {
                  [sty.textsoon__xiGcewdK6]: hasVariant($state, "soon", "soon")
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </Stack__>
        {(() => {
          try {
            return !!$props.widgetId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__tPtNx)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return event?.stopPropagation();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              url={(() => {
                try {
                  return $props.widgetId
                    ? `https://apigw.paziresh24.com/v1/hamdast/widget/activated_users?widget_id=${$props.widgetId}`
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <Paziresh24Modal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                body={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ki5Y)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequest.data?.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ptGgo
                          )}
                          key={currentIndex}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__ndDfE, "bg-white")}
                            displayHeight={"70px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"70px"}
                            loading={"eager"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return globalThis.open(
                                          `/dr/${currentItem?.slug}`,
                                          "_blank"
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            src={(() => {
                              try {
                                return currentItem.image_url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            width={``}
                          />
                        </div>
                      );
                    })}
                  </div>
                }
                className={classNames("__wab_instance", sty.modal)}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qxIby)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0FQhl
                      )}
                    >
                      {
                        "\u062d\u0631\u0641\u0647\u200c\u0627\u06cc \u0647\u0627"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bEsud
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0628\u0631 \u0631\u0648\u06cc \u0647\u0631 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u0628\u0632\u0627\u0631\u06a9 "
                          }
                        </React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </span>
                        }
                        <React.Fragment>
                          {
                            " \u0631\u0627 \u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0646\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                }
                trigger={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ld5Zl)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequest.data?.data
                            ?.slice(0, 4)
                            ?.reverse();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tUwbH, "bg-white")}
                          displayHeight={"28px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"28px"}
                          displayWidth={"28px"}
                          key={currentIndex}
                          loading={"eager"}
                          src={(() => {
                            try {
                              return currentItem.image_url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          width={``}
                        />
                      );
                    })}
                  </div>
                }
              />
            </ApiRequest>
          </div>
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "fragmentPortal",
    "svg",
    "hamdastAppFrame",
    "apiRequest",
    "modal",
    "span"
  ],
  fragmentPortal: ["fragmentPortal", "svg", "hamdastAppFrame"],
  svg: ["svg"],
  hamdastAppFrame: ["hamdastAppFrame"],
  apiRequest: ["apiRequest", "modal", "span"],
  modal: ["modal", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fragmentPortal: typeof Portal;
  svg: "svg";
  hamdastAppFrame: typeof AppFrame;
  apiRequest: typeof ApiRequest;
  modal: typeof Paziresh24Modal;
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherComponentsApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherComponentsApp__VariantsArgs;
    args?: PlasmicLauncherComponentsApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherComponentsApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherComponentsApp__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherComponentsApp__ArgProps,
          internalVariantPropNames: PlasmicLauncherComponentsApp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherComponentsApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherComponentsApp";
  } else {
    func.displayName = `PlasmicLauncherComponentsApp.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherComponentsApp = Object.assign(
  // Top-level PlasmicLauncherComponentsApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fragmentPortal: makeNodeComponent("fragmentPortal"),
    svg: makeNodeComponent("svg"),
    hamdastAppFrame: makeNodeComponent("hamdastAppFrame"),
    apiRequest: makeNodeComponent("apiRequest"),
    modal: makeNodeComponent("modal"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicLauncherComponentsApp
    internalVariantProps: PlasmicLauncherComponentsApp__VariantProps,
    internalArgProps: PlasmicLauncherComponentsApp__ArgProps
  }
);

export default PlasmicLauncherComponentsApp;
/* prettier-ignore-end */
