// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: Qz6g1T5BaK7n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherWrapper from "../../LauncherWrapper"; // plasmic-import: 3TTnoIEhqXMk/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherComponentsCategory from "../../LauncherComponentsCategory"; // plasmic-import: 0KB-vfelIleY/component
import LauncherComponentsTitle from "../../LauncherComponentsTitle"; // plasmic-import: hyfYYMUJ_ZCV/component
import LauncherComponentsApp from "../../LauncherComponentsApp"; // plasmic-import: 25u6_6Q-fQwp/component
import LauncherComponentsSeparator from "../../LauncherComponentsSeparator"; // plasmic-import: 1FBJsfya0Spv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherApps.module.css"; // plasmic-import: Qz6g1T5BaK7n/css

createPlasmicElementProxy;

export type PlasmicLauncherApps__VariantMembers = {};
export type PlasmicLauncherApps__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherApps__VariantsArgs;
export const PlasmicLauncherApps__VariantProps = new Array<VariantPropType>();

export type PlasmicLauncherApps__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherApps__ArgsType;
export const PlasmicLauncherApps__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherApps__OverridesType = {
  root?: Flex__<"div">;
  launcherWrapper?: Flex__<typeof LauncherWrapper>;
  launcherComponentsCategory?: Flex__<typeof LauncherComponentsCategory>;
};

export interface DefaultLauncherAppsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherApps__RenderFunc(props: {
  variants: PlasmicLauncherApps__VariantsArgs;
  args: PlasmicLauncherApps__ArgsType;
  overrides: PlasmicLauncherApps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <LauncherWrapper
        data-plasmic-name={"launcherWrapper"}
        data-plasmic-override={overrides.launcherWrapper}
        className={classNames("__wab_instance", sty.launcherWrapper)}
      />

      <Reveal
        className={classNames("__wab_instance", sty.reveal__hxDkw)}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__irEu, "no-scroll")}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  if ($ctx.auth.info?.provider?.job_title === "doctor") {
                    return [
                      {
                        name: "همه",
                        value: "all"
                      },
                      {
                        name: "اطلاع رسانی",
                        value: "notifications"
                      },
                      {
                        name: "افزونه پروفایل",
                        value: "profile-plugin"
                      },
                      {
                        name: "خودتشخیصی",
                        value: "self-diagnosis"
                      }
                    ];
                  }
                  return [
                    {
                      name: "همه",
                      value: "all"
                    },
                    {
                      name: "خودتشخیصی",
                      value: "self-diagnosis"
                    }
                  ];
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <LauncherComponentsCategory
                data-plasmic-name={"launcherComponentsCategory"}
                data-plasmic-override={overrides.launcherComponentsCategory}
                active={(() => {
                  try {
                    return $state.selectedCategory === currentItem.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsCategory
                )}
                key={currentIndex}
                name={(() => {
                  try {
                    return currentItem.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async () => {
                  const $steps = {};

                  $steps["updateSelectedCategory"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectedCategory"]
                          },
                          operation: 0,
                          value: currentItem.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectedCategory"] != null &&
                    typeof $steps["updateSelectedCategory"] === "object" &&
                    typeof $steps["updateSelectedCategory"].then === "function"
                  ) {
                    $steps["updateSelectedCategory"] = await $steps[
                      "updateSelectedCategory"
                    ];
                  }
                }}
              />
            );
          })}
          <div className={classNames(projectcss.all, sty.freeBox__edkby)} />
        </Stack__>
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__yyNqO)}
        delay={300}
        effect={"fade"}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jojFn)}
        >
          {(() => {
            try {
              return (
                ["all", "notifications"].includes($state.selectedCategory) &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bug)}
            >
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle___9YhTd
                  )}
                  title={
                    "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fnelson-notification.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__v6ChM
                )}
                description={
                  "\u0627\u0631\u0633\u0627\u0644 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0647\u0627 \u0628\u0631\u0627\u0633\u0627\u0633 \u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627\u06cc \u0645\u062e\u0644\u062a\u0641"
                }
                link={"/dashboard/apps/drapp/notification/"}
                name={
                  "\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9"
                }
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.selectedCategory === "all" &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__de8Lg
              )}
            />
          ) : null}
          {(() => {
            try {
              return (
                ["all", "profile-plugin"].includes($state.selectedCategory) &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jfYAj)}
            >
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle__zis3D
                  )}
                  title={
                    "\u0627\u0641\u0632\u0648\u0646\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finsurance-plugin.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__fBpFq
                )}
                description={
                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u0628\u06cc\u0645\u0647 \u0647\u0627\u06cc \u067e\u0627\u06cc\u0647 \u0648 \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
                link={"/_/bimehnama/setting/"}
                name={"\u0628\u06cc\u0645\u0647 \u0646\u0645\u0627"}
                soon={(() => {
                  try {
                    return !$ctx.Growthbook.features["hamdast::bimehnama"];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "soon";
                    }
                    throw e;
                  }
                })()}
              />

              <LauncherComponentsApp
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finstagram-plugin.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__dA5Ff
                )}
                description={
                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645 \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
                name={
                  "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645"
                }
                soon={true}
              />

              <LauncherComponentsApp
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fwaiting-plugin.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__n2XvW
                )}
                description={
                  "\u062f\u0631 \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0628\u0633\u062a\u0647 \u0627\u0633\u062a\u060c \u0646\u0648\u0628\u062a \u0628\u062f\u0647."
                }
                name={
                  "\u0646\u0648\u0628\u062a \u062f\u0627\u0631 \u0634\u062f \u0628\u0647 \u0645\u0646 \u0627\u0637\u0644\u0627\u0639 \u0628\u062f\u0647"
                }
                soon={true}
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.selectedCategory === "all" &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__dcM8
              )}
            />
          ) : null}
          {(() => {
            try {
              return ["all", "self-diagnosis"].includes(
                $state.selectedCategory
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nu6H4)}
            >
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle__mMdX8
                  )}
                  title={
                    "\u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                avatar={
                  "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom%2Ficon.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__yj1N6
                )}
                description={
                  "\u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0646\u0627\u0645\u0646\u0638\u0645 \u0627\u0633\u062a\u061f \u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646\u060c \u06af\u0641\u062a\u06af\u0648 \u0631\u0627 \u0622\u063a\u0627\u0632 \u06a9\u0646\u06cc\u062f."
                }
                link={"/_/liom/irregularities/?origin=launcher-apps"}
                name={
                  "\u062a\u0634\u062e\u06cc\u0635 \u062f\u0647\u0646\u062f\u0647 \u0639\u0644\u062a \u067e\u0631\u06cc\u0648\u062f \u0646\u0627\u0645\u0646\u0638\u0645"
                }
              />

              <LauncherComponentsApp
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2FSalamat%20Logo.svg?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__bytUs
                )}
                description={
                  "\u0628\u0627 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0628\u0647 \u0635\u0648\u0631\u062a \u0631\u0627\u06cc\u06af\u0627\u0646 \u0635\u062d\u0628\u062a \u06a9\u0646\u06cc\u062f."
                }
                link={"/_/roshan/salamat/?origin=launcher-apps"}
                name={
                  "\u0645\u0634\u0627\u0648\u0631 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0633\u0644\u0627\u0645\u062a \u0645\u0627\u062f\u0631 \u0648 \u06a9\u0648\u062f\u06a9"
                }
              />
            </Stack__>
          ) : null}
        </Stack__>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "launcherWrapper", "launcherComponentsCategory"],
  launcherWrapper: ["launcherWrapper"],
  launcherComponentsCategory: ["launcherComponentsCategory"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  launcherWrapper: typeof LauncherWrapper;
  launcherComponentsCategory: typeof LauncherComponentsCategory;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherApps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherApps__VariantsArgs;
    args?: PlasmicLauncherApps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherApps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherApps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherApps__ArgProps,
          internalVariantPropNames: PlasmicLauncherApps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherApps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherApps";
  } else {
    func.displayName = `PlasmicLauncherApps.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherApps = Object.assign(
  // Top-level PlasmicLauncherApps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    launcherWrapper: makeNodeComponent("launcherWrapper"),
    launcherComponentsCategory: makeNodeComponent("launcherComponentsCategory"),

    // Metadata about props expected for PlasmicLauncherApps
    internalVariantProps: PlasmicLauncherApps__VariantProps,
    internalArgProps: PlasmicLauncherApps__ArgProps
  }
);

export default PlasmicLauncherApps;
/* prettier-ignore-end */
