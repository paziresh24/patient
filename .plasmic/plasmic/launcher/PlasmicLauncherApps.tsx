/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: Qz6g1T5BaK7n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherWrapper from "../../LauncherWrapper"; // plasmic-import: 3TTnoIEhqXMk/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherComponentsCategory from "../../LauncherComponentsCategory"; // plasmic-import: 0KB-vfelIleY/component
import LauncherComponentsTitle from "../../LauncherComponentsTitle"; // plasmic-import: hyfYYMUJ_ZCV/component
import LauncherComponentsApp from "../../LauncherComponentsApp"; // plasmic-import: 25u6_6Q-fQwp/component
import LauncherComponentsSeparator from "../../LauncherComponentsSeparator"; // plasmic-import: 1FBJsfya0Spv/component
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import Paziresh24AtomsTextAreaInput from "../../Paziresh24AtomsTextAreaInput"; // plasmic-import: HOBObNXYC7Oc/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherApps.module.css"; // plasmic-import: Qz6g1T5BaK7n/css

import LauncherIconsLoaderIcon from "./icons/PlasmicIcon__LauncherIconsLoader"; // plasmic-import: 4lP5I8e4Rz71/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicLauncherApps__VariantMembers = {};
export type PlasmicLauncherApps__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherApps__VariantsArgs;
export const PlasmicLauncherApps__VariantProps = new Array<VariantPropType>();

export type PlasmicLauncherApps__ArgsType = {
  widgetFrames?: boolean;
  onEvent?: () => void;
  openAppFrame?: (key: string) => void;
};
type ArgPropType = keyof PlasmicLauncherApps__ArgsType;
export const PlasmicLauncherApps__ArgProps = new Array<ArgPropType>(
  "widgetFrames",
  "onEvent",
  "openAppFrame"
);

export type PlasmicLauncherApps__OverridesType = {
  root?: Flex__<"div">;
  launcherWrapper?: Flex__<typeof LauncherWrapper>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  reveal?: Flex__<typeof Reveal>;
  launcherComponentsCategory?: Flex__<typeof LauncherComponentsCategory>;
  launcherComponentsSeparator?: Flex__<typeof LauncherComponentsSeparator>;
  modal?: Flex__<typeof Paziresh24Modal>;
  textAreaInput?: Flex__<typeof Paziresh24AtomsTextAreaInput>;
  textAreaInput2?: Flex__<typeof Paziresh24AtomsTextAreaInput>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultLauncherAppsProps {
  widgetFrames?: boolean;
  onEvent?: () => void;
  openAppFrame?: (key: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherApps__RenderFunc(props: {
  variants: PlasmicLauncherApps__VariantsArgs;
  args: PlasmicLauncherApps__ArgsType;
  overrides: PlasmicLauncherApps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          widgetFrames: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest2"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textAreaInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <LauncherWrapper
        data-plasmic-name={"launcherWrapper"}
        data-plasmic-override={overrides.launcherWrapper}
        className={classNames("__wab_instance", sty.launcherWrapper)}
        page={"apps"}
      />

      <ApiRequest
        data-plasmic-name={"apiRequest2"}
        data-plasmic-override={overrides.apiRequest2}
        className={classNames("__wab_instance", sty.apiRequest2)}
        errorDisplay={null}
        loadingDisplay={
          <LauncherIconsLoaderIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest2", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest2"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/hamdast/apps"}
      >
        <Reveal
          data-plasmic-name={"reveal"}
          data-plasmic-override={overrides.reveal}
          className={classNames("__wab_instance", sty.reveal)}
          delay={300}
          effect={"fade"}
          triggerOnce={true}
        >
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__irEu,
              "no-scroll"
            )}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    if ($ctx.auth.info?.provider?.job_title === "doctor") {
                      return [
                        {
                          key: "all",
                          title: "همه"
                        },
                        ...$state.apiRequest2.data
                          ?.filter(item => !!item.category)
                          ?.map(item => item.category)
                          .filter(item => item !== null)
                          .filter(
                            (item, index, self) =>
                              index ===
                              self.findIndex(
                                t =>
                                  t &&
                                  item &&
                                  t.key === item.key &&
                                  t.title === item.title
                              )
                          )
                      ];
                    }
                    return [
                      {
                        title: "همه",
                        key: "all"
                      }
                    ];
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <LauncherComponentsCategory
                  data-plasmic-name={"launcherComponentsCategory"}
                  data-plasmic-override={overrides.launcherComponentsCategory}
                  active={(() => {
                    try {
                      return $state.selectedCategory === currentItem.key;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsCategory
                  )}
                  key={currentIndex}
                  name={(() => {
                    try {
                      return currentItem.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async () => {
                    const $steps = {};

                    $steps["updateSelectedCategory"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedCategory"]
                            },
                            operation: 0,
                            value: currentItem.key
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedCategory"] != null &&
                      typeof $steps["updateSelectedCategory"] === "object" &&
                      typeof $steps["updateSelectedCategory"].then ===
                        "function"
                    ) {
                      $steps["updateSelectedCategory"] = await $steps[
                        "updateSelectedCategory"
                      ];
                    }
                  }}
                />
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox__edkby)} />
          </div>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  return $state.apiRequest2.data
                    ?.map(item => item.category)
                    .filter(item => item !== null)
                    .filter(
                      (item, index, self) =>
                        index ===
                        self.findIndex(
                          t =>
                            t &&
                            item &&
                            t.key === item.key &&
                            t.title === item.title
                        )
                    );
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__bug)}
                key={currentIndex}
              >
                {(() => {
                  try {
                    return (
                      ["all", currentItem.key].includes(
                        $state.selectedCategory
                      ) && $ctx.auth.info?.provider?.job_title === "doctor"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qIMhb)}
                  >
                    {(() => {
                      try {
                        return $state.selectedCategory === "all";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <LauncherComponentsTitle
                        className={classNames(
                          "__wab_instance",
                          sty.launcherComponentsTitle___9YhTd
                        )}
                        title={(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.apiRequest2.data?.filter(
                            item => item.category?.key == currentItem.key
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (
                        <LauncherComponentsApp
                          _new={(() => {
                            try {
                              return currentItem.badges?.includes("NEW");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          appkey={(() => {
                            try {
                              return currentItem.app_key;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          avatar={(() => {
                            try {
                              return currentItem.icon;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.launcherComponentsApp__v6ChM
                          )}
                          description={(() => {
                            try {
                              return currentItem.subtitle;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          link={(() => {
                            try {
                              return !!$props?.openAppFrame
                                ? undefined
                                : currentItem.link;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                          name={(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          onEvent={async () => {
                            const $steps = {};

                            $steps["sendLog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      (() => {
                                        try {
                                          return {
                                            evant_group: "launcher_statistics",
                                            event_type: "apps",
                                            user_id: $ctx.auth.info?.id,
                                            is_doctor:
                                              $ctx.auth.info?.is_doctor,
                                            meta_data: {
                                              name: currentItem.title,
                                              key: currentItem.app_key,
                                              link: currentItem.link
                                            },
                                            source: "apps"
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Splunk.sendLog"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["sendLog"] != null &&
                              typeof $steps["sendLog"] === "object" &&
                              typeof $steps["sendLog"].then === "function"
                            ) {
                              $steps["sendLog"] = await $steps["sendLog"];
                            }

                            $steps["runOnEvent"] = true
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: $props["onEvent"]
                                  };
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runOnEvent"] != null &&
                              typeof $steps["runOnEvent"] === "object" &&
                              typeof $steps["runOnEvent"].then === "function"
                            ) {
                              $steps["runOnEvent"] = await $steps["runOnEvent"];
                            }

                            $steps["runOpenAppFrame"] = !!$props?.openAppFrame
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: $props["openAppFrame"],
                                    args: [
                                      (() => {
                                        try {
                                          return currentItem.app_key;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runOpenAppFrame"] != null &&
                              typeof $steps["runOpenAppFrame"] === "object" &&
                              typeof $steps["runOpenAppFrame"].then ===
                                "function"
                            ) {
                              $steps["runOpenAppFrame"] = await $steps[
                                "runOpenAppFrame"
                              ];
                            }
                          }}
                          pagekey={"launcher"}
                          soon={(() => {
                            try {
                              return currentItem.badges?.includes("SOON");
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          widgetFrame={(() => {
                            try {
                              return $props.widgetFrames;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (
                      $state.selectedCategory === "all" &&
                      $ctx.auth.info?.provider?.job_title === "doctor"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <LauncherComponentsSeparator
                    data-plasmic-name={"launcherComponentsSeparator"}
                    data-plasmic-override={
                      overrides.launcherComponentsSeparator
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.launcherComponentsSeparator
                    )}
                  />
                ) : null}
              </div>
            );
          })}
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__nu6H4)}>
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle__mMdX8
                  )}
                  title={
                    "\u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                appkey={"liom"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom-fe.png"
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__bytUs
                )}
                description={
                  "\u0627\u06cc\u0646 \u0622\u0632\u0645\u0648\u0646 \u0633\u0644\u0627\u0645\u062a\u06cc \u062a\u0648\u0633\u0637 \u062f\u06a9\u062a\u0631 \u062d\u0633\u06cc\u0646 \u0645\u0646\u0635\u0648\u0631\u06a9\u06cc\u0627\u0626\u06cc \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u0627\u0633\u062a."
                }
                link={
                  "/_/liom/self-test/?app=paziresh24&type=ida&origin=paziresh24&gw=paziresh24"
                }
                name={
                  "\u062a\u0634\u062e\u06cc\u0635 \u06a9\u0645\u0628\u0648\u062f \u0622\u0647\u0646"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تشخیص کمبود آهن",
                                    key: "liom/self-test",
                                    link: "/_/liom/self-test/?app=paziresh24&type=ida&origin=paziresh24&gw=paziresh24"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pageQuery={{
                  app: "paziresh24",
                  type: "ida",
                  origin: "paziresh24",
                  gw: "paziresh24"
                }}
                pagekey={"self-test"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />

              <LauncherComponentsApp
                appkey={"lab_result"}
                avatar={
                  "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Flab-result.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__mWccY
                )}
                description={
                  "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0647\u0648\u0634\u0645\u0646\u062f \u062a\u0641\u0633\u06cc\u0631 \u0622\u0632\u0645\u0627\u06cc\u0634"
                }
                link={"/_/lab_result/launcher/?origin=launcher-apps"}
                name={"\u062a\u0641\u0633\u06cc\u0631"}
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تفسیر",
                                    key: "lab_result/launcher",
                                    link: "/_/lab_result/launcher/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"launcher"}
                soon={(() => {
                  try {
                    return !$ctx.Growthbook.features[
                      "launcher::lab_result_app"
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "soon";
                    }
                    throw e;
                  }
                })()}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />

              <LauncherComponentsApp
                appkey={"blood_pressure"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fblood-pressure.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp___4BsSl
                )}
                description={
                  "\u0627\u06cc\u0646 \u0622\u0632\u0645\u0648\u0646 \u0633\u0644\u0627\u0645\u062a\u06cc \u062a\u0648\u0633\u0637 \u062f\u06a9\u062a\u0631 \u0631\u0648\u062d\u06cc \u0646\u0698\u0627\u062f \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u0627\u0633\u062a."
                }
                link={"/_/blood_pressure/launcher/"}
                name={
                  "\u062a\u0634\u062e\u06cc\u0635 \u0627\u062d\u062a\u0645\u0627\u0644 \u0627\u0628\u062a\u0644\u0627 \u0628\u0647 \u0641\u0634\u0627\u0631 \u062e\u0648\u0646"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تشخیص احتمال ابتلا به فشار خون",
                                    key: "blood_pressure/launcher",
                                    link: "/_/blood_pressure/launcher/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pageQuery={{}}
                pagekey={"launcher"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />

              <LauncherComponentsApp
                appkey={"diabetes_risk"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom-glucose-meter.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp___6Tcy5
                )}
                description={
                  "\u0627\u06cc\u0646 \u0622\u0632\u0645\u0648\u0646 \u0633\u0644\u0627\u0645\u062a\u06cc \u062a\u0648\u0633\u0637 \u062f\u06a9\u062a\u0631 \u0631\u0648\u062d\u06cc \u0646\u0698\u0627\u062f \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u0627\u0633\u062a."
                }
                link={"/_/diabetes_risk/launcher/"}
                name={
                  "\u062a\u0634\u062e\u06cc\u0635 \u0627\u062d\u062a\u0645\u0627\u0644 \u0627\u0628\u062a\u0644\u0627 \u0628\u0647 \u062f\u06cc\u0627\u0628\u062a"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تشخیص احتمال ابتلا به دیابت",
                                    key: "diabetes_risk/launcher",
                                    link: "/_/diabetes_risk/launcher/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pageQuery={{}}
                pagekey={"launcher"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__uqjzS)}>
            <Paziresh24Modal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              body={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nRtVa
                    )}
                  >
                    {
                      "\u0686\u06cc \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u200c\u06a9\u0646\u06cc \u0648 \u0642\u0631\u0627\u0631\u0647 \u0686\u0647 \u0645\u0634\u06a9\u0644\u06cc \u0631\u0648 \u062d\u0644 \u06a9\u0646\u0647\u061f"
                    }
                  </div>
                  <Paziresh24AtomsTextAreaInput
                    data-plasmic-name={"textAreaInput"}
                    data-plasmic-override={overrides.textAreaInput}
                    className={classNames("__wab_instance", sty.textAreaInput)}
                    flat={[]}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    padded={[]}
                    placeholder={``}
                    value={generateStateValueProp($state, [
                      "textAreaInput",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__urgN
                    )}
                  >
                    {
                      "\u062d\u0627\u0644\u0627 \u06a9\u0647 \u0627\u06cc\u0646 \u0627\u0645\u06a9\u0627\u0646 \u0631\u0648 \u0646\u062f\u0627\u0631\u06cc\u0645\u060c \u0686\u0647\u200c\u062c\u0648\u0631\u06cc \u06a9\u0627\u0631\u062a\u0648 \u0631\u0627\u0647 \u0645\u06cc\u200c\u0646\u062f\u0627\u0632\u06cc\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__prHst
                    )}
                  >
                    {
                      "\u0627\u0644\u0627\u0646 \u0628\u0631\u0627\u06cc \u062d\u0644 \u0627\u06cc\u0646 \u0645\u0633\u0626\u0644\u0647\u060c \u0686\u0647 \u0631\u0627\u0647\u06cc \u067e\u06cc\u062f\u0627 \u06a9\u0631\u062f\u06cc \u06cc\u0627 \u0627\u0632 \u0686\u0647 \u0686\u06cc\u0632\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u061f"
                    }
                  </div>
                  <Paziresh24AtomsTextAreaInput
                    data-plasmic-name={"textAreaInput2"}
                    data-plasmic-override={overrides.textAreaInput2}
                    className={classNames("__wab_instance", sty.textAreaInput2)}
                    flat={[]}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "textAreaInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    padded={[]}
                    value={generateStateValueProp($state, [
                      "textAreaInput2",
                      "value"
                    ])}
                  />

                  <Paziresh24Button
                    data-plasmic-name={"paziresh24Button"}
                    data-plasmic-override={overrides.paziresh24Button}
                    children2={
                      "\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f"
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Button
                    )}
                    isDisabled={(() => {
                      try {
                        return !$state.textAreaInput.value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f\u060c \u0628\u0627\u062a\u0634\u06a9\u0631 \u0627\u0632 \u0634\u0645\u0627",
                                "top-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/v1/hamdast/app-suggestion",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      content: $state.textAreaInput.value,
                                      workaround:
                                        $state?.textAreaInput2?.value ?? "",
                                      user_id: $ctx.auth.info?.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                  />
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.modal)}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal", "open"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__retC
                  )}
                >
                  {
                    "\u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0627\u0628\u0632\u0627\u0631\u06a9"
                  }
                </div>
              }
              trigger={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mMc6Q
                  )}
                >
                  {
                    "\u0646\u06cc\u0627\u0632 \u0628\u0647 \u0627\u0628\u0632\u0627\u0631\u06a9\u06cc \u062f\u0627\u0631\u06cc\u062f \u06a9\u0647 \u0627\u06cc\u0646\u062c\u0627 \u0646\u06cc\u0633\u062a\u061f"
                  }
                </div>
              }
            />
          </div>
        </Reveal>
      </ApiRequest>
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={
          "https://hamdast.paziresh24.com/api/v1/apps/launcher/developments/"
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__wtXm5)}>
          <LauncherComponentsTitle
            className={classNames(
              "__wab_instance",
              sty.launcherComponentsTitle__fsOfS
            )}
            title={
              "\u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627\u06cc \u062f\u0631\u062d\u0627\u0644 \u062a\u0648\u0633\u0639\u0647 \u0634\u0645\u0627"
            }
          />

          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.apiRequest.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <LauncherComponentsApp
                appkey={(() => {
                  try {
                    return currentItem.key;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                avatar={(() => {
                  try {
                    return currentItem.icon;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__cIv3S
                )}
                description={(() => {
                  try {
                    return currentItem.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                link={(() => {
                  try {
                    return `/_/${currentItem.key}/launcher/`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
                name={(() => {
                  try {
                    return currentItem.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: currentItem.name,
                                    key: `${currentItem.key}/launcher`,
                                    link: `/_/${currentItem.key}/launcher/`
                                  },
                                  source: "apps-development"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"launcher"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />
            );
          })}
        </div>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "launcherWrapper",
    "apiRequest2",
    "svg",
    "reveal",
    "launcherComponentsCategory",
    "launcherComponentsSeparator",
    "modal",
    "textAreaInput",
    "textAreaInput2",
    "paziresh24Button",
    "apiRequest"
  ],
  launcherWrapper: ["launcherWrapper"],
  apiRequest2: [
    "apiRequest2",
    "svg",
    "reveal",
    "launcherComponentsCategory",
    "launcherComponentsSeparator",
    "modal",
    "textAreaInput",
    "textAreaInput2",
    "paziresh24Button"
  ],
  svg: ["svg"],
  reveal: [
    "reveal",
    "launcherComponentsCategory",
    "launcherComponentsSeparator",
    "modal",
    "textAreaInput",
    "textAreaInput2",
    "paziresh24Button"
  ],
  launcherComponentsCategory: ["launcherComponentsCategory"],
  launcherComponentsSeparator: ["launcherComponentsSeparator"],
  modal: ["modal", "textAreaInput", "textAreaInput2", "paziresh24Button"],
  textAreaInput: ["textAreaInput"],
  textAreaInput2: ["textAreaInput2"],
  paziresh24Button: ["paziresh24Button"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  launcherWrapper: typeof LauncherWrapper;
  apiRequest2: typeof ApiRequest;
  svg: "svg";
  reveal: typeof Reveal;
  launcherComponentsCategory: typeof LauncherComponentsCategory;
  launcherComponentsSeparator: typeof LauncherComponentsSeparator;
  modal: typeof Paziresh24Modal;
  textAreaInput: typeof Paziresh24AtomsTextAreaInput;
  textAreaInput2: typeof Paziresh24AtomsTextAreaInput;
  paziresh24Button: typeof Paziresh24Button;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherApps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherApps__VariantsArgs;
    args?: PlasmicLauncherApps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherApps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherApps__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherApps__ArgProps,
          internalVariantPropNames: PlasmicLauncherApps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherApps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherApps";
  } else {
    func.displayName = `PlasmicLauncherApps.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherApps = Object.assign(
  // Top-level PlasmicLauncherApps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    launcherWrapper: makeNodeComponent("launcherWrapper"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    svg: makeNodeComponent("svg"),
    reveal: makeNodeComponent("reveal"),
    launcherComponentsCategory: makeNodeComponent("launcherComponentsCategory"),
    launcherComponentsSeparator: makeNodeComponent(
      "launcherComponentsSeparator"
    ),
    modal: makeNodeComponent("modal"),
    textAreaInput: makeNodeComponent("textAreaInput"),
    textAreaInput2: makeNodeComponent("textAreaInput2"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicLauncherApps
    internalVariantProps: PlasmicLauncherApps__VariantProps,
    internalArgProps: PlasmicLauncherApps__ArgProps
  }
);

export default PlasmicLauncherApps;
/* prettier-ignore-end */
