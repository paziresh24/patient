/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: Qz6g1T5BaK7n

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent
import LauncherWrapper from "../../LauncherWrapper"; // plasmic-import: 3TTnoIEhqXMk/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherComponentsCategory from "../../LauncherComponentsCategory"; // plasmic-import: 0KB-vfelIleY/component
import LauncherComponentsTitle from "../../LauncherComponentsTitle"; // plasmic-import: hyfYYMUJ_ZCV/component
import LauncherComponentsApp from "../../LauncherComponentsApp"; // plasmic-import: 25u6_6Q-fQwp/component
import LauncherComponentsSeparator from "../../LauncherComponentsSeparator"; // plasmic-import: 1FBJsfya0Spv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherApps.module.css"; // plasmic-import: Qz6g1T5BaK7n/css

createPlasmicElementProxy;

export type PlasmicLauncherApps__VariantMembers = {};
export type PlasmicLauncherApps__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherApps__VariantsArgs;
export const PlasmicLauncherApps__VariantProps = new Array<VariantPropType>();

export type PlasmicLauncherApps__ArgsType = {
  widgetFrames?: boolean;
  onEvent?: () => void;
};
type ArgPropType = keyof PlasmicLauncherApps__ArgsType;
export const PlasmicLauncherApps__ArgProps = new Array<ArgPropType>(
  "widgetFrames",
  "onEvent"
);

export type PlasmicLauncherApps__OverridesType = {
  root?: Flex__<"div">;
  getCenters?: Flex__<typeof ApiRequest>;
  launcherWrapper?: Flex__<typeof LauncherWrapper>;
  launcherComponentsCategory?: Flex__<typeof LauncherComponentsCategory>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultLauncherAppsProps {
  widgetFrames?: boolean;
  onEvent?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherApps__RenderFunc(props: {
  variants: PlasmicLauncherApps__VariantsArgs;
  args: PlasmicLauncherApps__ArgsType;
  overrides: PlasmicLauncherApps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          widgetFrames: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectedCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getCenters.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getCenters.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getCenters.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"getCenters"}
        data-plasmic-override={overrides.getCenters}
        className={classNames("__wab_instance", sty.getCenters)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getCenters", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getCenters", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getCenters", "data"]).apply(
            null,
            eventArgs
          );
        }}
        url={`https://apigw.paziresh24.com/v1/doctor/${$ctx.auth?.info?.id}/centers`}
      />

      <LauncherWrapper
        data-plasmic-name={"launcherWrapper"}
        data-plasmic-override={overrides.launcherWrapper}
        className={classNames("__wab_instance", sty.launcherWrapper)}
        page={"apps"}
      />

      <Reveal
        className={classNames("__wab_instance", sty.reveal__hxDkw)}
        triggerOnce={true}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__irEu, "no-scroll")}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  if ($ctx.auth.info?.provider?.job_title === "doctor") {
                    return [
                      {
                        name: "همه",
                        value: "all"
                      },
                      {
                        name: "اطلاع رسانی",
                        value: "notifications"
                      },
                      {
                        name: "افزونه پروفایل",
                        value: "profile-plugin"
                      },
                      {
                        name: "خودتشخیصی",
                        value: "self-diagnosis"
                      }
                    ];
                  }
                  return [
                    {
                      name: "همه",
                      value: "all"
                    },
                    {
                      name: "خودتشخیصی",
                      value: "self-diagnosis"
                    }
                  ];
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <LauncherComponentsCategory
                data-plasmic-name={"launcherComponentsCategory"}
                data-plasmic-override={overrides.launcherComponentsCategory}
                active={(() => {
                  try {
                    return $state.selectedCategory === currentItem.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsCategory
                )}
                key={currentIndex}
                name={(() => {
                  try {
                    return currentItem.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async () => {
                  const $steps = {};

                  $steps["updateSelectedCategory"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectedCategory"]
                          },
                          operation: 0,
                          value: currentItem.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectedCategory"] != null &&
                    typeof $steps["updateSelectedCategory"] === "object" &&
                    typeof $steps["updateSelectedCategory"].then === "function"
                  ) {
                    $steps["updateSelectedCategory"] = await $steps[
                      "updateSelectedCategory"
                    ];
                  }
                }}
              />
            );
          })}
          <div className={classNames(projectcss.all, sty.freeBox__edkby)} />
        </div>
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__yyNqO)}
        delay={300}
        effect={"fade"}
        triggerOnce={true}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jojFn)}>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={
              "https://hamdast.paziresh24.com/api/v1/apps/launcher/developments/"
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__wtXm5)}>
              <LauncherComponentsTitle
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsTitle__fsOfS
                )}
                title={
                  "\u0627\u0628\u0632\u0627\u0631\u06a9 \u0647\u0627\u06cc \u062f\u0631\u062d\u0627\u0644 \u062a\u0648\u0633\u0639\u0647 \u0634\u0645\u0627"
                }
              />

              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <LauncherComponentsApp
                    appkey={(() => {
                      try {
                        return currentItem.key;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    avatar={(() => {
                      try {
                        return currentItem.icon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.launcherComponentsApp__cIv3S
                    )}
                    description={(() => {
                      try {
                        return currentItem.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    link={(() => {
                      try {
                        return `/_/${currentItem.key}/launcher/`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                    name={(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onEvent={async () => {
                      const $steps = {};

                      $steps["sendLog"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return {
                                      evant_group: "launcher_statistics",
                                      event_type: "apps",
                                      user_id: $ctx.auth.info?.id,
                                      is_doctor: $ctx.auth.info?.is_doctor,
                                      meta_data: {
                                        name: currentItem.name,
                                        key: `${currentItem.key}/launcher`,
                                        link: `/_/${currentItem.key}/launcher/`
                                      },
                                      source: "apps-development"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Splunk.sendLog"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["sendLog"] != null &&
                        typeof $steps["sendLog"] === "object" &&
                        typeof $steps["sendLog"].then === "function"
                      ) {
                        $steps["sendLog"] = await $steps["sendLog"];
                      }

                      $steps["runOnEvent"] = true
                        ? (() => {
                            const actionArgs = { eventRef: $props["onEvent"] };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runOnEvent"] != null &&
                        typeof $steps["runOnEvent"] === "object" &&
                        typeof $steps["runOnEvent"].then === "function"
                      ) {
                        $steps["runOnEvent"] = await $steps["runOnEvent"];
                      }
                    }}
                    pagekey={"launcher"}
                    widgetFrame={(() => {
                      try {
                        return $props.widgetFrames;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </div>
            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator___87AAq
              )}
            />
          </ApiRequest>
          {(() => {
            try {
              return (
                ["all", "notifications"].includes($state.selectedCategory) &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__bug)}>
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle___9YhTd
                  )}
                  title={
                    "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                appkey={"drapp"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fnelson-notification.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__v6ChM
                )}
                description={
                  "\u0627\u0631\u0633\u0627\u0644 \u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0647\u0627 \u0628\u0631\u0627\u0633\u0627\u0633 \u0631\u0648\u06cc\u062f\u0627\u062f\u0647\u0627\u06cc \u0645\u062e\u0644\u062a\u0641"
                }
                link={"/dashboard/apps/drapp/notification/"}
                name={
                  "\u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645\u06a9"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "ارسال پیامک",
                                    key: "drapp/notification",
                                    link: "/dashboard/apps/drapp/notification/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"notification"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.selectedCategory === "all" &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__de8Lg
              )}
            />
          ) : null}
          {(() => {
            try {
              return (
                ["all", "profile-plugin"].includes($state.selectedCategory) &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__jfYAj)}>
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle__zis3D
                  )}
                  title={
                    "\u0627\u0641\u0632\u0648\u0646\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                appkey={"bimehnama"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finsurance-plugin.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__fBpFq
                )}
                description={
                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u0628\u06cc\u0645\u0647 \u0647\u0627\u06cc \u067e\u0627\u06cc\u0647 \u0648 \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
                link={"/_/bimehnama/setting/"}
                name={"\u0628\u06cc\u0645\u0647 \u0646\u0645\u0627"}
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "بیمه نما",
                                    key: "bimehnama/setting",
                                    link: "/_/bimehnama/setting/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"setting"}
                soon={undefined}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                widgetId={"hhhzbbsffq0nlna"}
              />

              <LauncherComponentsApp
                appkey={"cywoc24"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Finstagram-plugin.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__dA5Ff
                )}
                description={
                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645 \u0628\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
                link={"/_/cywoc24/launcher/"}
                name={
                  "\u067e\u0631\u0648\u0641\u0627\u06cc\u0644 \u0627\u06cc\u0646\u0633\u062a\u0627\u06af\u0631\u0627\u0645"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "پروفایل اینستاگرام",
                                    key: "cywoc24/setting",
                                    link: "/_/cywoc24/launcher/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"launcher"}
                soon={true}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                widgetId={"aed80eahprc1qs0"}
              />

              {(() => {
                try {
                  return (
                    $state.getCenters?.data?.items?.filter(
                      item => item.id !== "5532"
                    ).length > 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsApp
                  _new={true}
                  appkey={"hamyar"}
                  avatar={
                    "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fhamyar.png?versionId="
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsApp__n2XvW
                  )}
                  description={
                    "\u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0642\u0627\u062f\u0631 \u0647\u0633\u062a\u0646\u062f \u062f\u0631 \u0632\u0645\u0627\u0646 \u0641\u0639\u0627\u0644 \u0628\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9\u060c \u0628\u062f\u0648\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc \u0628\u0627 \u0645\u0646\u0634\u06cc \u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0628\u06af\u06cc\u0631\u0646\u062f."
                  }
                  link={"/_/hamyar/launcher/"}
                  name={"\u0647\u0645\u06cc\u0627\u0631"}
                  onEvent={async () => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    evant_group: "launcher_statistics",
                                    event_type: "apps",
                                    user_id: $ctx.auth.info?.id,
                                    is_doctor: $ctx.auth.info?.is_doctor,
                                    meta_data: {
                                      name: "همیار",
                                      key: "/hamyar/launcher/",
                                      link: ""
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }}
                  pagekey={"launcher"}
                  widgetFrame={(() => {
                    try {
                      return $props.widgetFrames;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  widgetId={"ad0b26pc5ni63nm"}
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $state.getCenters?.data?.items?.filter(
                      item => item.id !== "5532"
                    ).length > 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsApp
                  _new={true}
                  appkey={"hamyar"}
                  avatar={
                    "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fhamyar.png?versionId="
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsApp___8UPeb
                  )}
                  description={
                    "\u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0642\u0627\u062f\u0631 \u0647\u0633\u062a\u0646\u062f \u062f\u0631 \u0632\u0645\u0627\u0646 \u0641\u0639\u0627\u0644 \u0628\u0648\u062f\u0646 \u0627\u0628\u0632\u0627\u0631\u06a9\u060c \u0628\u062f\u0648\u0646 \u0645\u0634\u0627\u0647\u062f\u0647 \u0634\u0645\u0627\u0631\u0647 \u0645\u0646\u0634\u06cc \u0628\u0627 \u0645\u0646\u0634\u06cc \u062a\u0645\u0627\u0633 \u0627\u0645\u0646 \u0628\u06af\u06cc\u0631\u0646\u062f."
                  }
                  link={"/_/hamyar/launcher/"}
                  name={"\u0647\u0645\u06cc\u0627\u0631"}
                  onEvent={async () => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    evant_group: "launcher_statistics",
                                    event_type: "apps",
                                    user_id: $ctx.auth.info?.id,
                                    is_doctor: $ctx.auth.info?.is_doctor,
                                    meta_data: {
                                      name: "همیار",
                                      key: "/hamyar/launcher/",
                                      link: ""
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }}
                  pagekey={"launcher"}
                  widgetFrame={(() => {
                    try {
                      return $props.widgetFrames;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  widgetId={"ad0b26pc5ni63nm"}
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $state.getCenters?.data?.items?.filter(
                      item => item.id !== "5532"
                    ).length > 0
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsApp
                  _new={true}
                  appkey={"cheragh"}
                  avatar={
                    "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Faccess-plugin.png?versionId="
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsApp__zXhci
                  )}
                  description={
                    "\u062b\u0628\u062a \u0648 \u0646\u0645\u0627\u06cc\u0634 \u0648\u0636\u0639\u06cc\u062a \u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0645\u0637\u0628 \u0627\u0632 \u062c\u0645\u0644\u0647 \u062c\u0627\u06cc \u067e\u0627\u0631\u06a9\u060c \u067e\u0644\u0647\u060c \u0622\u0633\u0627\u0646\u0633\u0648\u0631 \u0648 \u0633\u0627\u06cc\u0631 \u062f\u0633\u062a\u0631\u0633\u06cc\u200c\u0647\u0627"
                  }
                  link={"/_/cheragh/launcher/"}
                  name={
                    "\u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0628\u0647 \u0645\u0637\u0628"
                  }
                  onEvent={async () => {
                    const $steps = {};

                    $steps["sendLog"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return {
                                    evant_group: "launcher_statistics",
                                    event_type: "apps",
                                    user_id: $ctx.auth.info?.id,
                                    is_doctor: $ctx.auth.info?.is_doctor,
                                    meta_data: {
                                      name: "دسترسی بیماران به مطب",
                                      key: "/cheragh/launcher/",
                                      link: ""
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Splunk.sendLog"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["sendLog"] != null &&
                      typeof $steps["sendLog"] === "object" &&
                      typeof $steps["sendLog"].then === "function"
                    ) {
                      $steps["sendLog"] = await $steps["sendLog"];
                    }
                  }}
                  pagekey={"launcher"}
                  widgetFrame={(() => {
                    try {
                      return $props.widgetFrames;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  widgetId={"o1maxe7isynnf3v"}
                />
              ) : null}
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.selectedCategory === "all" &&
                $ctx.auth.info?.provider?.job_title === "doctor"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__dcM8
              )}
            />
          ) : null}
          {(() => {
            try {
              return ["all", "self-diagnosis"].includes(
                $state.selectedCategory
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__nu6H4)}>
              {(() => {
                try {
                  return $state.selectedCategory === "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LauncherComponentsTitle
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsTitle__mMdX8
                  )}
                  title={
                    "\u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc"
                  }
                />
              ) : null}
              <LauncherComponentsApp
                appkey={"liom"}
                avatar={
                  "https://launcher.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom-fe.png"
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__bytUs
                )}
                description={
                  "\u0627\u06cc\u0646 \u0622\u0632\u0645\u0648\u0646 \u0633\u0644\u0627\u0645\u062a\u06cc \u062a\u0648\u0633\u0637 \u062f\u06a9\u062a\u0631 \u062d\u0633\u06cc\u0646 \u0645\u0646\u0635\u0648\u0631\u06a9\u06cc\u0627\u0626\u06cc \u0637\u0631\u0627\u062d\u06cc \u0634\u062f\u0647 \u0627\u0633\u062a."
                }
                link={
                  "/_/liom/self-test/?app=paziresh24&type=ida&origin=paziresh24&gw=paziresh24"
                }
                name={
                  "\u062a\u0634\u062e\u06cc\u0635 \u06a9\u0645\u0628\u0648\u062f \u0622\u0647\u0646"
                }
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تشخیص کمبود آهن",
                                    key: "liom/self-test",
                                    link: "/_/liom/self-test/?app=paziresh24&type=ida&origin=paziresh24&gw=paziresh24"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pageQuery={{
                  app: "paziresh24",
                  type: "ida",
                  origin: "paziresh24",
                  gw: "paziresh24"
                }}
                pagekey={"self-test"}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />

              {false ? (
                <LauncherComponentsApp
                  appkey={"liom"}
                  avatar={
                    "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fliom%2Ficon.png?versionId="
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.launcherComponentsApp__yj1N6
                  )}
                  description={
                    "\u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0646\u0627\u0645\u0646\u0638\u0645 \u0627\u0633\u062a\u061f \u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646\u060c \u06af\u0641\u062a\u06af\u0648 \u0631\u0627 \u0622\u063a\u0627\u0632 \u06a9\u0646\u06cc\u062f."
                  }
                  link={"/_/liom/irregularities/?origin=launcher-apps"}
                  name={
                    "\u062a\u0634\u062e\u06cc\u0635 \u062f\u0647\u0646\u062f\u0647 \u0639\u0644\u062a \u067e\u0631\u06cc\u0648\u062f \u0646\u0627\u0645\u0646\u0638\u0645"
                  }
                  onEvent={async () => {
                    const $steps = {};

                    $steps["runOnEvent"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onEvent"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnEvent"] != null &&
                      typeof $steps["runOnEvent"] === "object" &&
                      typeof $steps["runOnEvent"].then === "function"
                    ) {
                      $steps["runOnEvent"] = await $steps["runOnEvent"];
                    }
                  }}
                  pagekey={"irregularities"}
                  widgetFrame={(() => {
                    try {
                      return $props.widgetFrames;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              <LauncherComponentsApp
                appkey={"lab_result"}
                avatar={
                  "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Flab-result.png?versionId="
                }
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsApp__mWccY
                )}
                description={
                  "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0647\u0648\u0634\u0645\u0646\u062f \u062a\u0641\u0633\u06cc\u0631 \u0622\u0632\u0645\u0627\u06cc\u0634"
                }
                link={"/_/lab_result/launcher/?origin=launcher-apps"}
                name={"\u062a\u0641\u0633\u06cc\u0631"}
                onEvent={async () => {
                  const $steps = {};

                  $steps["sendLog"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  evant_group: "launcher_statistics",
                                  event_type: "apps",
                                  user_id: $ctx.auth.info?.id,
                                  is_doctor: $ctx.auth.info?.is_doctor,
                                  meta_data: {
                                    name: "تفسیر",
                                    key: "lab_result/launcher",
                                    link: "/_/lab_result/launcher/"
                                  },
                                  source: "apps"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["sendLog"] != null &&
                    typeof $steps["sendLog"] === "object" &&
                    typeof $steps["sendLog"].then === "function"
                  ) {
                    $steps["sendLog"] = await $steps["sendLog"];
                  }

                  $steps["runOnEvent"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onEvent"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnEvent"] != null &&
                    typeof $steps["runOnEvent"] === "object" &&
                    typeof $steps["runOnEvent"].then === "function"
                  ) {
                    $steps["runOnEvent"] = await $steps["runOnEvent"];
                  }
                }}
                pagekey={"launcher"}
                soon={(() => {
                  try {
                    return !$ctx.Growthbook.features[
                      "launcher::lab_result_app"
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "soon";
                    }
                    throw e;
                  }
                })()}
                widgetFrame={(() => {
                  try {
                    return $props.widgetFrames;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          ) : null}
        </div>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "getCenters",
    "launcherWrapper",
    "launcherComponentsCategory",
    "apiRequest"
  ],
  getCenters: ["getCenters"],
  launcherWrapper: ["launcherWrapper"],
  launcherComponentsCategory: ["launcherComponentsCategory"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getCenters: typeof ApiRequest;
  launcherWrapper: typeof LauncherWrapper;
  launcherComponentsCategory: typeof LauncherComponentsCategory;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherApps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherApps__VariantsArgs;
    args?: PlasmicLauncherApps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherApps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherApps__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherApps__ArgProps,
          internalVariantPropNames: PlasmicLauncherApps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherApps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherApps";
  } else {
    func.displayName = `PlasmicLauncherApps.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherApps = Object.assign(
  // Top-level PlasmicLauncherApps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getCenters: makeNodeComponent("getCenters"),
    launcherWrapper: makeNodeComponent("launcherWrapper"),
    launcherComponentsCategory: makeNodeComponent("launcherComponentsCategory"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicLauncherApps
    internalVariantProps: PlasmicLauncherApps__VariantProps,
    internalArgProps: PlasmicLauncherApps__ArgProps
  }
);

export default PlasmicLauncherApps;
/* prettier-ignore-end */
