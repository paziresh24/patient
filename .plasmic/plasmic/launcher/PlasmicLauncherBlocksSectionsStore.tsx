/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: eAgPCQOGXT3k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import LauncherBlocksSectionsPrescription from "../../LauncherBlocksSectionsPrescription"; // plasmic-import: NaX6a-Bx6lRC/component
import LauncherBlocksSectionsBookingPanels from "../../LauncherBlocksSectionsBookingPanels"; // plasmic-import: kf_mz8gXeCXH/component
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import LauncherBlocksSectionsStoreWidgetCard from "../../LauncherBlocksSectionsStoreWidgetCard"; // plasmic-import: u2wp7SlDTOsq/component
import LauncherComponentsSeparator from "../../LauncherComponentsSeparator"; // plasmic-import: 1FBJsfya0Spv/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksSectionsStore.module.css"; // plasmic-import: eAgPCQOGXT3k/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: IiQOu5G1v-6J/icon

createPlasmicElementProxy;

export type PlasmicLauncherBlocksSectionsStore__VariantMembers = {};
export type PlasmicLauncherBlocksSectionsStore__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlocksSectionsStore__VariantsArgs;
export const PlasmicLauncherBlocksSectionsStore__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksSectionsStore__ArgsType = {
  onSubmit?: (widgets: any) => void;
  onWidgetsChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicLauncherBlocksSectionsStore__ArgsType;
export const PlasmicLauncherBlocksSectionsStore__ArgProps =
  new Array<ArgPropType>("onSubmit", "onWidgetsChange");

export type PlasmicLauncherBlocksSectionsStore__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  launcherBlocksSectionsPrescription?: Flex__<
    typeof LauncherBlocksSectionsPrescription
  >;
  launcherBlocksSectionsBookingPanels?: Flex__<
    typeof LauncherBlocksSectionsBookingPanels
  >;
  svg?: Flex__<"svg">;
  modal?: Flex__<typeof Paziresh24Modal>;
};

export interface DefaultLauncherBlocksSectionsStoreProps {
  onSubmit?: (widgets: any) => void;
  onWidgetsChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksSectionsStore__RenderFunc(props: {
  variants: PlasmicLauncherBlocksSectionsStore__VariantsArgs;
  args: PlasmicLauncherBlocksSectionsStore__ArgsType;
  overrides: PlasmicLauncherBlocksSectionsStore__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "widgets",
        type: "readonly",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(
                globalThis.localStorage.getItem("widgets") ?? "[]"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })(),

        onChangeProp: "onWidgetsChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_paziresh_24_design_system,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      const defaultWidgets = ["nelsun", "sanje"];

                      if (
                        JSON.parse(
                          globalThis.localStorage.getItem("widgets") ?? "[]"
                        )?.filter?.(
                          item =>
                            defaultWidgets?.includes(item) ||
                            defaultWidgets.includes(item?.key)
                        )?.length < defaultWidgets?.length
                      ) {
                        return globalThis.localStorage.setItem(
                          "widgets",
                          JSON.stringify([
                            ...JSON.parse(
                              globalThis.localStorage.getItem("widgets") ?? "[]"
                            ),
                            ...defaultWidgets.map(item => ({
                              key: item,
                              enabled: true
                            }))
                          ])
                        );
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      {(() => {
        try {
          return (
            $state.widgets?.includes?.("prescription") ||
            $state.widgets?.some?.(
              item => item?.key == "prescription" && item.enabled == true
            )
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <LauncherBlocksSectionsPrescription
          data-plasmic-name={"launcherBlocksSectionsPrescription"}
          data-plasmic-override={overrides.launcherBlocksSectionsPrescription}
          className={classNames(
            "__wab_instance",
            sty.launcherBlocksSectionsPrescription
          )}
        />
      ) : null}
      {(() => {
        try {
          return (
            $state.widgets?.includes?.("booking-panel") ||
            $state.widgets?.some?.(
              item => item?.key == "booking-panel" && item.enabled == true
            )
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <LauncherBlocksSectionsBookingPanels
          data-plasmic-name={"launcherBlocksSectionsBookingPanels"}
          data-plasmic-override={overrides.launcherBlocksSectionsBookingPanels}
          className={classNames(
            "__wab_instance",
            sty.launcherBlocksSectionsBookingPanels
          )}
        />
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__fGz6E)}
        onClick={async event => {
          const $steps = {};

          $steps["updateModalOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal", "open"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModalOpen"] != null &&
            typeof $steps["updateModalOpen"] === "object" &&
            typeof $steps["updateModalOpen"].then === "function"
          ) {
            $steps["updateModalOpen"] = await $steps["updateModalOpen"];
          }

          $steps["updateModalOpen2"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return {
                          evant_group: "launcher_statistics",
                          event_type: "section_store_open",
                          user_id: $ctx.auth.info?.id,
                          is_doctor: $ctx.auth.info?.is_doctor
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Splunk.sendLog"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["updateModalOpen2"] != null &&
            typeof $steps["updateModalOpen2"] === "object" &&
            typeof $steps["updateModalOpen2"].then === "function"
          ) {
            $steps["updateModalOpen2"] = await $steps["updateModalOpen2"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__js7Ib)}>
          <Icon2Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2DsLz
          )}
        >
          {
            "\u0627\u0641\u0632\u0648\u062f\u0646 \u0628\u062e\u0634 \u062c\u062f\u06cc\u062f \u0628\u0647 \u0645\u06cc\u0632\u06a9\u0627\u0631"
          }
        </div>
      </div>
      <Paziresh24Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        body={
          <div className={classNames(projectcss.all, sty.freeBox___23S0G)}>
            <LauncherBlocksSectionsStoreWidgetCard
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksSectionsStoreWidgetCard___7Fhnx
              )}
              cover={
                "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fprescription-widget.png?versionId="
              }
              description={
                "\u0627\u0641\u0632\u0648\u062f\u0646 \u0644\u06cc\u0646\u06a9 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627\u06cc \u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc"
              }
              name={
                "\u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9"
              }
              onToggle={async isActive => {
                const $steps = {};

                $steps["runOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSubmit"],
                        args: [
                          (() => {
                            try {
                              return JSON.parse(
                                globalThis.localStorage.getItem("widgets") ??
                                  "[]"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSubmit"] != null &&
                  typeof $steps["runOnSubmit"] === "object" &&
                  typeof $steps["runOnSubmit"].then === "function"
                ) {
                  $steps["runOnSubmit"] = await $steps["runOnSubmit"];
                }

                $steps["updateWidgets"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["widgets"]
                        },
                        operation: 0,
                        value: JSON.parse(
                          globalThis.localStorage.getItem("widgets") ?? "[]"
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWidgets"] != null &&
                  typeof $steps["updateWidgets"] === "object" &&
                  typeof $steps["updateWidgets"].then === "function"
                ) {
                  $steps["updateWidgets"] = await $steps["updateWidgets"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                evant_group: "launcher_statistics",
                                event_type: "section_store_open",
                                user_id: $ctx.auth.info?.id,
                                is_doctor: $ctx.auth.info?.is_doctor,
                                meta_data: {
                                  section_name: "prescription",
                                  is_installed: JSON.parse(
                                    globalThis.localStorage.getItem(
                                      "widgets"
                                    ) ?? "[]"
                                  )?.includes("prescription")
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              widgetKey={"prescription"}
            />

            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__vEk8U
              )}
            />

            <LauncherBlocksSectionsStoreWidgetCard
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksSectionsStoreWidgetCard__aderS
              )}
              cover={
                "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fbooking-panel-widget.png?versionId="
              }
              description={
                "\u0627\u0641\u0632\u0648\u062f\u0646 \u0644\u06cc\u0646\u06a9 \u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627\u06cc \u0646\u0648\u0628\u062a \u062f\u0647\u06cc"
              }
              name={
                "\u0628\u0631\u0646\u0627\u0645\u0647\u200c\u0647\u0627\u06cc \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc"
              }
              onToggle={async isActive => {
                const $steps = {};

                $steps["runOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSubmit"],
                        args: [
                          (() => {
                            try {
                              return JSON.parse(
                                globalThis.localStorage.getItem("widgets") ??
                                  "[]"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSubmit"] != null &&
                  typeof $steps["runOnSubmit"] === "object" &&
                  typeof $steps["runOnSubmit"].then === "function"
                ) {
                  $steps["runOnSubmit"] = await $steps["runOnSubmit"];
                }

                $steps["updateWidgets"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["widgets"]
                        },
                        operation: 0,
                        value: JSON.parse(
                          globalThis.localStorage.getItem("widgets") ?? "[]"
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWidgets"] != null &&
                  typeof $steps["updateWidgets"] === "object" &&
                  typeof $steps["updateWidgets"].then === "function"
                ) {
                  $steps["updateWidgets"] = await $steps["updateWidgets"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                evant_group: "launcher_statistics",
                                event_type: "section_store_open",
                                user_id: $ctx.auth.info?.id,
                                is_doctor: $ctx.auth.info?.is_doctor,
                                meta_data: {
                                  section_name: "booking-panel",
                                  is_installed: JSON.parse(
                                    globalThis.localStorage.getItem(
                                      "widgets"
                                    ) ?? "[]"
                                  )?.includes("booking-panel")
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              widgetKey={"booking-panel"}
            />

            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator___9Kkgl
              )}
            />

            <LauncherBlocksSectionsStoreWidgetCard
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksSectionsStoreWidgetCard___4QKk
              )}
              cover={
                "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fsanje-widget.png?versionId="
              }
              description={
                "\u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u0645\u062a\u06cc\u0627\u0632 \u0639\u0645\u0644\u06a9\u0631\u062f \u0648 \u0631\u0627\u0647\u0646\u0645\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u0631\u0634\u062f"
              }
              name={
                "\u0627\u0645\u062a\u06cc\u0627\u0632 \u0639\u0645\u0644\u06a9\u0631\u062f \u0645\u0646"
              }
              onToggle={async isActive => {
                const $steps = {};

                $steps["runOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSubmit"],
                        args: [
                          (() => {
                            try {
                              return JSON.parse(
                                globalThis.localStorage.getItem("widgets") ??
                                  "[]"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSubmit"] != null &&
                  typeof $steps["runOnSubmit"] === "object" &&
                  typeof $steps["runOnSubmit"].then === "function"
                ) {
                  $steps["runOnSubmit"] = await $steps["runOnSubmit"];
                }

                $steps["updateWidgets"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["widgets"]
                        },
                        operation: 0,
                        value: JSON.parse(
                          globalThis.localStorage.getItem("widgets") ?? "[]"
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWidgets"] != null &&
                  typeof $steps["updateWidgets"] === "object" &&
                  typeof $steps["updateWidgets"].then === "function"
                ) {
                  $steps["updateWidgets"] = await $steps["updateWidgets"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                evant_group: "launcher_statistics",
                                event_type: "section_store_open",
                                user_id: $ctx.auth.info?.id,
                                is_doctor: $ctx.auth.info?.is_doctor,
                                meta_data: {
                                  section_name: "sanje",
                                  is_installed: JSON.parse(
                                    globalThis.localStorage.getItem(
                                      "widgets"
                                    ) ?? "[]"
                                  )?.includes("sanje")
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              widgetKey={"sanje"}
            />

            <LauncherComponentsSeparator
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator__piL6B
              )}
            />

            <LauncherBlocksSectionsStoreWidgetCard
              className={classNames(
                "__wab_instance",
                sty.launcherBlocksSectionsStoreWidgetCard__h5MoG
              )}
              cover={
                "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fnelsun-widget.png?versionId="
              }
              description={
                "\u0628\u0647 \u0633\u0627\u062f\u06af\u06cc \u0648\u0636\u0639\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u0628\u0648\u062f\u0646 \u062e\u0648\u062f\u062a\u0648 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646"
              }
              name={
                "\u0648\u0636\u0639\u06cc\u062a \u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646"
              }
              onToggle={async isActive => {
                const $steps = {};

                $steps["runOnSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSubmit"],
                        args: [
                          (() => {
                            try {
                              return JSON.parse(
                                globalThis.localStorage.getItem("widgets") ??
                                  "[]"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSubmit"] != null &&
                  typeof $steps["runOnSubmit"] === "object" &&
                  typeof $steps["runOnSubmit"].then === "function"
                ) {
                  $steps["runOnSubmit"] = await $steps["runOnSubmit"];
                }

                $steps["updateWidgets"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["widgets"]
                        },
                        operation: 0,
                        value: JSON.parse(
                          globalThis.localStorage.getItem("widgets") ?? "[]"
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWidgets"] != null &&
                  typeof $steps["updateWidgets"] === "object" &&
                  typeof $steps["updateWidgets"].then === "function"
                ) {
                  $steps["updateWidgets"] = await $steps["updateWidgets"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                evant_group: "launcher_statistics",
                                event_type: "section_store_open",
                                user_id: $ctx.auth.info?.id,
                                is_doctor: $ctx.auth.info?.is_doctor,
                                meta_data: {
                                  section_name: "nelsun",
                                  is_installed: JSON.parse(
                                    globalThis.localStorage.getItem(
                                      "widgets"
                                    ) ?? "[]"
                                  )?.includes("nelsun")
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              widgetKey={"nelsun"}
            />
          </div>
        }
        className={classNames("__wab_instance", sty.modal)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lUvyy
            )}
          >
            {
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0628\u062e\u0634 \u062c\u062f\u06cc\u062f"
            }
          </div>
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "launcherBlocksSectionsPrescription",
    "launcherBlocksSectionsBookingPanels",
    "svg",
    "modal"
  ],
  sideEffect: ["sideEffect"],
  launcherBlocksSectionsPrescription: ["launcherBlocksSectionsPrescription"],
  launcherBlocksSectionsBookingPanels: ["launcherBlocksSectionsBookingPanels"],
  svg: ["svg"],
  modal: ["modal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  launcherBlocksSectionsPrescription: typeof LauncherBlocksSectionsPrescription;
  launcherBlocksSectionsBookingPanels: typeof LauncherBlocksSectionsBookingPanels;
  svg: "svg";
  modal: typeof Paziresh24Modal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksSectionsStore__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksSectionsStore__VariantsArgs;
    args?: PlasmicLauncherBlocksSectionsStore__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicLauncherBlocksSectionsStore__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicLauncherBlocksSectionsStore__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlocksSectionsStore__ArgProps,
          internalVariantPropNames:
            PlasmicLauncherBlocksSectionsStore__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksSectionsStore__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksSectionsStore";
  } else {
    func.displayName = `PlasmicLauncherBlocksSectionsStore.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksSectionsStore = Object.assign(
  // Top-level PlasmicLauncherBlocksSectionsStore renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    launcherBlocksSectionsPrescription: makeNodeComponent(
      "launcherBlocksSectionsPrescription"
    ),
    launcherBlocksSectionsBookingPanels: makeNodeComponent(
      "launcherBlocksSectionsBookingPanels"
    ),
    svg: makeNodeComponent("svg"),
    modal: makeNodeComponent("modal"),

    // Metadata about props expected for PlasmicLauncherBlocksSectionsStore
    internalVariantProps: PlasmicLauncherBlocksSectionsStore__VariantProps,
    internalArgProps: PlasmicLauncherBlocksSectionsStore__ArgProps
  }
);

export default PlasmicLauncherBlocksSectionsStore;
/* prettier-ignore-end */
