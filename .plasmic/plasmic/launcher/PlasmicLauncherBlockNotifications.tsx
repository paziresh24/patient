/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: GyA43SeYKJuf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent
import Paziresh24LineClamp from "../../Paziresh24LineClamp"; // plasmic-import: xFfrwlkCaWS8/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlockNotifications.module.css"; // plasmic-import: GyA43SeYKJuf/css

import LauncherIconsBellIcon from "./icons/PlasmicIcon__LauncherIconsBell"; // plasmic-import: sdMSydu-BA4J/icon
import LauncherIconsLoaderIcon from "./icons/PlasmicIcon__LauncherIconsLoader"; // plasmic-import: 4lP5I8e4Rz71/icon
import nelsonNotificationPng0T3CEexzk6Xe from "./images/nelsonNotificationPng.png"; // plasmic-import: 0t3cEexzk6xe/picture

createPlasmicElementProxy;

export type PlasmicLauncherBlockNotifications__VariantMembers = {};
export type PlasmicLauncherBlockNotifications__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlockNotifications__VariantsArgs;
export const PlasmicLauncherBlockNotifications__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlockNotifications__ArgsType = {
  onAction?: (action: any) => void;
};
type ArgPropType = keyof PlasmicLauncherBlockNotifications__ArgsType;
export const PlasmicLauncherBlockNotifications__ArgProps =
  new Array<ArgPropType>("onAction");

export type PlasmicLauncherBlockNotifications__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof Paziresh24Modal>;
  img?: Flex__<typeof PlasmicImg__>;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultLauncherBlockNotificationsProps {
  onAction?: (action: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlockNotifications__RenderFunc(props: {
  variants: PlasmicLauncherBlockNotifications__VariantsArgs;
  args: PlasmicLauncherBlockNotifications__ArgsType;
  overrides: PlasmicLauncherBlockNotifications__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiRequest"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__hMf3O)}
        onClick={async event => {
          const $steps = {};

          $steps["sendLog"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return {
                          evant_group: "launcher_statistics",
                          event_type: "widget_features",
                          feature: "notification",
                          user_id: $ctx.auth.info?.id,
                          is_doctor: $ctx.auth.info?.is_doctor
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Splunk.sendLog"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["sendLog"] != null &&
            typeof $steps["sendLog"] === "object" &&
            typeof $steps["sendLog"].then === "function"
          ) {
            $steps["sendLog"] = await $steps["sendLog"];
          }

          $steps["updateModalOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModalOpen"] != null &&
            typeof $steps["updateModalOpen"] === "object" &&
            typeof $steps["updateModalOpen"].then === "function"
          ) {
            $steps["updateModalOpen"] = await $steps["updateModalOpen"];
          }
        }}
      >
        <LauncherIconsBellIcon
          className={classNames(projectcss.all, sty.svg__yg0YQ)}
          role={"img"}
        />

        {(() => {
          try {
            return $state.apiRequest.data?.length > 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__y7Dp2)} />
        ) : null}
      </div>
      <Paziresh24Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__il1Ao)}>
            {(() => {
              try {
                return $state.apiRequest.data?.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.apiRequest.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yh4MJ)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PATCH",
                                  `https://apigw.paziresh24.com/v1/hamdast/notifications/mark-as-read/${currentItem.id}`
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["goToPage"] = !currentItem.link?.includes(
                          "hamdast://"
                        )
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return currentItem.link;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["updateModalOpen3"] =
                          currentItem?.link?.includes?.("hamdast://")
                            ? (() => {
                                const actionArgs = {
                                  eventRef: $props["onAction"],
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          link: currentItem.link,
                                          notification_id: currentItem.id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return (({ eventRef, args }) => {
                                  return eventRef?.(...(args ?? []));
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateModalOpen3"] != null &&
                          typeof $steps["updateModalOpen3"] === "object" &&
                          typeof $steps["updateModalOpen3"].then === "function"
                        ) {
                          $steps["updateModalOpen3"] = await $steps[
                            "updateModalOpen3"
                          ];
                        }

                        $steps["updateModalOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modal", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalOpen"] != null &&
                          typeof $steps["updateModalOpen"] === "object" &&
                          typeof $steps["updateModalOpen"].then === "function"
                        ) {
                          $steps["updateModalOpen"] = await $steps[
                            "updateModalOpen"
                          ];
                        }

                        $steps["updateModalOpen2"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "apiRequest",
                                action: "refresh"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModalOpen2"] != null &&
                          typeof $steps["updateModalOpen2"] === "object" &&
                          typeof $steps["updateModalOpen2"].then === "function"
                        ) {
                          $steps["updateModalOpen2"] = await $steps[
                            "updateModalOpen2"
                          ];
                        }
                      }}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"40px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"40px"}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return currentItem.icon;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return {
                                src: nelsonNotificationPng0T3CEexzk6Xe,
                                fullWidth: 745,
                                fullHeight: 745,
                                aspectRatio: undefined
                              };
                            }
                            throw e;
                          }
                        })()}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pbIj0
                        )}
                      >
                        <Paziresh24LineClamp
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24LineClamp___9AgWu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dprCd
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Paziresh24LineClamp>
                        <Paziresh24LineClamp
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24LineClamp__zjvK
                          )}
                          numberOfLines={2}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e94Iq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Paziresh24LineClamp>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u6Ny4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                new Date(
                                  currentItem.created_at
                                ).toLocaleTimeString("fa-IR", {
                                  timeStyle: "short"
                                }) +
                                " " +
                                new Date(
                                  currentItem.created_at
                                ).toLocaleDateString("fa-IR")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  );
                })
              : null}
            {(() => {
              try {
                return (
                  $state.apiRequest.data?.length == 0 &&
                  !$state.apiRequest.loading
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xPkb9
                )}
              >
                {
                  "\u0627\u0639\u0644\u0627\u0646 \u062c\u062f\u06cc\u062f\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                }
              </div>
            ) : null}
            {(() => {
              try {
                return $state.apiRequest.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__pblB7)}
                role={"img"}
              />
            ) : null}
          </div>
        }
        className={classNames("__wab_instance", sty.modal)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={"\u0627\u0639\u0644\u0627\u0646\u200c\u0647\u0627"}
        trigger={null}
      />

      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiRequest"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/hamdast/notifications"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "modal", "img", "apiRequest"],
  modal: ["modal", "img"],
  img: ["img"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof Paziresh24Modal;
  img: typeof PlasmicImg__;
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlockNotifications__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlockNotifications__VariantsArgs;
    args?: PlasmicLauncherBlockNotifications__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherBlockNotifications__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherBlockNotifications__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlockNotifications__ArgProps,
          internalVariantPropNames:
            PlasmicLauncherBlockNotifications__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlockNotifications__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlockNotifications";
  } else {
    func.displayName = `PlasmicLauncherBlockNotifications.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlockNotifications = Object.assign(
  // Top-level PlasmicLauncherBlockNotifications renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicLauncherBlockNotifications
    internalVariantProps: PlasmicLauncherBlockNotifications__VariantProps,
    internalArgProps: PlasmicLauncherBlockNotifications__ArgProps
  }
);

export default PlasmicLauncherBlockNotifications;
/* prettier-ignore-end */
