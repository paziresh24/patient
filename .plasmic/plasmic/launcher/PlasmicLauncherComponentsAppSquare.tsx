/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: u4TwWczEaPgW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherComponentsAppSquare.module.css"; // plasmic-import: u4TwWczEaPgW/css

createPlasmicElementProxy;

export type PlasmicLauncherComponentsAppSquare__VariantMembers = {
  disabled: "disabled";
};
export type PlasmicLauncherComponentsAppSquare__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
};
type VariantPropType = keyof PlasmicLauncherComponentsAppSquare__VariantsArgs;
export const PlasmicLauncherComponentsAppSquare__VariantProps =
  new Array<VariantPropType>("disabled");

export type PlasmicLauncherComponentsAppSquare__ArgsType = {
  icon?: string;
  title?: string;
  onClick?: () => void;
  description?: string;
};
type ArgPropType = keyof PlasmicLauncherComponentsAppSquare__ArgsType;
export const PlasmicLauncherComponentsAppSquare__ArgProps =
  new Array<ArgPropType>("icon", "title", "onClick", "description");

export type PlasmicLauncherComponentsAppSquare__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  modal?: Flex__<typeof Paziresh24Modal>;
  span?: Flex__<"span">;
};

export interface DefaultLauncherComponentsAppSquareProps {
  icon?: string;
  title?: string;
  onClick?: () => void;
  description?: string;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherComponentsAppSquare__RenderFunc(props: {
  variants: PlasmicLauncherComponentsAppSquare__VariantsArgs;
  args: PlasmicLauncherComponentsAppSquare__ArgsType;
  overrides: PlasmicLauncherComponentsAppSquare__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootdisabled]: hasVariant($state, "disabled", "disabled") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runOnClick"] =
          $state.disabled !== "disabled"
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runOnClick"] != null &&
          typeof $steps["runOnClick"] === "object" &&
          typeof $steps["runOnClick"].then === "function"
        ) {
          $steps["runOnClick"] = await $steps["runOnClick"];
        }

        $steps["updateModalOpen"] =
          $state.disabled == "disabled"
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal", "open"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["updateModalOpen"] != null &&
          typeof $steps["updateModalOpen"] === "object" &&
          typeof $steps["updateModalOpen"].then === "function"
        ) {
          $steps["updateModalOpen"] = await $steps["updateModalOpen"];
        }
      }}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"60px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"60px"}
        height={"60"}
        loading={"lazy"}
        src={(() => {
          try {
            return $props.icon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        width={"60"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4UJRl
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jT55R
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.description;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <Paziresh24Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        body={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mjP3V
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {"\u0627\u0628\u0632\u0627\u0631\u06a9 "}
              </React.Fragment>
              {
                <span
                  data-plasmic-name={"span"}
                  data-plasmic-override={overrides.span}
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "X";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              }
              <React.Fragment>
                {
                  " \u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a. \u0627\u06cc\u0646 \u0645\u0634\u06a9\u0644 \u0628\u0647\u200c\u0632\u0648\u062f\u06cc \u0628\u0631\u0637\u0631\u0641 \u0634\u062f\u0647 \u0648 \u0627\u0628\u0632\u0627\u0631\u06a9 \u062f\u0648\u0628\u0627\u0631\u0647 \u0641\u0639\u0627\u0644 \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                }
              </React.Fragment>
            </React.Fragment>
          </div>
        }
        className={classNames("__wab_instance", sty.modal, {
          [sty.modaldisabled]: hasVariant($state, "disabled", "disabled")
        })}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6Vwq0
            )}
          >
            {
              "\u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0622\u0645\u062f\u0647 \u0627\u0633\u062a."
            }
          </div>
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "freeBox", "modal", "span"],
  img: ["img"],
  freeBox: ["freeBox"],
  modal: ["modal", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  freeBox: "div";
  modal: typeof Paziresh24Modal;
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherComponentsAppSquare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherComponentsAppSquare__VariantsArgs;
    args?: PlasmicLauncherComponentsAppSquare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicLauncherComponentsAppSquare__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicLauncherComponentsAppSquare__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherComponentsAppSquare__ArgProps,
          internalVariantPropNames:
            PlasmicLauncherComponentsAppSquare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherComponentsAppSquare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherComponentsAppSquare";
  } else {
    func.displayName = `PlasmicLauncherComponentsAppSquare.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherComponentsAppSquare = Object.assign(
  // Top-level PlasmicLauncherComponentsAppSquare renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    modal: makeNodeComponent("modal"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicLauncherComponentsAppSquare
    internalVariantProps: PlasmicLauncherComponentsAppSquare__VariantProps,
    internalArgProps: PlasmicLauncherComponentsAppSquare__ArgProps
  }
);

export default PlasmicLauncherComponentsAppSquare;
/* prettier-ignore-end */
