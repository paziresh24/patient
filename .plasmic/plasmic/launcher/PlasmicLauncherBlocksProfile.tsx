/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: AdXQLu7KAuFc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherBlocksWallet from "../../LauncherBlocksWallet"; // plasmic-import: h-1safqUkN1a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksProfile.module.css"; // plasmic-import: AdXQLu7KAuFc/css

import LauncherIconsEyeIcon from "./icons/PlasmicIcon__LauncherIconsEye"; // plasmic-import: eow8yltFJJyP/icon
import LauncherIconsEditIcon from "./icons/PlasmicIcon__LauncherIconsEdit"; // plasmic-import: GtRDVu6zRFVG/icon

createPlasmicElementProxy;

export type PlasmicLauncherBlocksProfile__VariantMembers = {};
export type PlasmicLauncherBlocksProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlocksProfile__VariantsArgs;
export const PlasmicLauncherBlocksProfile__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksProfile__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherBlocksProfile__ArgsType;
export const PlasmicLauncherBlocksProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherBlocksProfile__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  launcherBlocksWallet?: Flex__<typeof LauncherBlocksWallet>;
};

export interface DefaultLauncherBlocksProfileProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksProfile__RenderFunc(props: {
  variants: PlasmicLauncherBlocksProfile__VariantsArgs;
  args: PlasmicLauncherBlocksProfile__ArgsType;
  overrides: PlasmicLauncherBlocksProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__avrUp)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__f64ZV)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"40px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            loading={"lazy"}
            src={(() => {
              try {
                return $ctx.auth?.info?.image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fBrbq)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aIqVq
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.auth.info?.name + " " + $ctx.auth.info?.family;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wsgSt)}
              onClick={async event => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/dr/${$ctx.auth?.info?.provider?.slug}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <LauncherIconsEyeIcon
                className={classNames(projectcss.all, sty.svg__iiLjr)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xfrz8
                )}
              >
                {
                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                }
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          className={classNames(projectcss.all, sty.freeBox__vXwnm)}
          onClick={async event => {
            const $steps = {};

            $steps["goToDashboardProfile"] = true
              ? (() => {
                  const actionArgs = { destination: "/dashboard/profile/" };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToDashboardProfile"] != null &&
              typeof $steps["goToDashboardProfile"] === "object" &&
              typeof $steps["goToDashboardProfile"].then === "function"
            ) {
              $steps["goToDashboardProfile"] = await $steps[
                "goToDashboardProfile"
              ];
            }
          }}
        >
          <LauncherIconsEditIcon
            className={classNames(projectcss.all, sty.svg__usu5T)}
            role={"img"}
          />
        </div>
      </Stack__>
      <LauncherBlocksWallet
        data-plasmic-name={"launcherBlocksWallet"}
        data-plasmic-override={overrides.launcherBlocksWallet}
        className={classNames("__wab_instance", sty.launcherBlocksWallet)}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "launcherBlocksWallet"],
  img: ["img"],
  launcherBlocksWallet: ["launcherBlocksWallet"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  launcherBlocksWallet: typeof LauncherBlocksWallet;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksProfile__VariantsArgs;
    args?: PlasmicLauncherBlocksProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherBlocksProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherBlocksProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlocksProfile__ArgProps,
          internalVariantPropNames: PlasmicLauncherBlocksProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksProfile";
  } else {
    func.displayName = `PlasmicLauncherBlocksProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksProfile = Object.assign(
  // Top-level PlasmicLauncherBlocksProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    launcherBlocksWallet: makeNodeComponent("launcherBlocksWallet"),

    // Metadata about props expected for PlasmicLauncherBlocksProfile
    internalVariantProps: PlasmicLauncherBlocksProfile__VariantProps,
    internalArgProps: PlasmicLauncherBlocksProfile__ArgProps
  }
);

export default PlasmicLauncherBlocksProfile;
/* prettier-ignore-end */
