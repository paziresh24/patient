/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: h-1safqUkN1a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import LauncherComponentsSeparator from "../../LauncherComponentsSeparator"; // plasmic-import: 1FBJsfya0Spv/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksWallet.module.css"; // plasmic-import: h-1safqUkN1a/css

import LauncherIconsChevronLeftIcon from "./icons/PlasmicIcon__LauncherIconsChevronLeft"; // plasmic-import: bpf8GR68xA_B/icon
import LauncherIconsWalletIcon from "./icons/PlasmicIcon__LauncherIconsWallet"; // plasmic-import: KKbq06nKrEoJ/icon
import LauncherIconsLoaderIcon from "./icons/PlasmicIcon__LauncherIconsLoader"; // plasmic-import: 4lP5I8e4Rz71/icon

createPlasmicElementProxy;

export type PlasmicLauncherBlocksWallet__VariantMembers = {};
export type PlasmicLauncherBlocksWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlocksWallet__VariantsArgs;
export const PlasmicLauncherBlocksWallet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksWallet__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherBlocksWallet__ArgsType;
export const PlasmicLauncherBlocksWallet__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherBlocksWallet__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof Paziresh24Modal>;
  launcherComponentsSeparator?: Flex__<typeof LauncherComponentsSeparator>;
  apiRequest?: Flex__<typeof ApiRequest>;
  apiRequest2?: Flex__<typeof ApiRequest>;
};

export interface DefaultLauncherBlocksWalletProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksWallet__RenderFunc(props: {
  variants: PlasmicLauncherBlocksWallet__VariantsArgs;
  args: PlasmicLauncherBlocksWallet__ArgsType;
  overrides: PlasmicLauncherBlocksWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Paziresh24Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ehbPk)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__cXju2)}
              onClick={async event => {
                const $steps = {};

                $steps["goToDashboardAppsKatibeBills"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "/dashboard/apps/katibe/bills/"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToDashboardAppsKatibeBills"] != null &&
                  typeof $steps["goToDashboardAppsKatibeBills"] === "object" &&
                  typeof $steps["goToDashboardAppsKatibeBills"].then ===
                    "function"
                ) {
                  $steps["goToDashboardAppsKatibeBills"] = await $steps[
                    "goToDashboardAppsKatibeBills"
                  ];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__egvir)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fxh6D)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o7OQ9
                    )}
                  >
                    {
                      "\u06a9\u06cc\u0641 \u067e\u0648\u0644 \u062c\u062f\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bHHa
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"("}</React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__vkxT1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.apiRequest?.data?.data?.balance / 10
                                )?.toLocaleString("fa-IR");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06f2\u06f2";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </span>
                      }
                      <React.Fragment>
                        {" \u062a\u0648\u0645\u0627\u0646)"}
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__njMq2
                  )}
                >
                  {
                    "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627\u06cc \u062c\u062f\u06cc\u062f \u0628\u0647 \u0627\u06cc\u0646 \u062d\u0633\u0627\u0628 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f."
                  }
                </div>
              </div>
              <LauncherIconsChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__aqoze)}
                role={"img"}
              />
            </div>
            <LauncherComponentsSeparator
              data-plasmic-name={"launcherComponentsSeparator"}
              data-plasmic-override={overrides.launcherComponentsSeparator}
              className={classNames(
                "__wab_instance",
                sty.launcherComponentsSeparator
              )}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__o8LB)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return globalThis.open(
                              "https://dr.paziresh24.com/setting/payment",
                              "_blank"
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox___6Y1Vp)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dUpyi)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jUkNv
                    )}
                  >
                    {
                      "\u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0642\u062f\u06cc\u0645"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uRjAf
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"("}</React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__eg3AZ
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.apiRequest2.data[
                                    $state.apiRequest2.data?.length - 1
                                  ]?.sum_Unpaid_Amount / 10
                                )?.toLocaleString("fa-IR");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06f2\u06f2";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </span>
                      }
                      <React.Fragment>
                        {" \u062a\u0648\u0645\u0627\u0646)"}
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aaTdi
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646\u06cc \u06a9\u0627\u0645\u0644 \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u062c\u062f\u06cc\u062f\u060c \u0644\u0637\u0641\u0627\u064b \u062a\u0633\u0648\u06cc\u0647 \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              </div>
              <LauncherIconsChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__xevjl)}
                role={"img"}
              />
            </div>
          </Stack__>
        }
        className={classNames("__wab_instance", sty.modal)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1Nreg
            )}
          >
            {
              "\u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u0648 \u0645\u0634\u0627\u0647\u062f\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
            }
          </div>
        }
        trigger={null}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__dpTyg)}
        onClick={async event => {
          const $steps = {};

          $steps["updateModalOpen"] =
            $ctx.Growthbook.features["hamdast::katibe"]?.hide === false &&
            $state.apiRequest?.data?.data?.balance > 0 &&
            $state.apiRequest2?.data?.[$state.apiRequest2?.data?.length - 1]
              ?.sum_Unpaid_Amount > 0
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updateModalOpen"] != null &&
            typeof $steps["updateModalOpen"] === "object" &&
            typeof $steps["updateModalOpen"].then === "function"
          ) {
            $steps["updateModalOpen"] = await $steps["updateModalOpen"];
          }

          $steps["goToDashboardAppsWalletPayment"] =
            $ctx.Growthbook.features["hamdast::katibe"]?.hide === true
              ? (() => {
                  const actionArgs = {
                    destination: "/dashboard/apps/wallet/payment/"
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToDashboardAppsWalletPayment"] != null &&
            typeof $steps["goToDashboardAppsWalletPayment"] === "object" &&
            typeof $steps["goToDashboardAppsWalletPayment"].then === "function"
          ) {
            $steps["goToDashboardAppsWalletPayment"] = await $steps[
              "goToDashboardAppsWalletPayment"
            ];
          }

          $steps["goToDashboardAppsKatibeBills"] =
            $ctx.Growthbook.features["hamdast::katibe"]?.hide === false &&
            !$state.apiRequest2?.data?.[$state.apiRequest2?.data?.length - 1]
              ?.sum_Unpaid_Amount
              ? (() => {
                  const actionArgs = {
                    destination: "/dashboard/apps/katibe/bills/"
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToDashboardAppsKatibeBills"] != null &&
            typeof $steps["goToDashboardAppsKatibeBills"] === "object" &&
            typeof $steps["goToDashboardAppsKatibeBills"].then === "function"
          ) {
            $steps["goToDashboardAppsKatibeBills"] = await $steps[
              "goToDashboardAppsKatibeBills"
            ];
          }
        }}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nrZdj)}
        >
          <LauncherIconsWalletIcon
            className={classNames(projectcss.all, sty.svg__kOroc)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vx14S
            )}
          >
            {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__j27OP)}
        >
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__z79)}
                role={"img"}
              />
            }
            loadingDisplay={
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__fRj6R)}
                role={"img"}
              />
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={(() => {
              try {
                return $ctx.Growthbook.features["hamdast::katibe"]?.hide ==
                  false
                  ? "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                  : "https://apigw.paziresh24.com/v1/details-payment";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {(() => {
              try {
                return (
                  $ctx.Growthbook.features["hamdast::katibe"]?.hide == true
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iL1Tm)}
              >
                {(() => {
                  try {
                    return !!$state.apiRequest.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hl19I
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__bsFd
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.apiRequest?.data?.[
                                    $state.apiRequest?.data?.length - 1
                                  ]?.sum_Unpaid_Amount / 10
                                )?.toLocaleString("fa-IR");
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06f0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </span>
                      }
                      <React.Fragment>
                        {" \u062a\u0648\u0645\u0627\u0646"}
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                ) : null}
              </Stack__>
            ) : null}
            {(() => {
              try {
                return (
                  $ctx.Growthbook.features["hamdast::katibe"]?.hide == false
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__jBl8I)}>
                <ApiRequest
                  data-plasmic-name={"apiRequest2"}
                  data-plasmic-override={overrides.apiRequest2}
                  className={classNames("__wab_instance", sty.apiRequest2)}
                  errorDisplay={
                    <LauncherIconsLoaderIcon
                      className={classNames(projectcss.all, sty.svg__oqAxi)}
                      role={"img"}
                    />
                  }
                  loadingDisplay={
                    <LauncherIconsLoaderIcon
                      className={classNames(projectcss.all, sty.svg___93OVl)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "apiRequest2",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  url={(() => {
                    try {
                      return "https://apigw.paziresh24.com/v1/details-payment";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ixcoN)}
                  >
                    {(() => {
                      try {
                        return (
                          $state.apiRequest2?.data?.[
                            $state.apiRequest2.data?.length - 1
                          ]?.sum_Unpaid_Amount > 0
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oZ7Ry
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span__wXIym
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.apiRequest2.data[
                                        $state.apiRequest2.data?.length - 1
                                      ]?.sum_Unpaid_Amount / 10
                                    )?.toLocaleString("fa-IR");
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06f0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </span>
                          }
                          <React.Fragment>{" +"}</React.Fragment>
                        </React.Fragment>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return !!$state.apiRequest.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qGszz
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span___7R1H
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return (
                                        ($state.apiRequest.data?.data
                                          ?.balance ?? 0) / 10
                                      )?.toLocaleString("fa-IR");
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06f0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </span>
                          }
                          <React.Fragment>
                            {" \u062a\u0648\u0645\u0627\u0646"}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    ) : null}
                  </Stack__>
                  {(() => {
                    try {
                      return !$state.apiRequest2.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <LauncherIconsLoaderIcon
                      className={classNames(projectcss.all, sty.svg__s6WeK)}
                      role={"img"}
                    />
                  ) : null}
                </ApiRequest>
              </div>
            ) : null}
          </ApiRequest>
          <LauncherIconsChevronLeftIcon
            className={classNames(projectcss.all, sty.svg__wJkmF)}
            role={"img"}
          />
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "launcherComponentsSeparator",
    "apiRequest",
    "apiRequest2"
  ],
  modal: ["modal", "launcherComponentsSeparator"],
  launcherComponentsSeparator: ["launcherComponentsSeparator"],
  apiRequest: ["apiRequest", "apiRequest2"],
  apiRequest2: ["apiRequest2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof Paziresh24Modal;
  launcherComponentsSeparator: typeof LauncherComponentsSeparator;
  apiRequest: typeof ApiRequest;
  apiRequest2: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksWallet__VariantsArgs;
    args?: PlasmicLauncherBlocksWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherBlocksWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLauncherBlocksWallet__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlocksWallet__ArgProps,
          internalVariantPropNames: PlasmicLauncherBlocksWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksWallet";
  } else {
    func.displayName = `PlasmicLauncherBlocksWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksWallet = Object.assign(
  // Top-level PlasmicLauncherBlocksWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    launcherComponentsSeparator: makeNodeComponent(
      "launcherComponentsSeparator"
    ),
    apiRequest: makeNodeComponent("apiRequest"),
    apiRequest2: makeNodeComponent("apiRequest2"),

    // Metadata about props expected for PlasmicLauncherBlocksWallet
    internalVariantProps: PlasmicLauncherBlocksWallet__VariantProps,
    internalArgProps: PlasmicLauncherBlocksWallet__ArgProps
  }
);

export default PlasmicLauncherBlocksWallet;
/* prettier-ignore-end */
