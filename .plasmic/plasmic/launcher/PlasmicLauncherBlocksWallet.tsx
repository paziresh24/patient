/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: h-1safqUkN1a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: IpxudV5ARc89/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksWallet.module.css"; // plasmic-import: h-1safqUkN1a/css

import LauncherIconsWalletIcon from "./icons/PlasmicIcon__LauncherIconsWallet"; // plasmic-import: KKbq06nKrEoJ/icon
import LauncherIconsLoaderIcon from "./icons/PlasmicIcon__LauncherIconsLoader"; // plasmic-import: 4lP5I8e4Rz71/icon
import LauncherIconsChevronLeftIcon from "./icons/PlasmicIcon__LauncherIconsChevronLeft"; // plasmic-import: bpf8GR68xA_B/icon

import __lib_axios from "axios";

createPlasmicElementProxy;

export type PlasmicLauncherBlocksWallet__VariantMembers = {};
export type PlasmicLauncherBlocksWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicLauncherBlocksWallet__VariantsArgs;
export const PlasmicLauncherBlocksWallet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksWallet__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherBlocksWallet__ArgsType;
export const PlasmicLauncherBlocksWallet__ArgProps = new Array<ArgPropType>();

export type PlasmicLauncherBlocksWallet__OverridesType = {
  root?: Flex__<"div">;
  getCenters?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
  span?: Flex__<"span">;
};

export interface DefaultLauncherBlocksWalletProps {
  className?: string;
}

const $$ = {
  axios: __lib_axios
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksWallet__RenderFunc(props: {
  variants: PlasmicLauncherBlocksWallet__VariantsArgs;
  args: PlasmicLauncherBlocksWallet__ArgsType;
  overrides: PlasmicLauncherBlocksWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "katbeBalance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "getCenters.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getCenters"
      },
      {
        path: "getCenters.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getCenters"
      },
      {
        path: "getCenters.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getCenters"
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__dpTyg)}
        onClick={async event => {
          const $steps = {};

          $steps["goToDashboardAppsKatibeBills"] = true
            ? (() => {
                const actionArgs = {
                  destination: "/dashboard/apps/katibe/bills/"
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToDashboardAppsKatibeBills"] != null &&
            typeof $steps["goToDashboardAppsKatibeBills"] === "object" &&
            typeof $steps["goToDashboardAppsKatibeBills"].then === "function"
          ) {
            $steps["goToDashboardAppsKatibeBills"] = await $steps[
              "goToDashboardAppsKatibeBills"
            ];
          }

          $steps["updateModalOpen2"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    (() => {
                      try {
                        return {
                          evant_group: "launcher_statistics",
                          event_type: "widget_features",
                          feature: "wallet",
                          user_id: $ctx.auth.info?.id,
                          is_doctor: $ctx.auth.info?.is_doctor
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Splunk.sendLog"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["updateModalOpen2"] != null &&
            typeof $steps["updateModalOpen2"] === "object" &&
            typeof $steps["updateModalOpen2"].then === "function"
          ) {
            $steps["updateModalOpen2"] = await $steps["updateModalOpen2"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__nrZdj)}>
          <LauncherIconsWalletIcon
            className={classNames(projectcss.all, sty.svg__kOroc)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vx14S
            )}
          >
            {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__j27OP)}>
          <ApiRequest
            data-plasmic-name={"getCenters"}
            data-plasmic-override={overrides.getCenters}
            className={classNames("__wab_instance", sty.getCenters)}
            errorDisplay={
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__bnGad)}
                role={"img"}
              />
            }
            loadingDisplay={
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__wIjLu)}
                role={"img"}
              />
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getCenters", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getCenters",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getCenters", "data"]).apply(
                null,
                eventArgs
              );
            }}
            ref={ref => {
              $refs["getCenters"] = ref;
            }}
            url={(() => {
              try {
                return `https://apigw.paziresh24.com/v1/doctor/${$ctx.auth?.info?.id}/centers`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              deps={(() => {
                try {
                  return [$state.getCenters.data?.item];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] =
                  $state.getCenters.data.items?.length > 0
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (async () => {
                              try {
                                const katibeWalletRequests =
                                  $state.getCenters.data?.items?.map(
                                    async item =>
                                      await $$.axios(
                                        `https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?centerid=${
                                          item.id
                                        }${
                                          item.id == "5532"
                                            ? ``
                                            : `&account=organization`
                                        }`,
                                        {
                                          ...$ctx.Fragment.previewApiConfig,
                                          ...$ctx.Fragment.apiConfig
                                        }
                                      )
                                  );
                                const responses = await Promise.all(
                                  katibeWalletRequests
                                );
                                $state.katbeBalance = responses.reduce(
                                  (prev, current) => {
                                    return prev + current.data?.data?.balance;
                                  },
                                  0
                                );
                                return ($state.isLoading = false);
                              } catch (error) {
                                return ($state.isLoading = false);
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            />

            {(() => {
              try {
                return $state.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <LauncherIconsLoaderIcon
                className={classNames(projectcss.all, sty.svg__z79)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return !$state.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__ixcoN)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qGszz
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                return (
                                  ($state.katbeBalance ?? 0) / 10
                                )?.toLocaleString("fa-IR");
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "-";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </span>
                    }
                    <React.Fragment>
                      {" \u062a\u0648\u0645\u0627\u0646"}
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            ) : null}
          </ApiRequest>
          <LauncherIconsChevronLeftIcon
            className={classNames(projectcss.all, sty.svg__wJkmF)}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "getCenters", "sideEffect", "span"],
  getCenters: ["getCenters", "sideEffect", "span"],
  sideEffect: ["sideEffect"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getCenters: typeof ApiRequest;
  sideEffect: typeof SideEffect;
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksWallet__VariantsArgs;
    args?: PlasmicLauncherBlocksWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLauncherBlocksWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLauncherBlocksWallet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLauncherBlocksWallet__ArgProps,
          internalVariantPropNames: PlasmicLauncherBlocksWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksWallet";
  } else {
    func.displayName = `PlasmicLauncherBlocksWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksWallet = Object.assign(
  // Top-level PlasmicLauncherBlocksWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getCenters: makeNodeComponent("getCenters"),
    sideEffect: makeNodeComponent("sideEffect"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicLauncherBlocksWallet
    internalVariantProps: PlasmicLauncherBlocksWallet__VariantProps,
    internalArgProps: PlasmicLauncherBlocksWallet__ArgProps
  }
);

export default PlasmicLauncherBlocksWallet;
/* prettier-ignore-end */
