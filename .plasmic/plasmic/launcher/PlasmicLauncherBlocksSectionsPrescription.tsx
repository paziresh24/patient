/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: NaX6a-Bx6lRC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LauncherComponentsTitle from "../../LauncherComponentsTitle"; // plasmic-import: hyfYYMUJ_ZCV/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LauncherComponentsService from "../../LauncherComponentsService"; // plasmic-import: 51AmRlCgKgNN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksSectionsPrescription.module.css"; // plasmic-import: NaX6a-Bx6lRC/css

createPlasmicElementProxy;

export type PlasmicLauncherBlocksSectionsPrescription__VariantMembers = {};
export type PlasmicLauncherBlocksSectionsPrescription__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicLauncherBlocksSectionsPrescription__VariantsArgs;
export const PlasmicLauncherBlocksSectionsPrescription__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksSectionsPrescription__ArgsType = {};
type ArgPropType = keyof PlasmicLauncherBlocksSectionsPrescription__ArgsType;
export const PlasmicLauncherBlocksSectionsPrescription__ArgProps =
  new Array<ArgPropType>();

export type PlasmicLauncherBlocksSectionsPrescription__OverridesType = {
  root?: Flex__<"div">;
  launcherComponentsTitle?: Flex__<typeof LauncherComponentsTitle>;
  reveal?: Flex__<typeof Reveal>;
  launcherComponentsService?: Flex__<typeof LauncherComponentsService>;
};

export interface DefaultLauncherBlocksSectionsPrescriptionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksSectionsPrescription__RenderFunc(props: {
  variants: PlasmicLauncherBlocksSectionsPrescription__VariantsArgs;
  args: PlasmicLauncherBlocksSectionsPrescription__ArgsType;
  overrides: PlasmicLauncherBlocksSectionsPrescription__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_paziresh_24_design_system,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___29FXj)}
        onClick={async event => {
          const $steps = {};

          $steps["updateIsShow"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isShow"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateIsShow"] != null &&
            typeof $steps["updateIsShow"] === "object" &&
            typeof $steps["updateIsShow"].then === "function"
          ) {
            $steps["updateIsShow"] = await $steps["updateIsShow"];
          }
        }}
      >
        <LauncherComponentsTitle
          data-plasmic-name={"launcherComponentsTitle"}
          data-plasmic-override={overrides.launcherComponentsTitle}
          className={classNames("__wab_instance", sty.launcherComponentsTitle)}
          title={
            "\u0646\u0633\u062e\u0647 \u0646\u0648\u06cc\u0633\u06cc \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9"
          }
        />
      </div>
      <Reveal
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        cascade={true}
        className={classNames("__wab_instance", sty.reveal)}
        effect={"fade"}
        reverse={false}
        triggerOnce={true}
      >
        <div className={classNames(projectcss.all, sty.freeBox__otAe1)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return [
                  {
                    name: "پذیرش۲۴",
                    icon: "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fsection-paziresh24.png?versionId=",
                    url: "https://dr.paziresh24.com"
                  },
                  {
                    name: "دکترنکست",
                    icon: "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fsection-drnext.png?versionId=",
                    url: "https://panel.drnext.ir/"
                  },
                  {
                    name: "مداریو",
                    icon: "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fsection-medario.png?versionId=",
                    url: "https://web.medario.ir/"
                  },
                  {
                    name: "اکسون",
                    icon: "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fsection-axon.png?versionId=",
                    url: "https://emr.axon.me/"
                  }
                ];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <LauncherComponentsService
                data-plasmic-name={"launcherComponentsService"}
                data-plasmic-override={overrides.launcherComponentsService}
                className={classNames(
                  "__wab_instance",
                  sty.launcherComponentsService
                )}
                icon={(() => {
                  try {
                    return currentItem.icon;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
                link={(() => {
                  try {
                    return currentItem.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                name={(() => {
                  try {
                    return currentItem.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                source={"section_prescription"}
              />
            );
          })}
        </div>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "launcherComponentsTitle",
    "reveal",
    "launcherComponentsService"
  ],
  launcherComponentsTitle: ["launcherComponentsTitle"],
  reveal: ["reveal", "launcherComponentsService"],
  launcherComponentsService: ["launcherComponentsService"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  launcherComponentsTitle: typeof LauncherComponentsTitle;
  reveal: typeof Reveal;
  launcherComponentsService: typeof LauncherComponentsService;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksSectionsPrescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksSectionsPrescription__VariantsArgs;
    args?: PlasmicLauncherBlocksSectionsPrescription__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicLauncherBlocksSectionsPrescription__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicLauncherBlocksSectionsPrescription__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicLauncherBlocksSectionsPrescription__ArgProps,
          internalVariantPropNames:
            PlasmicLauncherBlocksSectionsPrescription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksSectionsPrescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksSectionsPrescription";
  } else {
    func.displayName = `PlasmicLauncherBlocksSectionsPrescription.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksSectionsPrescription = Object.assign(
  // Top-level PlasmicLauncherBlocksSectionsPrescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    launcherComponentsTitle: makeNodeComponent("launcherComponentsTitle"),
    reveal: makeNodeComponent("reveal"),
    launcherComponentsService: makeNodeComponent("launcherComponentsService"),

    // Metadata about props expected for PlasmicLauncherBlocksSectionsPrescription
    internalVariantProps:
      PlasmicLauncherBlocksSectionsPrescription__VariantProps,
    internalArgProps: PlasmicLauncherBlocksSectionsPrescription__ArgProps
  }
);

export default PlasmicLauncherBlocksSectionsPrescription;
/* prettier-ignore-end */
