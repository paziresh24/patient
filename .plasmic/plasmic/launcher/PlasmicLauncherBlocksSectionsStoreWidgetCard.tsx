/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: grxNYctbMek6PL66cujx3u
// Component: u2wp7SlDTOsq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: grxNYctbMek6PL66cujx3u/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: grxNYctbMek6PL66cujx3u/projectcss
import sty from "./PlasmicLauncherBlocksSectionsStoreWidgetCard.module.css"; // plasmic-import: u2wp7SlDTOsq/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: IiQOu5G1v-6J/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import XIcon from "../paziresh_24_design_system/icons/PlasmicIcon__X"; // plasmic-import: TbYkPSJXy2Wa/icon

createPlasmicElementProxy;

export type PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantMembers = {};
export type PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantsArgs;
export const PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgsType = {
  name?: string;
  cover?: string;
  description?: string;
  widgetKey?: string;
  onToggle?: (isActive: boolean) => void;
};
type ArgPropType = keyof PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgsType;
export const PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgProps =
  new Array<ArgPropType>(
    "name",
    "cover",
    "description",
    "widgetKey",
    "onToggle"
  );

export type PlasmicLauncherBlocksSectionsStoreWidgetCard__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultLauncherBlocksSectionsStoreWidgetCardProps {
  name?: string;
  cover?: string;
  description?: string;
  widgetKey?: string;
  onToggle?: (isActive: boolean) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLauncherBlocksSectionsStoreWidgetCard__RenderFunc(props: {
  variants: PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantsArgs;
  args: PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgsType;
  overrides: PlasmicLauncherBlocksSectionsStoreWidgetCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                !!JSON.parse(
                  globalThis.localStorage.getItem("widgets") ?? "[]"
                )?.includes?.($props.widgetKey) ||
                JSON.parse(
                  globalThis.localStorage.getItem("widgets") ?? "[]"
                )?.some?.(
                  item => item?.key == $props.widgetKey && item?.enabled == true
                )
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100%"}
        loading={"lazy"}
        src={(() => {
          try {
            return $props.cover;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "https://hamdast.s3.ir-thr-at1.arvanstorage.ir/apps%2Fprescription-widget.png?versionId=";
            }
            throw e;
          }
        })()}
      />

      <div className={classNames(projectcss.all, sty.freeBox__qUVlZ)}>
        <div className={classNames(projectcss.all, sty.freeBox__clhNe)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__k6Fvg
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nwU37
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        {(() => {
          try {
            return !$state.isActive;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Paziresh24Button
            children2={"\u0627\u0641\u0632\u0648\u062f\u0646"}
            className={classNames(
              "__wab_instance",
              sty.paziresh24Button__ejOj1
            )}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return globalThis.localStorage.setItem(
                          "widgets",
                          JSON.stringify([
                            ...JSON.parse(
                              globalThis.localStorage?.getItem?.("widgets") ??
                                "[]"
                            ),
                            { key: $props.widgetKey, enabled: true }
                          ])
                        );
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateIsActive"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isActive"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsActive"] != null &&
                typeof $steps["updateIsActive"] === "object" &&
                typeof $steps["updateIsActive"].then === "function"
              ) {
                $steps["updateIsActive"] = await $steps["updateIsActive"];
              }

              $steps["updateIsActive2"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props["onToggle"],
                      args: [true]
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsActive2"] != null &&
                typeof $steps["updateIsActive2"] === "object" &&
                typeof $steps["updateIsActive2"].then === "function"
              ) {
                $steps["updateIsActive2"] = await $steps["updateIsActive2"];
              }
            }}
            showStartIcon={true}
            size={"compact"}
            startIcon={
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__ksTi1)}
                role={"img"}
              />
            }
          />
        ) : null}
        {(() => {
          try {
            return $state.isActive;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Paziresh24Button
            children2={"\u062d\u0630\u0641"}
            className={classNames("__wab_instance", sty.paziresh24Button__oKyW)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return globalThis.localStorage.setItem(
                          "widgets",
                          JSON.stringify([
                            ...JSON.parse(
                              globalThis.localStorage.getItem("widgets") ?? "{}"
                            )
                              .filter(item => item != $props.widgetKey)
                              .map(item =>
                                item?.key == $props.widgetKey
                                  ? { ...item, enabled: false }
                                  : item
                              )
                          ])
                        );
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateIsActive"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isActive"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsActive"] != null &&
                typeof $steps["updateIsActive"] === "object" &&
                typeof $steps["updateIsActive"].then === "function"
              ) {
                $steps["updateIsActive"] = await $steps["updateIsActive"];
              }

              $steps["updateIsActive2"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["onToggle"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsActive2"] != null &&
                typeof $steps["updateIsActive2"] === "object" &&
                typeof $steps["updateIsActive2"].then === "function"
              ) {
                $steps["updateIsActive2"] = await $steps["updateIsActive2"];
              }
            }}
            outline={true}
            showStartIcon={true}
            size={"compact"}
            startIcon={
              <XIcon
                className={classNames(projectcss.all, sty.svg__oRtS)}
                role={"img"}
              />
            }
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLauncherBlocksSectionsStoreWidgetCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantsArgs;
    args?: PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgProps,
          internalVariantPropNames:
            PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLauncherBlocksSectionsStoreWidgetCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLauncherBlocksSectionsStoreWidgetCard";
  } else {
    func.displayName = `PlasmicLauncherBlocksSectionsStoreWidgetCard.${nodeName}`;
  }
  return func;
}

export const PlasmicLauncherBlocksSectionsStoreWidgetCard = Object.assign(
  // Top-level PlasmicLauncherBlocksSectionsStoreWidgetCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicLauncherBlocksSectionsStoreWidgetCard
    internalVariantProps:
      PlasmicLauncherBlocksSectionsStoreWidgetCard__VariantProps,
    internalArgProps: PlasmicLauncherBlocksSectionsStoreWidgetCard__ArgProps
  }
);

export default PlasmicLauncherBlocksSectionsStoreWidgetCard;
/* prettier-ignore-end */
