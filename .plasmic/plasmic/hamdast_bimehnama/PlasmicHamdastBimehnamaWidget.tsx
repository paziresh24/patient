// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k6ZwKcaHfkxemp7yqC1vbY
// Component: 6-Wp84uf7hB4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Collapsible from "../../Collapsible"; // plasmic-import: kYXN54tCkD2S/component
import LineClamp from "../../LineClamp"; // plasmic-import: fa_t7ELXcm5k/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: k6ZwKcaHfkxemp7yqC1vbY/projectcss
import sty from "./PlasmicHamdastBimehnamaWidget.module.css"; // plasmic-import: 6-Wp84uf7hB4/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fXb4BRQWSj1u/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon

createPlasmicElementProxy;

export type PlasmicHamdastBimehnamaWidget__VariantMembers = {};
export type PlasmicHamdastBimehnamaWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamdastBimehnamaWidget__VariantsArgs;
export const PlasmicHamdastBimehnamaWidget__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamdastBimehnamaWidget__ArgsType = { data?: any };
type ArgPropType = keyof PlasmicHamdastBimehnamaWidget__ArgsType;
export const PlasmicHamdastBimehnamaWidget__ArgProps = new Array<ArgPropType>(
  "data"
);

export type PlasmicHamdastBimehnamaWidget__OverridesType = {
  root?: Flex__<"div">;
  collapsible?: Flex__<typeof Collapsible>;
};

export interface DefaultHamdastBimehnamaWidgetProps {
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamdastBimehnamaWidget__RenderFunc(props: {
  variants: PlasmicHamdastBimehnamaWidget__VariantsArgs;
  args: PlasmicHamdastBimehnamaWidget__ArgsType;
  overrides: PlasmicHamdastBimehnamaWidget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wcGwe)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0X0Nc
          )}
        >
          {
            "\u0628\u06cc\u0645\u0647\u200c\u0647\u0627\u06cc \u0637\u0631\u0641 \u0642\u0631\u0627\u0631\u062f\u0627\u062f \u067e\u0632\u0634\u06a9"
          }
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oziL8)}
      >
        <Collapsible
          data-plasmic-name={"collapsible"}
          data-plasmic-override={overrides.collapsible}
          className={classNames("__wab_instance", sty.collapsible)}
          defaultMaxHeight={"200px"}
          slot={
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wE20V
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0645\u062a\u0631"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__ttCeL)}
              color={"text"}
              showStartIcon={true}
              size={"compact"}
              startIcon={
                <ChevronUpIcon
                  className={classNames(projectcss.all, sty.svg__rkwxx)}
                  role={"img"}
                />
              }
            />
          }
          slot2={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nj0VK)}
            >
              {(() => {
                try {
                  return $props.data.base?.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__deuB)}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__dzgeE)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ldvzA
                    )}
                  >
                    {"\u0628\u06cc\u0645\u0647 \u067e\u0627\u06cc\u0647"}
                  </div>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $props.data.base?.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___94J2U)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $props.data.base;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x3O2J
                        )}
                        key={currentIndex}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__n9TZl)}
                          displayHeight={"24px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"24px"}
                          height={"24"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return `https://bimehnama.s3.ir-thr-at1.arvanstorage.ir/base%2F${currentItem.key}-insurance.svg`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          width={"24"}
                        />

                        <LineClamp
                          className={classNames(
                            "__wab_instance",
                            sty.lineClamp__qUhPu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yoRr8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LineClamp>
                      </Stack__>
                    );
                  })}
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.data.supplement?.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hoqek)}
                >
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__bYm2)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jq2AA
                    )}
                  >
                    {
                      "\u0628\u06cc\u0645\u0647 \u062a\u06a9\u0645\u06cc\u0644\u06cc"
                    }
                  </div>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $props.data.supplement?.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__s2Td7)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $props.data.supplement;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vZmO1
                        )}
                        key={currentIndex}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__uqljK)}
                          displayHeight={"20px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"20px"}
                          height={"24"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return `https://bimehnama.s3.ir-thr-at1.arvanstorage.ir/insurances%2F${currentItem.key}-insurance.svg`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          width={"24"}
                        />

                        <LineClamp
                          className={classNames(
                            "__wab_instance",
                            sty.lineClamp__cDm5M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7XCy2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LineClamp>
                      </Stack__>
                    );
                  })}
                </div>
              ) : null}
            </Stack__>
          }
        >
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dtYqv
                )}
              >
                {
                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u0628\u06cc\u0634\u062a\u0631"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__qCs72)}
            color={"text"}
            showStartIcon={true}
            size={"compact"}
            startIcon={
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__nHqj7)}
                role={"img"}
              />
            }
          />
        </Collapsible>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "collapsible"],
  collapsible: ["collapsible"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  collapsible: typeof Collapsible;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamdastBimehnamaWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamdastBimehnamaWidget__VariantsArgs;
    args?: PlasmicHamdastBimehnamaWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamdastBimehnamaWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHamdastBimehnamaWidget__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamdastBimehnamaWidget__ArgProps,
          internalVariantPropNames: PlasmicHamdastBimehnamaWidget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamdastBimehnamaWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamdastBimehnamaWidget";
  } else {
    func.displayName = `PlasmicHamdastBimehnamaWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicHamdastBimehnamaWidget = Object.assign(
  // Top-level PlasmicHamdastBimehnamaWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapsible: makeNodeComponent("collapsible"),

    // Metadata about props expected for PlasmicHamdastBimehnamaWidget
    internalVariantProps: PlasmicHamdastBimehnamaWidget__VariantProps,
    internalArgProps: PlasmicHamdastBimehnamaWidget__ArgProps
  }
);

export default PlasmicHamdastBimehnamaWidget;
/* prettier-ignore-end */
