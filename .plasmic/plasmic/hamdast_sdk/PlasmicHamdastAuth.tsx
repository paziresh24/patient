/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yPKYrtYPnCNEj6BTTfHnY
// Component: 6gK09XfScFeD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Dialog from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import sty from "./PlasmicHamdastAuth.module.css"; // plasmic-import: 6gK09XfScFeD/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: EpJsLqY0ZzKz/icon

createPlasmicElementProxy;

export type PlasmicHamdastAuth__VariantMembers = {};
export type PlasmicHamdastAuth__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamdastAuth__VariantsArgs;
export const PlasmicHamdastAuth__VariantProps = new Array<VariantPropType>();

export type PlasmicHamdastAuth__ArgsType = {
  children?: React.ReactNode;
  trigger?: boolean;
  onSuccess?: (authCode: string) => void;
  onCancel?: () => void;
};
type ArgPropType = keyof PlasmicHamdastAuth__ArgsType;
export const PlasmicHamdastAuth__ArgProps = new Array<ArgPropType>(
  "children",
  "trigger",
  "onSuccess",
  "onCancel"
);

export type PlasmicHamdastAuth__OverridesType = {
  root?: Flex__<"div">;
  alert?: Flex__<typeof Paziresh24Dialog>;
  span?: Flex__<"span">;
  sideEffect?: Flex__<typeof SideEffect>;
  iframe?: Flex__<typeof Iframe>;
  svg?: Flex__<"svg">;
};

export interface DefaultHamdastAuthProps {
  children?: React.ReactNode;
  trigger?: boolean;
  onSuccess?: (authCode: string) => void;
  onCancel?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamdastAuth__RenderFunc(props: {
  variants: PlasmicHamdastAuth__VariantsArgs;
  args: PlasmicHamdastAuth__ArgsType;
  overrides: PlasmicHamdastAuth__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          trigger: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loadIframe",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "alert.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Paziresh24Dialog
        data-plasmic-name={"alert"}
        data-plasmic-override={overrides.alert}
        body={
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vnc69
              )}
            >
              {
                "\u0627\u06cc\u0646 \u0627\u0645\u06a9\u0627\u0646 \u0641\u0642\u0637 \u062f\u0631 \u062d\u0627\u0644\u062a \u067e\u0631\u0648\u062f\u0627\u06a9\u0634\u0646 \u062f\u0631 \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u06a9\u0627\u0631 \u0645\u06cc\u06a9\u0646\u062f."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uoUto
              )}
            >
              {
                "\u0628\u0627 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u06af\u0632\u06cc\u0646\u0647 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u062f\u0631 \u0645\u062d\u06cc\u0637 \u062a\u0648\u0633\u0639\u0647 \u0631\u0641\u062a\u0627\u0631 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0634\u0628\u06cc\u0647 \u0633\u0627\u0632\u06cc \u06a9\u0646\u06cc\u062f."
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__lydkx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lDvbz
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u062a\u0645\u0627\u06cc\u0644 \u0628\u0647 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0648\u0631\u0648\u062f \u0645\u0648\u0641\u0642 \u062f\u0627\u0631\u06cc\u062f\u060c \u0627\u0628\u062a\u062f\u0627 \u062f\u0631 "
                    }
                  </React.Fragment>
                  {
                    <span
                      data-plasmic-name={"span"}
                      data-plasmic-override={overrides.span}
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.span
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const client_id =
                                      globalThis?.hamdast?.clientKey;
                                    return globalThis.open(
                                      `https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth?client_id=${client_id}&response_type=code&redirect_uri=https://hamdast.paziresh24.com/apps/${client_id}/development/auth/callback&skip_prompt=true&scope=openid&kc_idp_hint=gozar`,
                                      "_blank"
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      {"\u0627\u06cc\u0646\u062c\u0627"}
                    </span>
                  }
                  <React.Fragment>
                    {
                      " \u0644\u0627\u06af\u06cc\u0646 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f \u0648 \u0633\u067e\u0633 \u0631\u0648\u06cc \u0648\u0631\u0648\u062f \u0645\u0648\u0641\u0642 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jnSte)}
            >
              <Paziresh24Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d3JLl
                    )}
                  >
                    {"\u0648\u0631\u0648\u062f \u0645\u0648\u0641\u0642"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__z4O35
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoadIframe"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadIframe"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadIframe"] != null &&
                    typeof $steps["updateLoadIframe"] === "object" &&
                    typeof $steps["updateLoadIframe"].then === "function"
                  ) {
                    $steps["updateLoadIframe"] = await $steps[
                      "updateLoadIframe"
                    ];
                  }

                  $steps["updateLoadIframe2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["alert", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadIframe2"] != null &&
                    typeof $steps["updateLoadIframe2"] === "object" &&
                    typeof $steps["updateLoadIframe2"].then === "function"
                  ) {
                    $steps["updateLoadIframe2"] = await $steps[
                      "updateLoadIframe2"
                    ];
                  }

                  $steps["updateLoadIframe3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["isLoading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadIframe3"] != null &&
                    typeof $steps["updateLoadIframe3"] === "object" &&
                    typeof $steps["updateLoadIframe3"].then === "function"
                  ) {
                    $steps["updateLoadIframe3"] = await $steps[
                      "updateLoadIframe3"
                    ];
                  }

                  $steps["updateLoadIframe4"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return setTimeout(() => {
                              $state.isLoading = false;
                            }, 10000);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadIframe4"] != null &&
                    typeof $steps["updateLoadIframe4"] === "object" &&
                    typeof $steps["updateLoadIframe4"].then === "function"
                  ) {
                    $steps["updateLoadIframe4"] = await $steps[
                      "updateLoadIframe4"
                    ];
                  }
                }}
              />

              <Paziresh24Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nIyHk
                    )}
                  >
                    {
                      "\u0627\u0646\u0635\u0631\u0627\u0641 \u0627\u0632 \u0648\u0631\u0648\u062f"
                    }
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button___3YAjp
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialogOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["alert", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialogOpen"] != null &&
                    typeof $steps["updateDialogOpen"] === "object" &&
                    typeof $steps["updateDialogOpen"].then === "function"
                  ) {
                    $steps["updateDialogOpen"] = await $steps[
                      "updateDialogOpen"
                    ];
                  }

                  $steps["runOnCancel"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onCancel"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnCancel"] != null &&
                    typeof $steps["runOnCancel"] === "object" &&
                    typeof $steps["runOnCancel"].then === "function"
                  ) {
                    $steps["runOnCancel"] = await $steps["runOnCancel"];
                  }
                }}
              />
            </Stack__>
          </React.Fragment>
        }
        className={classNames("__wab_instance", sty.alert)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["alert", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["alert", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jLnI8
            )}
          >
            {"\u0647\u0645\u062f\u0633\u062a"}
          </div>
        }
        trigger={null}
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={(() => {
          try {
            return [$props.trigger];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = !$props.trigger
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      $state.loadIframe = false;
                      if (
                        window.self !== window.top &&
                        !globalThis.document.referrer.includes(
                          "https://hamdast.paziresh24.com"
                        )
                      ) {
                        $state.alert.open = true;
                        return;
                      }
                      return globalThis?.hamdast?.auth
                        ?.login?.()
                        ?.then?.(event => {
                          if (event.event === "HAMDAST_AUTH_SUCCESS") {
                            $state.loadIframe = true;
                            $state.isLoading = true;
                            setTimeout(() => {
                              $state.isLoading = false;
                            }, 10000);
                          }
                          if (event.event === "HAMDAST_AUTH_CANCEL") {
                            $props.onCancel();
                          }
                        });
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      {(() => {
        try {
          return $state.loadIframe;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Iframe
          data-plasmic-name={"iframe"}
          data-plasmic-override={overrides.iframe}
          className={classNames("__wab_instance", sty.iframe)}
          onLoad={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return globalThis.addEventListener(
                          "message",
                          messageEvent => {
                            if (
                              messageEvent.data.hamdast?.event ===
                              "HAMDAST_AUTH_GET_AUTH_CODE"
                            ) {
                              $props.onSuccess(messageEvent.data.hamdast?.code);
                              $state.isLoading = false;
                              $state.loadIframe = false;
                            }
                          },
                          { once: true }
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          preview={true}
          src={(() => {
            try {
              return (() => {
                const client_id = globalThis?.hamdast?.clientKey;
                return `https://user.paziresh24.com/realms/paziresh24/protocol/openid-connect/auth?client_id=${client_id}&response_type=code&redirect_uri=https://hamdast.paziresh24.com/apps/${client_id}/auth/embedded/&skip_prompt=true&scope=openid&kc_idp_hint=gozar`;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__s6ZpT)}
        onClick={async event => {
          const $steps = {};

          $steps["runCode"] =
            !!$props.trigger && !$state.isLoading
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        $state.loadIframe = false;
                        if (
                          window.self !== window.top &&
                          !globalThis.document.referrer.includes(
                            "https://hamdast.paziresh24.com"
                          )
                        ) {
                          $state.alert.open = true;
                          return;
                        }
                        return globalThis?.hamdast?.auth
                          ?.login?.()
                          ?.then?.(event => {
                            if (event.event === "HAMDAST_AUTH_SUCCESS") {
                              $state.loadIframe = true;
                              $state.isLoading = true;
                              setTimeout(() => {
                                $state.isLoading = false;
                              }, 10000);
                            }
                            if (event.event === "HAMDAST_AUTH_CANCEL") {
                              $props.onCancel();
                            }
                          });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      >
        {renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
        {(() => {
          try {
            return $state.isLoading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__cktuZ)}>
            <IconIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "alert", "span", "sideEffect", "iframe", "svg"],
  alert: ["alert", "span"],
  span: ["span"],
  sideEffect: ["sideEffect"],
  iframe: ["iframe"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  alert: typeof Paziresh24Dialog;
  span: "span";
  sideEffect: typeof SideEffect;
  iframe: typeof Iframe;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamdastAuth__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamdastAuth__VariantsArgs;
    args?: PlasmicHamdastAuth__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamdastAuth__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHamdastAuth__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamdastAuth__ArgProps,
          internalVariantPropNames: PlasmicHamdastAuth__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamdastAuth__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamdastAuth";
  } else {
    func.displayName = `PlasmicHamdastAuth.${nodeName}`;
  }
  return func;
}

export const PlasmicHamdastAuth = Object.assign(
  // Top-level PlasmicHamdastAuth renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    alert: makeNodeComponent("alert"),
    span: makeNodeComponent("span"),
    sideEffect: makeNodeComponent("sideEffect"),
    iframe: makeNodeComponent("iframe"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHamdastAuth
    internalVariantProps: PlasmicHamdastAuth__VariantProps,
    internalArgProps: PlasmicHamdastAuth__ArgProps
  }
);

export default PlasmicHamdastAuth;
/* prettier-ignore-end */
