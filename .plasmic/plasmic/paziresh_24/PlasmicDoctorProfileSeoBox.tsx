// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: zCfmz7A_Urrp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Breadcrumbs from "../../Breadcrumbs"; // plasmic-import: p60lZNLf7UJ8/component
import Opener from "../../Opener"; // plasmic-import: HdziC2GDkrKd/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paziresh_24.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicDoctorProfileSeoBox.module.css"; // plasmic-import: zCfmz7A_Urrp/css

createPlasmicElementProxy;

export type PlasmicDoctorProfileSeoBox__VariantMembers = {};
export type PlasmicDoctorProfileSeoBox__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoctorProfileSeoBox__VariantsArgs;
export const PlasmicDoctorProfileSeoBox__VariantProps =
  new Array<VariantPropType>();

export type PlasmicDoctorProfileSeoBox__ArgsType = {
  seo?: any;
  similarLinks?: any;
};
type ArgPropType = keyof PlasmicDoctorProfileSeoBox__ArgsType;
export const PlasmicDoctorProfileSeoBox__ArgProps = new Array<ArgPropType>(
  "seo",
  "similarLinks"
);

export type PlasmicDoctorProfileSeoBox__OverridesType = {
  root?: Flex__<"div">;
  breadcrumbs?: Flex__<typeof Breadcrumbs>;
  freeBox?: Flex__<"div">;
  opener?: Flex__<typeof Opener>;
  text?: Flex__<"div">;
};

export interface DefaultDoctorProfileSeoBoxProps {
  seo?: any;
  similarLinks?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDoctorProfileSeoBox__RenderFunc(props: {
  variants: PlasmicDoctorProfileSeoBox__VariantsArgs;
  args: PlasmicDoctorProfileSeoBox__ArgsType;
  overrides: PlasmicDoctorProfileSeoBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Breadcrumbs
        data-plasmic-name={"breadcrumbs"}
        data-plasmic-override={overrides.breadcrumbs}
        className={classNames("__wab_instance", sty.breadcrumbs)}
        items={(() => {
          try {
            return $props.seo.breadcrumbs;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Opener
          data-plasmic-name={"opener"}
          data-plasmic-override={overrides.opener}
          className={classNames("__wab_instance", sty.opener)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <div
              className={projectcss.__wab_expr_html_text}
              dangerouslySetInnerHTML={{
                __html: (() => {
                  try {
                    return (() => {
                      return `<p>کارشناس فرح ناز رشیدی، کارشناس مامایی در شهر نیشابور است. مطب کارشناس فرح ناز رشیدی در مطب:خیابان عطار، عطار 12 پلاک ۲۲۲ واقع شده است که در صورت نیاز می&zwnj;توانید با شماره <span class="inline-block">051-43348039</span> تماس بگیرید.</p>
        <p>تاکنون   130K نفر از پروفایل کارشناس فرح ناز رشیدی، کارشناس مامایی  بازدید کرده&zwnj;اند؛ همچنین 99٪ مراجعین (1978 نظر ثبت شده) از ایشان رضایت داشته&zwnj;اند و 1718 نفر این پزشک را توصیه کرده&zwnj;اند. <b>نظرات کارشناس فرح ناز رشیدی</b> در پروفایل دکتر در پذیرش۲۴  قابل مشاهده است.</p>
        <p>زودترین زمان رزرو نوبت از مطب کارشناس فرح ناز رشیدی امروز 11:00 صبح می&zwnj;باشد که می&zwnj;توانید از طریق وبسایت و یا اپلیکیشن نوبت&zwnj;دهی پذیرش۲۴ نوبت خود را به صورت اینترنتی و غیرحضوری دریافت کنید.</p>
        <p>اگر زمان کافی برای مراجعه حضوری به پزشک مورد نظر خود را ندارید، به پروفایل پزشک در <a href="/" class="text-primary">پذیرش۲۴</a> سری بزنید و در صورت فعال بودن خدمات ویزیت آنلاین ایشان، نوبت ویزیت آنلاین خود را دریافت کنید؛ در غیر این&zwnj;صورت می&zwnj;توانید از سایر پزشکان کارشناس مامایی <a href="/consult" class="text-primary"> ویزیت آنلاین (تلفنی و متنی)</a> نوبت بگیرید.</p>
        <p>در صورت نیاز به عکس و بیوگرافی و <b>آدرس اینستاگرام کارشناس فرح ناز رشیدی</b>، کانال تلگرام و وبسایت ایشان، اطلاعات موجود در پروفایل ایشان را مشاهده نمایید.</p>
        <ui>
        <li>آدرس مطب کارشناس فرح ناز رشیدی: نیشابور، مطب:خیابان عطار، عطار 12 پلاک ۲۲۲</li>
        <li>تلفن مطب کارشناس فرح ناز رشیدی: <span class="inline-block">051-43348039</span></li>
        <li>تخصص کارشناس فرح ناز رشیدی: درمان بیماری&zwnj;های زنان،مشاوره بیماری&zwnj;های جنسی ودرمان آن ، مشاوره در خصوص زمان و نحوه مصرف قرص های اوژانسی جلوگیری از بارداری، تعیین جنسیت ، انجام پاپ اسمیر و آزمایش اچ پی وی،صدورک</li>
        </ui>
`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()
              }}
            />
          </div>
        </Opener>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "breadcrumbs", "freeBox", "opener", "text"],
  breadcrumbs: ["breadcrumbs"],
  freeBox: ["freeBox", "opener", "text"],
  opener: ["opener", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  breadcrumbs: typeof Breadcrumbs;
  freeBox: "div";
  opener: typeof Opener;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoctorProfileSeoBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoctorProfileSeoBox__VariantsArgs;
    args?: PlasmicDoctorProfileSeoBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoctorProfileSeoBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDoctorProfileSeoBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoctorProfileSeoBox__ArgProps,
          internalVariantPropNames: PlasmicDoctorProfileSeoBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoctorProfileSeoBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoctorProfileSeoBox";
  } else {
    func.displayName = `PlasmicDoctorProfileSeoBox.${nodeName}`;
  }
  return func;
}

export const PlasmicDoctorProfileSeoBox = Object.assign(
  // Top-level PlasmicDoctorProfileSeoBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    breadcrumbs: makeNodeComponent("breadcrumbs"),
    freeBox: makeNodeComponent("freeBox"),
    opener: makeNodeComponent("opener"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicDoctorProfileSeoBox
    internalVariantProps: PlasmicDoctorProfileSeoBox__VariantProps,
    internalArgProps: PlasmicDoctorProfileSeoBox__ArgProps
  }
);

export default PlasmicDoctorProfileSeoBox;
/* prettier-ignore-end */
