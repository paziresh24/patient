// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: qgBfujLJ7lZw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { LinkPreview } from "@plasmicpkgs/plasmic-link-preview";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paziresh_24.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicLinkPreview.module.css"; // plasmic-import: qgBfujLJ7lZw/css

createPlasmicElementProxy;

export type PlasmicLinkPreview__VariantMembers = {};
export type PlasmicLinkPreview__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinkPreview__VariantsArgs;
export const PlasmicLinkPreview__VariantProps = new Array<VariantPropType>();

export type PlasmicLinkPreview__ArgsType = {
  url?: string;
};
type ArgPropType = keyof PlasmicLinkPreview__ArgsType;
export const PlasmicLinkPreview__ArgProps = new Array<ArgPropType>("url");

export type PlasmicLinkPreview__OverridesType = {
  root?: Flex__<typeof LinkPreview>;
  img?: Flex__<typeof PlasmicImg__>;
  h5?: Flex__<"h5">;
  p?: Flex__<"p">;
};

export interface DefaultLinkPreviewProps {
  url?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinkPreview__RenderFunc(props: {
  variants: PlasmicLinkPreview__VariantsArgs;
  args: PlasmicLinkPreview__ArgsType;
  overrides: PlasmicLinkPreview__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          url: "https://plasmic.app"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <LinkPreview
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      loadingMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__doDoj
              )}
            >
              {"loading preview..."}
            </div>
          )}
        </DataCtxReader__>
      }
      noPreviewMessage={
        <DataCtxReader__>
          {$ctx => (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pjb3M
              )}
            >
              {"no preview..."}
            </div>
          )}
        </DataCtxReader__>
      }
      url={args.url}
    >
      <DataCtxReader__>
        {$ctx => (
          <div className={classNames(projectcss.all, sty.freeBox__foHkW)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"200px"}
              loading={"lazy"}
              src={$ctx.metadata.image}
            />

            <div className={classNames(projectcss.all, sty.freeBox__zMa)}>
              <div className={classNames(projectcss.all, sty.freeBox___3PjcD)}>
                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.metadata.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l58HV
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.metadata.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.metadata.hostname;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </p>
            </div>
          </div>
        )}
      </DataCtxReader__>
    </LinkPreview>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h5", "p"],
  img: ["img"],
  h5: ["h5"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof LinkPreview;
  img: typeof PlasmicImg__;
  h5: "h5";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinkPreview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinkPreview__VariantsArgs;
    args?: PlasmicLinkPreview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinkPreview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLinkPreview__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinkPreview__ArgProps,
          internalVariantPropNames: PlasmicLinkPreview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinkPreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkPreview";
  } else {
    func.displayName = `PlasmicLinkPreview.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkPreview = Object.assign(
  // Top-level PlasmicLinkPreview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h5: makeNodeComponent("h5"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicLinkPreview
    internalVariantProps: PlasmicLinkPreview__VariantProps,
    internalArgProps: PlasmicLinkPreview__ArgProps
  }
);

export default PlasmicLinkPreview;
/* prettier-ignore-end */
