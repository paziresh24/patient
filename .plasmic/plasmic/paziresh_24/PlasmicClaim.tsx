/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: 5jjwlzFYfMqI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: wRtWBmTexyYF/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicClaim.module.css"; // plasmic-import: 5jjwlzFYfMqI/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: Zop7nqClMso8/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: UYWDQf69XzlE/icon

createPlasmicElementProxy;

export type PlasmicClaim__VariantMembers = {};
export type PlasmicClaim__VariantsArgs = {};
type VariantPropType = keyof PlasmicClaim__VariantsArgs;
export const PlasmicClaim__VariantProps = new Array<VariantPropType>();

export type PlasmicClaim__ArgsType = { information?: any; centers?: any };
type ArgPropType = keyof PlasmicClaim__ArgsType;
export const PlasmicClaim__ArgProps = new Array<ArgPropType>(
  "information",
  "centers"
);

export type PlasmicClaim__OverridesType = {
  root?: Flex__<"section">;
  button?: Flex__<typeof Button>;
};

export interface DefaultClaimProps {
  information?: any;
  centers?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClaim__RenderFunc(props: {
  variants: PlasmicClaim__VariantsArgs;
  args: PlasmicClaim__ArgsType;
  overrides: PlasmicClaim__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    (() => {
      try {
        return $props.centers.every(center => center.status === 2);
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <section
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root
        )}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5J4Mt
          )}
        >
          {
            "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u0627\u0644\u06a9\u06cc\u062a \u0635\u0641\u062d\u0647"
          }
        </div>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          children2={
            <React.Fragment>
              {(() => {
                try {
                  return `من ${$props.information?.display_name} هستم`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u0646 \u062d\u0633\u06cc\u0646 \u062e\u06cc\u0631\u0627\u0646\u062f\u06cc\u0634 \u0647\u0633\u062a\u0645";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.button)}
          onClick={async event => {
            const $steps = {};

            $steps["sendEvent"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return window.paziresh24
                        ?.logger("doctor-profile")
                        .sendEvent({
                          group: "register",
                          type: "doctor-profile",
                          event: {
                            data: {
                              action: "click",
                              current_url: window.location.href
                            }
                          }
                        });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["sendEvent"] != null &&
              typeof $steps["sendEvent"] === "object" &&
              typeof $steps["sendEvent"].then === "function"
            ) {
              $steps["sendEvent"] = await $steps["sendEvent"];
            }

            $steps[
              "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
            ] = true
              ? (() => {
                  const actionArgs = {
                    destination:
                      "https://www.paziresh24.com/home/intermediate-registration-form/"
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps[
                "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
              ] != null &&
              typeof $steps[
                "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
              ] === "object" &&
              typeof $steps[
                "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
              ].then === "function"
            ) {
              $steps[
                "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
              ] = await $steps[
                "goToHttpsWwwPaziresh24ComHomeIntermediateRegistrationForm"
              ];
            }
          }}
          outline={true}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hXQhB
          )}
        >
          {
            "\u0627\u06cc\u0646 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0647\u062f\u0641 \u062a\u0633\u0647\u06cc\u0644 \u062f\u0631 \u06cc\u0627\u0641\u062a\u0646 \u0627\u0639\u0636\u0627\u06cc \u062c\u0627\u0645\u0639\u0647 \u067e\u0632\u0634\u06a9\u06cc \u0648 \u062f\u0631 \u0631\u0627\u0633\u062a\u0627\u06cc \u0627\u062c\u0631\u0627\u06cc \u0642\u0627\u0646\u0648\u0646 \u0627\u0646\u062a\u0634\u0627\u0631 \u0648 \u062f\u0633\u062a\u0631\u0633\u06cc \u0622\u0632\u0627\u062f \u0628\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0635\u0648\u0628 \u0645\u062c\u0644\u0633 \u0634\u0648\u0631\u0627\u06cc \u0627\u0633\u0644\u0627\u0645\u06cc \u0627\u0631\u0627\u0626\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a."
          }
        </div>
      </section>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClaim__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicClaim__VariantsArgs;
    args?: PlasmicClaim__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicClaim__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicClaim__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClaim__ArgProps,
          internalVariantPropNames: PlasmicClaim__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClaim__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClaim";
  } else {
    func.displayName = `PlasmicClaim.${nodeName}`;
  }
  return func;
}

export const PlasmicClaim = Object.assign(
  // Top-level PlasmicClaim renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicClaim
    internalVariantProps: PlasmicClaim__VariantProps,
    internalArgProps: PlasmicClaim__ArgProps
  }
);

export default PlasmicClaim;
/* prettier-ignore-end */
