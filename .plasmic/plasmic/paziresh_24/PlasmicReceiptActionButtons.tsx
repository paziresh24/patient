// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: EifS7TB9I3zC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: wRtWBmTexyYF/component
import Alert from "../../Alert"; // plasmic-import: eDj7YOWE04_a/component
import Dialog from "../../Dialog"; // plasmic-import: 5NUpgw2K0nJD/component
import DoctorCard from "../../DoctorCard"; // plasmic-import: NhMGML-3Q4Pu/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: MB7oMSw7lp7m/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsce5BTtZuA7Fm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ce5BTtZuA7fm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_paziresh_24.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicReceiptActionButtons.module.css"; // plasmic-import: EifS7TB9I3zC/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Zop7nqClMso8/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: UYWDQf69XzlE/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: M2IpxUmMZTqA/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: w8HZEw2oFpPD/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: egi8lj9xHHo3/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: R-D5rrnSi86T/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: iIYeRAdEZp9l/icon

import __lib_axios from "axios";
import { random as __lib_lodash__random } from "lodash";

createPlasmicElementProxy;

export type PlasmicReceiptActionButtons__VariantMembers = {
  type: "visitOnline";
};
export type PlasmicReceiptActionButtons__VariantsArgs = {
  type?: SingleChoiceArg<"visitOnline">;
};
type VariantPropType = keyof PlasmicReceiptActionButtons__VariantsArgs;
export const PlasmicReceiptActionButtons__VariantProps =
  new Array<VariantPropType>("type");

export type PlasmicReceiptActionButtons__ArgsType = {
  bookDetailsData?: any;
  specialities?: any;
  showSubstituteDoctorAlert?: boolean;
  currentUserId?: string;
  illDescription?: boolean;
};
type ArgPropType = keyof PlasmicReceiptActionButtons__ArgsType;
export const PlasmicReceiptActionButtons__ArgProps = new Array<ArgPropType>(
  "bookDetailsData",
  "specialities",
  "showSubstituteDoctorAlert",
  "currentUserId",
  "illDescription"
);

export type PlasmicReceiptActionButtons__OverridesType = {
  root?: Flex__<"div">;
  شرحاولهبمار?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  doctorCard?: Flex__<typeof DoctorCard>;
  dialog3?: Flex__<typeof Dialog>;
  dialog2?: Flex__<typeof Dialog>;
  timer?: Flex__<typeof Timer>;
  form?: Flex__<"form">;
  textarea?: Flex__<"textarea">;
  textInput?: Flex__<typeof TextInput>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultReceiptActionButtonsProps {
  bookDetailsData?: any;
  specialities?: any;
  showSubstituteDoctorAlert?: boolean;
  currentUserId?: string;
  illDescription?: boolean;
  type?: SingleChoiceArg<"visitOnline">;
  className?: string;
}

const $$ = {
  axios: __lib_axios,
  lodash: {
    random: __lib_lodash__random
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReceiptActionButtons__RenderFunc(props: {
  variants: PlasmicReceiptActionButtons__VariantsArgs;
  args: PlasmicReceiptActionButtons__ArgsType;
  overrides: PlasmicReceiptActionButtons__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showSubstituteDoctorAlert: false,
          illDescription: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "delayDoctorButtonTimer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.bookDetailsData.book_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "substituteDoctor",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "substitueDoctorLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "secureCallLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsce5BTtZuA7Fm()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.roottype_visitOnline]: hasVariant($state, "type", "visitOnline")
        }
      )}
      dir={"rtl"}
    >
      {(
        hasVariant($state, "type", "visitOnline")
          ? (() => {
              try {
                return !!$props.bookDetailsData.book_id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : false
      ) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wMEqE, {
            [sty.freeBoxtype_visitOnline__wMEqElbrEa]: hasVariant(
              $state,
              "type",
              "visitOnline"
            )
          })}
        >
          {(
            hasVariant($state, "type", "visitOnline")
              ? (() => {
                  try {
                    return (
                      Date.now() <=
                        ($props.bookDetailsData.book_time + 3 * 24 * 60 * 60) *
                          1000 && !$props.bookDetailsData.is_deleted
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return !$props.bookDetailsData.is_deleted;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gVl5, {
                [sty.freeBoxtype_visitOnline__gVl5LbrEa]: hasVariant(
                  $state,
                  "type",
                  "visitOnline"
                )
              })}
            >
              <Button
                children2={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cZKzi
                      )}
                    >
                      {
                        "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648 \u0628\u0627 \u067e\u0632\u0634\u06a9 \u062f\u0631"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3T58C
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              function channelName(channel) {
                                if (channel === "eitaa") return "ایتا";
                                if (channel === "whatsapp") return "واتساپ";
                              }
                              return channelName(
                                $props.bookDetailsData
                                  .selected_online_visit_channel.type
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.button___4PRmJ)}
                onClick={async event => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return window.paziresh24
                              ?.logger("booking")
                              .sendEvent({
                                group: "link-visit-online",
                                type: $props.bookDetailsData
                                  .selected_online_visit_channel.type
                              });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return $props.bookDetailsData
                                .selected_online_visit_channel.channel_link;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              />

              {(() => {
                try {
                  return $props.bookDetailsData.doctor.online_visit_channels.some(
                    item => item.type === "secure_call"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p3Q8E
                      )}
                    >
                      {
                        "\u062a\u0645\u0627\u0633 \u0628\u0627 \u067e\u0632\u0634\u06a9"
                      }
                    </div>
                  }
                  className={classNames("__wab_instance", sty.button__zsQjd)}
                  loading={(() => {
                    try {
                      return $state.secureCallLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["startLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["secureCallLoading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["startLoading"] != null &&
                      typeof $steps["startLoading"] === "object" &&
                      typeof $steps["startLoading"].then === "function"
                    ) {
                      $steps["startLoading"] = await $steps["startLoading"];
                    }

                    $steps["_function"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.axios
                                .post(
                                  `https://n8n.paziresh24.com/webhook/483835a3-d567-47e6-adfb-fe698f9eb2c6/safe-call/${$props.bookDetailsData.book_id}`,
                                  null,
                                  { withCredentials: true }
                                )
                                .catch(error => {
                                  window.paziresh24?.toast?.error(
                                    error.response?.data?.message ??
                                      "مشکلی پیش آمده است."
                                  );
                                  $state.secureCallLoading = false;
                                  throw new Error(error);
                                });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["_function"] != null &&
                      typeof $steps["_function"] === "object" &&
                      typeof $steps["_function"].then === "function"
                    ) {
                      $steps["_function"] = await $steps["_function"];
                    }

                    $steps["showToast"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.paziresh24?.toast?.success(
                                "درخواست شما با موفقیت ثبت شد."
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["showToast"] != null &&
                      typeof $steps["showToast"] === "object" &&
                      typeof $steps["showToast"].then === "function"
                    ) {
                      $steps["showToast"] = await $steps["showToast"];
                    }

                    $steps["sendEvent"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.paziresh24
                                ?.logger("booking")
                                .sendEvent({
                                  group: "safe-call",
                                  type: "patient",
                                  event: {
                                    action: "receipt",
                                    data: {
                                      referenceCode:
                                        $props.bookDetailsData.reference_code,
                                      doctor: {
                                        centerId:
                                          $props.bookDetailsData.center_id,
                                        name: $props.bookDetailsData?.doctor
                                          ?.doctor_name
                                      },
                                      patient: {
                                        cell: $props.bookDetailsData.patient
                                          .cell,
                                        name: `${$props.bookDetailsData.patient.name} ${$props.bookDetailsData.patient.family}`,
                                        nationalCode:
                                          $props.bookDetailsData.national_code
                                      }
                                    }
                                  }
                                });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["sendEvent"] != null &&
                      typeof $steps["sendEvent"] === "object" &&
                      typeof $steps["sendEvent"].then === "function"
                    ) {
                      $steps["sendEvent"] = await $steps["sendEvent"];
                    }

                    $steps["endLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["secureCallLoading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["endLoading"] != null &&
                      typeof $steps["endLoading"] === "object" &&
                      typeof $steps["endLoading"].then === "function"
                    ) {
                      $steps["endLoading"] = await $steps["endLoading"];
                    }
                  }}
                  outline={true}
                  showStartIcon={true}
                  startIcon={
                    <Icon13Icon
                      className={classNames(projectcss.all, sty.svg__pnuor)}
                      role={"img"}
                    />
                  }
                />
              ) : null}
            </Stack__>
          ) : null}
          {(
            hasVariant($state, "type", "visitOnline")
              ? (() => {
                  try {
                    return (() => {
                      const bookTime = new Date(
                        $props.bookDetailsData.book_time * 1000
                      );
                      const currentTime = new Date();
                      bookTime.setMinutes(bookTime.getMinutes() + 15);
                      return (
                        currentTime > bookTime &&
                        $props.bookDetailsData.book_status !== "visited" &&
                        $props.illDescription
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <Button
              children2={
                <div
                  data-plasmic-name={
                    "\u0634\u0631\u062d\u0627\u0648\u0644\u0647\u0628\u0645\u0627\u0631"
                  }
                  data-plasmic-override={overrides.شرحاولهبمار}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.شرحاولهبمار,
                    {
                      [sty.شرحاولهبمارtype_visitOnline]: hasVariant(
                        $state,
                        "type",
                        "visitOnline"
                      )
                    }
                  )}
                >
                  {
                    "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u0627\u0648\u0644\u06cc\u0647 \u0628\u06cc\u0645\u0627\u0631\u06cc"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__ox71N, {
                [sty.buttontype_visitOnline__ox71NlbrEa]: hasVariant(
                  $state,
                  "type",
                  "visitOnline"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.Goftino.open();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            />
          ) : null}
          {(
            hasVariant($state, "type", "visitOnline")
              ? (() => {
                  try {
                    return (() => {
                      const currentTime = Math.floor(Date.now() / 1000);
                      const bookTime = $props.bookDetailsData.book_time;
                      const oneHourInSeconds = 60 * 60;
                      return (
                        currentTime - bookTime > oneHourInSeconds &&
                        $props.bookDetailsData.book_status != "visited" &&
                        !$props.bookDetailsData.is_deleted &&
                        $props.showSubstituteDoctorAlert
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (() => {
                      const currentTime = Math.floor(Date.now() / 1000);
                      const bookTime = $props.bookDetailsData.book_time;
                      const oneHourInSeconds = 60 * 60;
                      return (
                        currentTime - bookTime > oneHourInSeconds &&
                        $props.bookDetailsData.book_status != "visited" &&
                        !$props.bookDetailsData.is_deleted
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Alert
              body={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uzO0V)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nDjEt
                    )}
                  >
                    {
                      "\u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06f1 \u0633\u0627\u0639\u062a \u0627\u0632 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a\u200c \u0634\u0645\u0627 \u06af\u0630\u0634\u062a\u0647 \u0627\u0633\u062a \u0627\u0645\u0627 \u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u0648\u06cc\u0632\u06cc\u062a \u0634\u0645\u0627 \u0622\u063a\u0627\u0632 \u0646\u0634\u062f\u0647 \u0627\u0633\u062a\u060c \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u0645\u0627\u06cc\u0644 \u0634\u0645\u0627 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0627\u0632 \u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646 \u0646\u0648\u0628\u062a \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u062f."
                    }
                  </div>
                  <Dialog
                    data-plasmic-name={"dialog"}
                    data-plasmic-override={overrides.dialog}
                    body={
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.substitueDoctorLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon17Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hKxT,
                              "loader"
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return (
                              !$state.substitueDoctorLoading &&
                              !!$state.substituteDoctor?.url
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jdJui
                            )}
                          >
                            <DoctorCard
                              data-plasmic-name={"doctorCard"}
                              data-plasmic-override={overrides.doctorCard}
                              aliasTitle={(() => {
                                try {
                                  return $state.substituteDoctor
                                    ?.display_expertise;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              avatar={(() => {
                                try {
                                  return `https://www.paziresh24.com${$state.substituteDoctor?.image}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              className={classNames(
                                "__wab_instance",
                                sty.doctorCard
                              )}
                              displayName={(() => {
                                try {
                                  return $state.substituteDoctor?.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              primaryButtonLoading={(() => {
                                try {
                                  return $state.deleteLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                              primaryButtonName={`لغو نوبت و دریافت نوبت از ${$state.substituteDoctor?.title}`}
                              primaryButtonOnClick={async () => {
                                const $steps = {};

                                $steps["startLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["deleteLoading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["startLoading"] != null &&
                                  typeof $steps["startLoading"] === "object" &&
                                  typeof $steps["startLoading"].then ===
                                    "function"
                                ) {
                                  $steps["startLoading"] = await $steps[
                                    "startLoading"
                                  ];
                                }

                                $steps["removeBook"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const bodyFormData = new FormData();
                                            bodyFormData.append(
                                              "center_id",
                                              $props.bookDetailsData.center_id
                                            );
                                            bodyFormData.append(
                                              "reference_code",
                                              $props.bookDetailsData
                                                .reference_code
                                            );
                                            bodyFormData.append(
                                              "national_code",
                                              $props.bookDetailsData.patient
                                                .national_code
                                            );
                                            return $$.axios.post(
                                              "https://www.paziresh24.com/api/deleteBook",
                                              bodyFormData,
                                              { withCredentials: true }
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["removeBook"] != null &&
                                  typeof $steps["removeBook"] === "object" &&
                                  typeof $steps["removeBook"].then ===
                                    "function"
                                ) {
                                  $steps["removeBook"] = await $steps[
                                    "removeBook"
                                  ];
                                }

                                $steps["sendEvent"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return window.paziresh24
                                            ?.logger("booking")
                                            .sendEvent({
                                              group: "substitute",
                                              type: "remove-book-and-view-booking",
                                              event: {
                                                doctor_id:
                                                  $props.bookDetailsData?.doctor
                                                    ?.id,
                                                slug: $props.bookDetailsData
                                                  ?.doctor?.slug,
                                                server_id:
                                                  $props.bookDetailsData?.doctor
                                                    ?.server_id,
                                                doctor_name:
                                                  $props.bookDetailsData?.doctor
                                                    ?.display_name,
                                                book_id:
                                                  $props.bookDetailsData
                                                    .book_id,
                                                reference_code:
                                                  $props.bookDetailsData
                                                    .reference_code,
                                                book_date:
                                                  $props.bookDetailsData
                                                    .book_time_strings,
                                                substitute_doctor_name:
                                                  $state.substituteDoctor?.title
                                              }
                                            });
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sendEvent"] != null &&
                                  typeof $steps["sendEvent"] === "object" &&
                                  typeof $steps["sendEvent"].then === "function"
                                ) {
                                  $steps["sendEvent"] = await $steps[
                                    "sendEvent"
                                  ];
                                }

                                $steps["goToPage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return (
                                              $state.substituteDoctor.url.replace(
                                                "/dr/",
                                                "/booking/"
                                              ) +
                                              "?centerId=5532&skipTimeSelectStep=true"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }
                              }}
                              rateCount={(() => {
                                try {
                                  return $state.substituteDoctor?.rates_count;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 54;
                                  }
                                  throw e;
                                }
                              })()}
                              satisfaction={(() => {
                                try {
                                  return $state.substituteDoctor?.satisfaction;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 99;
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            <Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3NL0
                                  )}
                                >
                                  {
                                    "\u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u0627\u0632 \u067e\u0632\u0634\u06a9\u0627\u0646 \u062f\u06cc\u06af\u0631"
                                  }
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__y6Ijs
                              )}
                              color={"link"}
                              loading={(() => {
                                try {
                                  return $state.deleteLoading;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["startLoading"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["deleteLoading"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["startLoading"] != null &&
                                  typeof $steps["startLoading"] === "object" &&
                                  typeof $steps["startLoading"].then ===
                                    "function"
                                ) {
                                  $steps["startLoading"] = await $steps[
                                    "startLoading"
                                  ];
                                }

                                $steps["removeBook"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const bodyFormData = new FormData();
                                            bodyFormData.append(
                                              "center_id",
                                              $props.bookDetailsData.center_id
                                            );
                                            bodyFormData.append(
                                              "reference_code",
                                              $props.bookDetailsData
                                                .reference_code
                                            );
                                            bodyFormData.append(
                                              "national_code",
                                              $props.bookDetailsData.patient
                                                .national_code
                                            );
                                            return $$.axios.post(
                                              "https://www.paziresh24.com/api/deleteBook",
                                              bodyFormData,
                                              { withCredentials: true }
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["removeBook"] != null &&
                                  typeof $steps["removeBook"] === "object" &&
                                  typeof $steps["removeBook"].then ===
                                    "function"
                                ) {
                                  $steps["removeBook"] = await $steps[
                                    "removeBook"
                                  ];
                                }

                                $steps["sendEvent"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return window.paziresh24
                                            ?.logger("booking")
                                            .sendEvent({
                                              group: "substitute",
                                              type: "remove-book-and-view-search",
                                              event: {
                                                doctor_id:
                                                  $props.bookDetailsData?.doctor
                                                    ?.id,
                                                slug: $props.bookDetailsData
                                                  ?.doctor?.slug,
                                                server_id:
                                                  $props.bookDetailsData?.doctor
                                                    ?.server_id,
                                                doctor_name:
                                                  $props.bookDetailsData?.doctor
                                                    ?.display_name,
                                                book_id:
                                                  $props.bookDetailsData
                                                    .book_id,
                                                reference_code:
                                                  $props.bookDetailsData
                                                    .reference_code,
                                                book_date:
                                                  $props.bookDetailsData
                                                    .book_time_strings
                                              }
                                            });
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["sendEvent"] != null &&
                                  typeof $steps["sendEvent"] === "object" &&
                                  typeof $steps["sendEvent"].then === "function"
                                ) {
                                  $steps["sendEvent"] = await $steps[
                                    "sendEvent"
                                  ];
                                }

                                $steps["goToPage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        destination: (() => {
                                          try {
                                            return `https://www.paziresh24.com/s/ir/${$props?.specialities?.[0]?.speciality?.taggables?.[0]?.tag?.slug}/?turn_type=consult`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(
                                              destination.substr(1)
                                            )
                                            .scrollIntoView({
                                              behavior: "smooth"
                                            });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToPage"] != null &&
                                  typeof $steps["goToPage"] === "object" &&
                                  typeof $steps["goToPage"].then === "function"
                                ) {
                                  $steps["goToPage"] = await $steps["goToPage"];
                                }
                              }}
                            />
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (
                              !$state.substitueDoctorLoading &&
                              !$state.substituteDoctor?.url
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___63WC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__t2GsO
                              )}
                            >
                              {
                                "\u067e\u0632\u0634\u06a9\u06cc \u067e\u06cc\u062f\u0627 \u0646\u0634\u062f."
                              }
                            </div>
                          </Stack__>
                        ) : null}
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.dialog)}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "dialog",
                      "open"
                    ])}
                    open={generateStateValueProp($state, ["dialog", "open"])}
                    title={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__naG8C
                        )}
                      >
                        {
                          "\u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646"
                        }
                      </div>
                    }
                    trigger={
                      <Button
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hrhsm
                            )}
                          >
                            {
                              "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__q4NA
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["startLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["substitueDoctorLoading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["startLoading"] != null &&
                            typeof $steps["startLoading"] === "object" &&
                            typeof $steps["startLoading"].then === "function"
                          ) {
                            $steps["startLoading"] = await $steps[
                              "startLoading"
                            ];
                          }

                          $steps["sendEvent"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.paziresh24
                                      ?.logger("booking")
                                      .sendEvent({
                                        group: "substitute",
                                        type: "click-substitute-button",
                                        event: {
                                          doctor_id:
                                            $props.bookDetailsData?.doctor?.id,
                                          slug: $props.bookDetailsData?.doctor
                                            ?.slug,
                                          server_id:
                                            $props.bookDetailsData?.doctor
                                              ?.server_id,
                                          doctor_name:
                                            $props.bookDetailsData?.doctor
                                              ?.display_name,
                                          book_id:
                                            $props.bookDetailsData.book_id,
                                          reference_code:
                                            $props.bookDetailsData
                                              .reference_code,
                                          book_date:
                                            $props.bookDetailsData
                                              .book_time_strings
                                        }
                                      });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["sendEvent"] != null &&
                            typeof $steps["sendEvent"] === "object" &&
                            typeof $steps["sendEvent"].then === "function"
                          ) {
                            $steps["sendEvent"] = await $steps["sendEvent"];
                          }

                          $steps["request"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $$.axios
                                      .get(`https://search.paziresh24.com/seapi/v1/search/ir/
${$props?.specialities?.[0]?.speciality?.taggables?.[0]?.tag?.slug}?turn_type=consult`);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["request"] != null &&
                            typeof $steps["request"] === "object" &&
                            typeof $steps["request"].then === "function"
                          ) {
                            $steps["request"] = await $steps["request"];
                          }

                          $steps["_function"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["substituteDoctor"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.request?.data?.search?.result?.filter(
                                      item =>
                                        item.id !==
                                        $props.bookDetailsData?.doctor?.id
                                    )?.[$$.lodash.random(0, 2)]
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["_function"] != null &&
                            typeof $steps["_function"] === "object" &&
                            typeof $steps["_function"].then === "function"
                          ) {
                            $steps["_function"] = await $steps["_function"];
                          }

                          $steps["endLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["substitueDoctorLoading"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["endLoading"] != null &&
                            typeof $steps["endLoading"] === "object" &&
                            typeof $steps["endLoading"].then === "function"
                          ) {
                            $steps["endLoading"] = await $steps["endLoading"];
                          }
                        }}
                      />
                    }
                  />
                </Stack__>
              }
              className={classNames("__wab_instance", sty.alert__auAds, {
                [sty.alerttype_visitOnline__auAdSlbrEa]: hasVariant(
                  $state,
                  "type",
                  "visitOnline"
                )
              })}
              header={"Heads up!"}
              noHeader={true}
              noIcon={true}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__eVlJ3)}>
            {(
              hasVariant($state, "type", "visitOnline")
                ? (() => {
                    try {
                      return (
                        !$props.bookDetailsData.is_deleted &&
                        $props.bookDetailsData.book_status !== "visited"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return !$props.bookDetailsData.is_deleted;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <Dialog
                data-plasmic-name={"dialog3"}
                data-plasmic-override={overrides.dialog3}
                body={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hk0YF)}
                  >
                    <Button
                      children2={"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                      className={classNames("__wab_instance", sty.button__pAnu)}
                      color={"red"}
                      loading={(() => {
                        try {
                          return $state.deleteLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDeleteLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["deleteLoading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteLoading"] != null &&
                          typeof $steps["updateDeleteLoading"] === "object" &&
                          typeof $steps["updateDeleteLoading"].then ===
                            "function"
                        ) {
                          $steps["updateDeleteLoading"] = await $steps[
                            "updateDeleteLoading"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const bodyFormData = new FormData();
                                    bodyFormData.append(
                                      "center_id",
                                      $props.bookDetailsData.center_id
                                    );
                                    bodyFormData.append(
                                      "reference_code",
                                      $props.bookDetailsData.reference_code
                                    );
                                    bodyFormData.append(
                                      "national_code",
                                      $props.bookDetailsData.patient
                                        .national_code
                                    );
                                    return $$.axios.post(
                                      "https://www.paziresh24.com/api/deleteBook",
                                      bodyFormData,
                                      { withCredentials: true }
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["goToDashboardappointments"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "/dashboard/appointments/"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToDashboardappointments"] != null &&
                          typeof $steps["goToDashboardappointments"] ===
                            "object" &&
                          typeof $steps["goToDashboardappointments"].then ===
                            "function"
                        ) {
                          $steps["goToDashboardappointments"] = await $steps[
                            "goToDashboardappointments"
                          ];
                        }
                      }}
                      submitsForm={false}
                    />

                    <Button
                      children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__sRfrr
                      )}
                      color={"red"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialog3Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog3", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog3Open"] != null &&
                          typeof $steps["updateDialog3Open"] === "object" &&
                          typeof $steps["updateDialog3Open"].then === "function"
                        ) {
                          $steps["updateDialog3Open"] = await $steps[
                            "updateDialog3Open"
                          ];
                        }
                      }}
                      outline={true}
                      submitsForm={true}
                    />
                  </Stack__>
                }
                className={classNames("__wab_instance", sty.dialog3, {
                  [sty.dialog3type_visitOnline]: hasVariant(
                    $state,
                    "type",
                    "visitOnline"
                  )
                })}
                onOpenChange={generateStateOnChangeProp($state, [
                  "dialog3",
                  "open"
                ])}
                open={generateStateValueProp($state, ["dialog3", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k6E2L
                    )}
                  >
                    {
                      "\u0622\u06cc\u0627 \u0627\u0632 \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
                    }
                  </div>
                }
                trigger={
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ez2Vp
                        )}
                      >
                        {"\u0644\u063a\u0648 \u0646\u0648\u0628\u062a"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button__jfewW)}
                    color={"red"}
                    outline={true}
                    showStartIcon={true}
                    startIcon={
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg__haohE)}
                        role={"img"}
                      />
                    }
                  />
                }
              />
            ) : null}
          </div>
          {(
            hasVariant($state, "type", "visitOnline")
              ? (() => {
                  try {
                    return (
                      !$props.bookDetailsData.is_deleted &&
                      Date.now() >= $props.bookDetailsData.book_time * 1000 &&
                      Date.now() <=
                        ($props.bookDetailsData.book_time + 3 * 24 * 60 * 60) *
                          1000
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (
                      !$props.bookDetailsData.is_deleted &&
                      Date.now() >= $props.bookDetailsData.book_time * 1000
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4AFlz, {
                [sty.freeBoxtype_visitOnline___4AFlzlbrEa]: hasVariant(
                  $state,
                  "type",
                  "visitOnline"
                )
              })}
            >
              <Dialog
                data-plasmic-name={"dialog2"}
                data-plasmic-override={overrides.dialog2}
                body={
                  <Stack__
                    as={"form"}
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    hasGap={true}
                    action={(() => {
                      try {
                        return `https://apigw.paziresh24.com/v1/support/doctordelayfollowup`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(projectcss.all, sty.form)}
                    method={"POST"}
                    onSubmit={async event => {
                      const $steps = {};

                      $steps["sendEvent"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.paziresh24
                                  ?.logger("booking")
                                  .sendEvent({
                                    group: "support-receipt",
                                    type: "follow-doctor-delay",
                                    event: {
                                      doctor_id:
                                        $props.bookDetailsData?.doctor?.id,
                                      slug: $props.bookDetailsData?.doctor
                                        ?.slug,
                                      server_id:
                                        $props.bookDetailsData?.doctor
                                          ?.server_id,
                                      doctor_name:
                                        $props.bookDetailsData?.doctor
                                          ?.display_name,
                                      book_id: $props.bookDetailsData.book_id,
                                      reference_code:
                                        $props.bookDetailsData.reference_code,
                                      book_date:
                                        $props.bookDetailsData.book_time_strings
                                    }
                                  });
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["sendEvent"] != null &&
                        typeof $steps["sendEvent"] === "object" &&
                        typeof $steps["sendEvent"].then === "function"
                      ) {
                        $steps["sendEvent"] = await $steps["sendEvent"];
                      }
                    }}
                  >
                    <Alert
                      body={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tAi5S
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j0CLt
                            )}
                          >
                            {
                              "\u0628\u0627 \u0627\u0631\u0633\u0627\u0644 \u0627\u06cc\u0646 \u0641\u0631\u0645 \u0634\u0645\u0627 \u062a\u0627\u06cc\u06cc\u062f \u0645\u06cc \u06a9\u0646\u06cc\u062f \u06a9\u0647 \u062f\u0631 \u0632\u0645\u0627\u0646 \u0645\u0642\u0631\u0631 \u062f\u0631 \u067e\u06cc\u0627\u0645\u0631\u0633\u0627\u0646 \u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u062f\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u067e\u06cc\u0627\u0645 \u0627\u0631\u0633\u0627\u0644 \u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f \u0648 \u0647\u0646\u0648\u0632 \u067e\u0627\u0633\u062e\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u06a9\u0631\u062f\u0647 \u0627\u06cc\u062f."
                            }
                          </div>
                        </div>
                      }
                      className={classNames("__wab_instance", sty.alert__h9Pd3)}
                      header={"Heads up!"}
                      noHeader={true}
                      noIcon={true}
                    />

                    <textarea
                      data-plasmic-name={"textarea"}
                      data-plasmic-override={overrides.textarea}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea
                      )}
                      name={"description"}
                      onChange={e => {
                        generateStateOnChangeProp($state, [
                          "textarea",
                          "value"
                        ])(e.target.value);
                      }}
                      placeholder={"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
                      ref={ref => {
                        $refs["textarea"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, ["textarea", "value"]) ??
                        ""
                      }
                    />

                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      name={"book-id"}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      type={"hidden"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <Button
                      children2={
                        "\u0627\u0631\u0633\u0627\u0644 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__qtTyR
                      )}
                      submitsForm={true}
                    />
                  </Stack__>
                }
                className={classNames("__wab_instance", sty.dialog2)}
                onOpenChange={generateStateOnChangeProp($state, [
                  "dialog2",
                  "open"
                ])}
                open={generateStateValueProp($state, ["dialog2", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__grMlf
                    )}
                  >
                    {
                      "\u067e\u06cc\u06af\u06cc\u0631\u06cc \u062a\u0627\u062e\u06cc\u0631 \u067e\u0632\u0634\u06a9"
                    }
                  </div>
                }
                trigger={
                  <Button
                    children2={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bvIk2
                          )}
                        >
                          {
                            "\u067e\u06cc\u06af\u06cc\u0631\u06cc \u062a\u0627\u062e\u06cc\u0631 \u067e\u0632\u0634\u06a9"
                          }
                        </div>
                        {(() => {
                          try {
                            return (() => {
                              const currentTime = Math.floor(Date.now() / 1000);
                              const bookTime = $props.bookDetailsData.book_time;
                              const oneHourLater = bookTime + 3600;
                              const isTimeLessThanOneHourLater =
                                currentTime < oneHourLater;
                              return isTimeLessThanOneHourLater;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2Jvpq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const countdown =
                                      new Date(
                                        $props.bookDetailsData.book_time *
                                          1000 +
                                          3600000
                                      ) - Date.now();
                                    const minutes = Math.floor(
                                      (countdown / 1000 / 60) % 60
                                    )
                                      .toString()
                                      .padStart(2, "0");
                                    const seconds = Math.floor(
                                      (countdown / 1000) % 60
                                    )
                                      .toString()
                                      .padStart(2, "0");
                                    return `${minutes}:${seconds}`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                        <Timer
                          data-plasmic-name={"timer"}
                          data-plasmic-override={overrides.timer}
                          className={classNames("__wab_instance", sty.timer)}
                          intervalSeconds={1}
                          isRunning={(() => {
                            try {
                              return (() => {
                                const currentTime = Math.floor(
                                  Date.now() / 1000
                                );
                                const bookTime =
                                  $props.bookDetailsData.book_time;
                                const oneHourLater = bookTime + 3600;
                                const isTimeLessThanOneHourLater =
                                  currentTime < oneHourLater;
                                return isTimeLessThanOneHourLater;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()}
                          onTick={async () => {
                            const $steps = {};

                            $steps["updateDelayDoctorButtonTimer"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["delayDoctorButtonTimer"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDelayDoctorButtonTimer"] != null &&
                              typeof $steps["updateDelayDoctorButtonTimer"] ===
                                "object" &&
                              typeof $steps["updateDelayDoctorButtonTimer"]
                                .then === "function"
                            ) {
                              $steps["updateDelayDoctorButtonTimer"] =
                                await $steps["updateDelayDoctorButtonTimer"];
                            }
                          }}
                          runWhileEditing={true}
                        />
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.button__wub4Z)}
                    color={"sand"}
                    isDisabled={(() => {
                      try {
                        return (() => {
                          const currentTime = Math.floor(Date.now() / 1000);
                          const bookTime = $props.bookDetailsData.book_time;
                          const oneHourLater = bookTime + 3600;
                          const isTimeLessThanOneHourLater =
                            currentTime < oneHourLater;
                          return isTimeLessThanOneHourLater;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    outline={true}
                    startIcon={
                      <Icon13Icon
                        className={classNames(projectcss.all, sty.svg__cOl6F)}
                        role={"img"}
                      />
                    }
                  />
                }
              />

              <Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6BkhJ
                    )}
                  >
                    {
                      "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0627\u06cc\u0646 \u0646\u0648\u0628\u062a"
                    }
                  </div>
                }
                className={classNames("__wab_instance", sty.button__eZm5G)}
                color={"sand"}
                onClick={async event => {
                  const $steps = {};

                  $steps["sendEvent"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return window.paziresh24
                              ?.logger("booking")
                              .sendEvent({
                                group: "support-receipt",
                                type: "request-support-book",
                                event: {
                                  doctor_id: $props.bookDetailsData?.doctor?.id,
                                  slug: $props.bookDetailsData?.doctor?.slug,
                                  server_id:
                                    $props.bookDetailsData?.doctor?.server_id,
                                  doctor_name:
                                    $props.bookDetailsData?.doctor
                                      ?.display_name,
                                  book_id: $props.bookDetailsData.book_id,
                                  reference_code:
                                    $props.bookDetailsData.reference_code,
                                  book_date:
                                    $props.bookDetailsData.book_time_strings
                                }
                              });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["sendEvent"] != null &&
                    typeof $steps["sendEvent"] === "object" &&
                    typeof $steps["sendEvent"].then === "function"
                  ) {
                    $steps["sendEvent"] = await $steps["sendEvent"];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `https://support.paziresh24.com/ticketbyturn/?book-id=${$props.bookDetailsData.book_id}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                outline={true}
                startIcon={
                  <Icon13Icon
                    className={classNames(projectcss.all, sty.svg__gaLj3)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          ) : null}
        </Stack__>
      ) : null}
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml, {
          [sty.embedHtmltype_visitOnline]: hasVariant(
            $state,
            "type",
            "visitOnline"
          )
        })}
        code={
          '<script type="text/javascript">\r\n  !function(){var i="c2z4yd",a=window,d=document;function g(){var g=d.createElement("script"),s="https://www.goftino.com/widget/"+i,l=localStorage.getItem("goftino_"+i);g.async=!0,g.src=l?s+"?o="+l:s;d.getElementsByTagName("head")[0].appendChild(g);}"complete"===d.readyState?g():a.attachEvent?a.attachEvent("onload",g):a.addEventListener("load",g,!1);}();\r\n\r\nwindow.addEventListener(\'goftino_ready\', function () {\r\n    Goftino.setWidget({\r\n        hasIcon: false,\r\n        hasSound: false,\r\n    })\r\n})\r\n</script>\r\n'
        }
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "\u0634\u0631\u062d\u0627\u0648\u0644\u0647\u0628\u0645\u0627\u0631",
    "dialog",
    "doctorCard",
    "dialog3",
    "dialog2",
    "timer",
    "form",
    "textarea",
    "textInput",
    "embedHtml"
  ],
  شرحاولهبمار: [
    "\u0634\u0631\u062d\u0627\u0648\u0644\u0647\u0628\u0645\u0627\u0631"
  ],
  dialog: ["dialog", "doctorCard"],
  doctorCard: ["doctorCard"],
  dialog3: ["dialog3"],
  dialog2: ["dialog2", "timer", "form", "textarea", "textInput"],
  timer: ["timer"],
  form: ["form", "textarea", "textInput"],
  textarea: ["textarea"],
  textInput: ["textInput"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  شرحاولهبمار: "div";
  dialog: typeof Dialog;
  doctorCard: typeof DoctorCard;
  dialog3: typeof Dialog;
  dialog2: typeof Dialog;
  timer: typeof Timer;
  form: "form";
  textarea: "textarea";
  textInput: typeof TextInput;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReceiptActionButtons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReceiptActionButtons__VariantsArgs;
    args?: PlasmicReceiptActionButtons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReceiptActionButtons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReceiptActionButtons__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReceiptActionButtons__ArgProps,
          internalVariantPropNames: PlasmicReceiptActionButtons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReceiptActionButtons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReceiptActionButtons";
  } else {
    func.displayName = `PlasmicReceiptActionButtons.${nodeName}`;
  }
  return func;
}

export const PlasmicReceiptActionButtons = Object.assign(
  // Top-level PlasmicReceiptActionButtons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    شرحاولهبمار: makeNodeComponent(
      "\u0634\u0631\u062d\u0627\u0648\u0644\u0647\u0628\u0645\u0627\u0631"
    ),
    dialog: makeNodeComponent("dialog"),
    doctorCard: makeNodeComponent("doctorCard"),
    dialog3: makeNodeComponent("dialog3"),
    dialog2: makeNodeComponent("dialog2"),
    timer: makeNodeComponent("timer"),
    form: makeNodeComponent("form"),
    textarea: makeNodeComponent("textarea"),
    textInput: makeNodeComponent("textInput"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicReceiptActionButtons
    internalVariantProps: PlasmicReceiptActionButtons__VariantProps,
    internalArgProps: PlasmicReceiptActionButtons__ArgProps
  }
);

export default PlasmicReceiptActionButtons;
/* prettier-ignore-end */
