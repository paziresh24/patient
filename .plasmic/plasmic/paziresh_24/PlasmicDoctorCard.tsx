/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYgiKJB9Yi7CUB81stQBK
// Component: NhMGML-3Q4Pu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import Button from "../../Button"; // plasmic-import: wRtWBmTexyYF/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: iDYgiKJB9Yi7CUB81stQBK/projectcss
import sty from "./PlasmicDoctorCard.module.css"; // plasmic-import: NhMGML-3Q4Pu/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: x8zKpWpxm06O/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: rNlcBlswymjS/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: Zop7nqClMso8/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: UYWDQf69XzlE/icon

createPlasmicElementProxy;

export type PlasmicDoctorCard__VariantMembers = {};
export type PlasmicDoctorCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoctorCard__VariantsArgs;
export const PlasmicDoctorCard__VariantProps = new Array<VariantPropType>();

export type PlasmicDoctorCard__ArgsType = {
  avatar?: string;
  displayName?: string;
  aliasTitle?: string;
  primaryButtonName?: string;
  satisfaction?: number;
  rateCount?: number;
  primaryButtonOnClick?: () => void;
  primaryButtonLoading?: boolean;
};
type ArgPropType = keyof PlasmicDoctorCard__ArgsType;
export const PlasmicDoctorCard__ArgProps = new Array<ArgPropType>(
  "avatar",
  "displayName",
  "aliasTitle",
  "primaryButtonName",
  "satisfaction",
  "rateCount",
  "primaryButtonOnClick",
  "primaryButtonLoading"
);

export type PlasmicDoctorCard__OverridesType = {
  root?: Flex__<"div">;
  avatar?: Flex__<typeof Avatar>;
  button?: Flex__<typeof Button>;
};

export interface DefaultDoctorCardProps {
  avatar?: string;
  displayName?: string;
  aliasTitle?: string;
  primaryButtonName?: string;
  satisfaction?: number;
  rateCount?: number;
  primaryButtonOnClick?: () => void;
  primaryButtonLoading?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDoctorCard__RenderFunc(props: {
  variants: PlasmicDoctorCard__VariantsArgs;
  args: PlasmicDoctorCard__ArgsType;
  overrides: PlasmicDoctorCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          primaryButtonLoading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lci0J)}
      >
        <Avatar
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames("__wab_instance", sty.avatar)}
          name={(() => {
            try {
              return $props.displayName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          ring={"green"}
          src={(() => {
            try {
              return $props.avatar;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__og6Ex)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l8CNf
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.displayName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9GnLe
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.aliasTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7Uq1)}
          >
            <Icon14Icon
              className={classNames(projectcss.all, sty.svg__tNyjc)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fgZGe
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `${$props.satisfaction}٪`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2EvF8
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `(${$props.rateCount} نظر)`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cxTcz)}
      >
        <Icon18Icon
          className={classNames(projectcss.all, sty.svg__fufn)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qqwLc
          )}
        >
          {
            "\u062a\u0636\u0645\u06cc\u0646 \u0628\u0627\u0632\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
          }
        </div>
      </Stack__>
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wB6R
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.primaryButtonName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Button";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        }
        className={classNames("__wab_instance", sty.button)}
        loading={(() => {
          try {
            return $props.primaryButtonLoading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["runPrimaryButtonOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["primaryButtonOnClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runPrimaryButtonOnClick"] != null &&
            typeof $steps["runPrimaryButtonOnClick"] === "object" &&
            typeof $steps["runPrimaryButtonOnClick"].then === "function"
          ) {
            $steps["runPrimaryButtonOnClick"] = await $steps[
              "runPrimaryButtonOnClick"
            ];
          }
        }}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar", "button"],
  avatar: ["avatar"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoctorCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoctorCard__VariantsArgs;
    args?: PlasmicDoctorCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoctorCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDoctorCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoctorCard__ArgProps,
          internalVariantPropNames: PlasmicDoctorCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoctorCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoctorCard";
  } else {
    func.displayName = `PlasmicDoctorCard.${nodeName}`;
  }
  return func;
}

export const PlasmicDoctorCard = Object.assign(
  // Top-level PlasmicDoctorCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicDoctorCard
    internalVariantProps: PlasmicDoctorCard__VariantProps,
    internalArgProps: PlasmicDoctorCard__ArgProps
  }
);

export default PlasmicDoctorCard;
/* prettier-ignore-end */
