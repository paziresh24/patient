// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: z1k0-vbkFtby

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Collapsible from "../../Collapsible"; // plasmic-import: kYXN54tCkD2S/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Schedules from "../../Schedules"; // plasmic-import: Mt_WMP6AHSGv/component

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicAddressesCard.module.css"; // plasmic-import: z1k0-vbkFtby/css

import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: _jSTfORV1qH0/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: S_uiUWqNHHLN/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: gJeK2OqgBb2l/icon

createPlasmicElementProxy;

export type PlasmicAddressesCard__VariantMembers = {};
export type PlasmicAddressesCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicAddressesCard__VariantsArgs;
export const PlasmicAddressesCard__VariantProps = new Array<VariantPropType>();

export type PlasmicAddressesCard__ArgsType = {
  title?: string;
  address?: string;
  city?: string;
  displayNumberArray?: any;
  map?: any;
  centerType?: string;
  description?: string;
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
  slug?: string;
};
type ArgPropType = keyof PlasmicAddressesCard__ArgsType;
export const PlasmicAddressesCard__ArgProps = new Array<ArgPropType>(
  "title",
  "address",
  "city",
  "displayNumberArray",
  "map",
  "centerType",
  "description",
  "centerId",
  "userCenterId",
  "centerName",
  "slug"
);

export type PlasmicAddressesCard__OverridesType = {
  root?: Flex__<"div">;
  collapsible?: Flex__<typeof Collapsible>;
  schedules?: Flex__<typeof Schedules>;
};

export interface DefaultAddressesCardProps {
  title?: string;
  address?: string;
  city?: string;
  displayNumberArray?: any;
  map?: any;
  centerType?: string;
  description?: string;
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
  slug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAddressesCard__RenderFunc(props: {
  variants: PlasmicAddressesCard__VariantsArgs;
  args: PlasmicAddressesCard__ArgsType;
  overrides: PlasmicAddressesCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___0OFb)}>
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__vhgEz)}
          component={Link}
          href={(() => {
            try {
              return `/${$props.centerType === "office" ? "dr" : "center"}/${
                $props.slug
              }`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z27Ck
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u0648\u0644\u0627\u06cc\u062a \u062f\u0627\u0645\u063a\u0627\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </PlasmicLink__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__a2ONy)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2AcXj
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__zUOp6
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.city;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "-";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              }
              <React.Fragment>{" - "}</React.Fragment>
              {
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.span__uaLGb
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.address;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "-";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </Stack__>
      </div>
      {(() => {
        try {
          return !!$props.description;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Collapsible
          data-plasmic-name={"collapsible"}
          data-plasmic-override={overrides.collapsible}
          className={classNames("__wab_instance", sty.collapsible)}
          color={"#F8FAFC"}
          defaultMaxHeight={"70px"}
          slot={
            <div className={classNames(projectcss.all, sty.freeBox__rX9UK)}>
              <Button
                children2={"\u0628\u0633\u062a\u0646"}
                className={classNames("__wab_instance", sty.button__wrjkp)}
                color={"text"}
                showStartIcon={true}
                startIcon={
                  <ChevronDownIcon
                    className={classNames(projectcss.all, sty.svg__qf2Mr)}
                    role={"img"}
                  />
                }
              />
            </div>
          }
          slot2={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wvxjo)}
            >
              <Icon13Icon
                className={classNames(projectcss.all, sty.svg__yK0C5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zjhiU
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec non est felis. Curabitur nibh velit, vehicula quis orci at, scelerisque malesuada sem. Ut tincidunt nisl nunc. Fusce in mollis enim, sodales porta eros. Sed quis pharetra tortor. Donec pulvinar bibendum ligula ultricies rutrum. Morbi ultricies ipsum vel augue venenatis interdum. Sed sodales cursus lectus, eget congue purus facilisis id. Suspendisse nec vestibulum justo, quis tincidunt justo. Morbi a nibh pharetra, vestibulum orci nec, varius magna. Duis blandit eros urna, sed iaculis tortor consequat non. Donec finibus, diam faucibus sodales condimentum, leo arcu egestas mauris, vitae sollicitudin leo nulla ut nisi.\nNam metus eros, sagittis sed rhoncus vitae, eleifend nec augue. Proin vulputate nulla nec leo ullamcorper scelerisque. Duis id massa sem. Proin hendrerit risus vitae tincidunt viverra. Donec augue risus, condimentum in metus eleifend, luctus hendrerit lacus. Quisque congue nibh a turpis tempor sodales. Aenean pretium non libero non pharetra. Nulla gravida odio metus, non accumsan dolor cursus et. Aenean consequat augue quis felis mattis consequat. Phasellus dapibus mauris in tincidunt tristique. In nec dui vitae sem facilisis egestas. Proin sollicitudin nec enim a mollis. Aenean a odio quis ipsum ultrices condimentum at id massa. Vestibulum eu magna enim. Etiam a mauris rutrum leo posuere consectetur.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__j4Sfd)}>
            <Button
              children2={"\u0627\u062f\u0627\u0645\u0647"}
              className={classNames("__wab_instance", sty.button__yE2)}
              color={"text"}
              showStartIcon={true}
              startIcon={
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__wsIc9)}
                  role={"img"}
                />
              }
            />
          </div>
        </Collapsible>
      ) : null}
      <Schedules
        data-plasmic-name={"schedules"}
        data-plasmic-override={overrides.schedules}
        centerId={(() => {
          try {
            return $props.centerId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        centerName={(() => {
          try {
            return $props.centerName;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.schedules)}
        userCenterId={(() => {
          try {
            return $props.userCenterId;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(() => {
        try {
          return $props.displayNumberArray.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.displayNumberArray;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___01Rr4
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "0335444";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                className={classNames("__wab_instance", sty.button__fveAq)}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (location.href = `tel:${currentItem}`);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                outline={true}
                showStartIcon={true}
                startIcon={
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__ar77M)}
                    role={"img"}
                  />
                }
              />
            );
          })
        : null}
      <PlasmicLink__
        className={classNames(projectcss.all, projectcss.a, sty.link__udEo9)}
        component={Link}
        href={(() => {
          try {
            return `https://www.google.com/maps?daddr=${$props.map.lat},${$props.map.lon}&amp;ll&openInBrowser=1`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
        target={"_blank"}
      >
        {(() => {
          try {
            return !!$props.map.lat && !!$props.map.lon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nOaWr
                )}
              >
                {
                  "\u0645\u0634\u0627\u0647\u062f\u0647 \u062f\u0631 \u0646\u0642\u0634\u0647 \u0648 \u0645\u0633\u06cc\u0631\u06cc\u0627\u0628\u06cc"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__dxuVg)}
            outline={true}
            showStartIcon={true}
            startIcon={
              <Icon12Icon
                className={classNames(projectcss.all, sty.svg__vWeUa)}
                role={"img"}
              />
            }
          />
        ) : null}
      </PlasmicLink__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "collapsible", "schedules"],
  collapsible: ["collapsible"],
  schedules: ["schedules"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  collapsible: typeof Collapsible;
  schedules: typeof Schedules;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAddressesCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAddressesCard__VariantsArgs;
    args?: PlasmicAddressesCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAddressesCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAddressesCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAddressesCard__ArgProps,
          internalVariantPropNames: PlasmicAddressesCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAddressesCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAddressesCard";
  } else {
    func.displayName = `PlasmicAddressesCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAddressesCard = Object.assign(
  // Top-level PlasmicAddressesCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapsible: makeNodeComponent("collapsible"),
    schedules: makeNodeComponent("schedules"),

    // Metadata about props expected for PlasmicAddressesCard
    internalVariantProps: PlasmicAddressesCard__VariantProps,
    internalArgProps: PlasmicAddressesCard__ArgProps
  }
);

export default PlasmicAddressesCard;
/* prettier-ignore-end */
