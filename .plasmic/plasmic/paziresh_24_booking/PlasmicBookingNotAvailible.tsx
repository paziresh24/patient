/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: HI9wFtACqPcK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BookingAlert from "../../BookingAlert"; // plasmic-import: Yao9Qgv8d_YU/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicBookingNotAvailible.module.css"; // plasmic-import: HI9wFtACqPcK/css

createPlasmicElementProxy;

export type PlasmicBookingNotAvailible__VariantMembers = {
  error: "error";
};
export type PlasmicBookingNotAvailible__VariantsArgs = {
  error?: SingleBooleanChoiceArg<"error">;
};
type VariantPropType = keyof PlasmicBookingNotAvailible__VariantsArgs;
export const PlasmicBookingNotAvailible__VariantProps =
  new Array<VariantPropType>("error");

export type PlasmicBookingNotAvailible__ArgsType = {
  nextFreeTurn?: string;
  message?: string;
};
type ArgPropType = keyof PlasmicBookingNotAvailible__ArgsType;
export const PlasmicBookingNotAvailible__ArgProps = new Array<ArgPropType>(
  "nextFreeTurn",
  "message"
);

export type PlasmicBookingNotAvailible__OverridesType = {
  root?: Flex__<"div">;
  bookingAlert?: Flex__<typeof BookingAlert>;
  freeBox?: Flex__<"div">;
};

export interface DefaultBookingNotAvailibleProps {
  nextFreeTurn?: string;
  message?: string;
  error?: SingleBooleanChoiceArg<"error">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingNotAvailible__RenderFunc(props: {
  variants: PlasmicBookingNotAvailible__VariantsArgs;
  args: PlasmicBookingNotAvailible__ArgsType;
  overrides: PlasmicBookingNotAvailible__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          message:
            "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "error",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.error
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        sty.root,
        { [sty.rooterror]: hasVariant($state, "error", "error") }
      )}
    >
      <BookingAlert
        data-plasmic-name={"bookingAlert"}
        data-plasmic-override={overrides.bookingAlert}
        className={classNames("__wab_instance", sty.bookingAlert)}
        message={(() => {
          try {
            return $props.message;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(() => {
        try {
          return !!$props.nextFreeTurn;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gjrke
            )}
          >
            {
              "\u0632\u0645\u0627\u0646 \u0627\u0639\u0644\u0627\u0645 \u0646\u0648\u0628\u062a \u0647\u0627\u06cc \u062c\u062f\u06cc\u062f:"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__thzw1
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.nextFreeTurn;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0627\u0645\u0631\u0648\u0632 6:00 \u0639\u0635\u0631";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "bookingAlert", "freeBox"],
  bookingAlert: ["bookingAlert"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  bookingAlert: typeof BookingAlert;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingNotAvailible__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingNotAvailible__VariantsArgs;
    args?: PlasmicBookingNotAvailible__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingNotAvailible__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookingNotAvailible__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingNotAvailible__ArgProps,
          internalVariantPropNames: PlasmicBookingNotAvailible__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingNotAvailible__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingNotAvailible";
  } else {
    func.displayName = `PlasmicBookingNotAvailible.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingNotAvailible = Object.assign(
  // Top-level PlasmicBookingNotAvailible renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bookingAlert: makeNodeComponent("bookingAlert"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicBookingNotAvailible
    internalVariantProps: PlasmicBookingNotAvailible__VariantProps,
    internalArgProps: PlasmicBookingNotAvailible__ArgProps
  }
);

export default PlasmicBookingNotAvailible;
/* prettier-ignore-end */
