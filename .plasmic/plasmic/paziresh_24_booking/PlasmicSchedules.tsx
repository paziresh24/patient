// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: Mt_WMP6AHSGv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Select from "../../Select"; // plasmic-import: D_54gPqAw9rb/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicSchedules.module.css"; // plasmic-import: Mt_WMP6AHSGv/css

import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon
import XIcon from "../fragment_icons/icons/PlasmicIcon__X"; // plasmic-import: zb1oqVXdrxPK/icon

createPlasmicElementProxy;

export type PlasmicSchedules__VariantMembers = {};
export type PlasmicSchedules__VariantsArgs = {};
type VariantPropType = keyof PlasmicSchedules__VariantsArgs;
export const PlasmicSchedules__VariantProps = new Array<VariantPropType>();

export type PlasmicSchedules__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
};
type ArgPropType = keyof PlasmicSchedules__ArgsType;
export const PlasmicSchedules__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "centerName"
);

export type PlasmicSchedules__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  button?: Flex__<typeof Button>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  serviceSelect?: Flex__<typeof Select>;
};

export interface DefaultSchedulesProps {
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSchedules__RenderFunc(props: {
  variants: PlasmicSchedules__VariantsArgs;
  args: PlasmicSchedules__ArgsType;
  overrides: PlasmicSchedules__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "serviceSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.schedules[0].services[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"schedules"}
            errorDisplay={
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uNfGv)}
                  >
                    <XIcon
                      className={classNames(projectcss.all, sty.svg__dKT8)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t71AX
                      )}
                    >
                      {
                        "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9"
                      }
                    </div>
                  </Stack__>
                )}
              </DataCtxReader__>
            }
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vpiFh)}
                  >
                    <Icon17Icon
                      className={classNames(
                        projectcss.all,
                        sty.svg__mzAE,
                        "loader"
                      )}
                      role={"img"}
                    />
                  </div>
                )}
              </DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            previewErrorDisplay={false}
            previewSpinner={false}
            url={(() => {
              try {
                return `https://apigw.paziresh24.com/v1/centeral-booking/schedules?center_id=${
                  $props.centerId
                }&user_center_id=${$props.userCenterId}&type=${
                  window.location.host === "www.paziresh24.com" ? "7" : "1"
                }`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qv9Rk)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.serviceSelect
                      ),
                      onChange: (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "serviceSelect",
                          "value"
                        ])(eventArgs[0]);
                      },
                      options: (() => {
                        try {
                          return $ctx.schedules[0].services.map(item => ({
                            value: item.id,
                            label: item.title
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })(),
                      value: generateStateValueProp($state, [
                        "serviceSelect",
                        "value"
                      ])
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "serviceSelect.value",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return $ctx.schedules[0].services[0].id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <Select
                        data-plasmic-name={"serviceSelect"}
                        data-plasmic-override={overrides.serviceSelect}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          { english: "saturday", persian: "شنبه" },
                          { english: "sunday", persian: "یک‌شنبه" },
                          { english: "monday", persian: "دوشنبه" },
                          { english: "tuesday", persian: "سه‌شنبه" },
                          { english: "wednesday", persian: "چهارشنبه" },
                          { english: "thursday", persian: "پنج‌شنبه" },
                          { english: "friday", persian: "جمعه" }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentDay = __plasmic_item_0;
                    const currentDayIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fgI1
                        )}
                        key={currentDayIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cBbSj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x42En
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentDay.persian;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0646\u0628\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nvcct
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uTljt
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      $ctx.schedules[0].services
                                        .find(
                                          item =>
                                            item.id ===
                                            $state.serviceSelect.value
                                        )
                                        .schedules.filter(
                                          item =>
                                            item.day === currentDay.english
                                        )
                                        .map(
                                          item =>
                                            `${
                                              item.from_date
                                                ? `(از تاریخ ${new Date(
                                                    item.from_date
                                                  ).toLocaleDateString(
                                                    "fa-IR-u-nu-latn"
                                                  )} تا ${new Date(
                                                    item.to_date
                                                  ).toLocaleDateString(
                                                    "fa-IR-u-nu-latn"
                                                  )}) `
                                                : ""
                                            }${item.from_hour.slice(
                                              0,
                                              5
                                            )} - ${item.to_hour.slice(0, 5)}`
                                        )
                                        .join("<br/>") || "---"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0646\u062f\u0627\u0631\u062f";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </Stack__>
              )}
            </DataCtxReader__>
          </DataFetcher>
        }
        className={classNames("__wab_instance", sty.dialog)}
        onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hsVOo
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `برنامه کاری پزشک در ${$props.centerName}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        }
        trigger={
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jtSe
                )}
              >
                {
                  "\u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button)}
            color={"text"}
            showStartIcon={true}
            startIcon={
              <CalendarIcon
                className={classNames(projectcss.all, sty.svg__ieOcA)}
                role={"img"}
              />
            }
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dialog", "button", "httpRestApiFetcher", "serviceSelect"],
  dialog: ["dialog", "button", "httpRestApiFetcher", "serviceSelect"],
  button: ["button"],
  httpRestApiFetcher: ["httpRestApiFetcher", "serviceSelect"],
  serviceSelect: ["serviceSelect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  button: typeof Button;
  httpRestApiFetcher: typeof DataFetcher;
  serviceSelect: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSchedules__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSchedules__VariantsArgs;
    args?: PlasmicSchedules__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSchedules__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSchedules__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSchedules__ArgProps,
          internalVariantPropNames: PlasmicSchedules__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSchedules__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSchedules";
  } else {
    func.displayName = `PlasmicSchedules.${nodeName}`;
  }
  return func;
}

export const PlasmicSchedules = Object.assign(
  // Top-level PlasmicSchedules renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    button: makeNodeComponent("button"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    serviceSelect: makeNodeComponent("serviceSelect"),

    // Metadata about props expected for PlasmicSchedules
    internalVariantProps: PlasmicSchedules__VariantProps,
    internalArgProps: PlasmicSchedules__ArgProps
  }
);

export default PlasmicSchedules;
/* prettier-ignore-end */
