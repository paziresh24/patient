// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: Fbeul3tjKryJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BookingNotAvailible from "../../BookingNotAvailible"; // plasmic-import: HI9wFtACqPcK/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicBookingService.module.css"; // plasmic-import: Fbeul3tjKryJ/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: F6NtoqXS-KGV/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: h4zwk9afbjOg/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: -AY9Va77BKdx/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: GpRXIA-nw2yX/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicBookingService__VariantMembers = {
  isUnAvailable: "isUnAvailable";
};
export type PlasmicBookingService__VariantsArgs = {
  isUnAvailable?: SingleBooleanChoiceArg<"isUnAvailable">;
};
type VariantPropType = keyof PlasmicBookingService__VariantsArgs;
export const PlasmicBookingService__VariantProps = new Array<VariantPropType>(
  "isUnAvailable"
);

export type PlasmicBookingService__ArgsType = {
  title?: string;
  price?: string;
  isOnlineType?: boolean;
  content?: any;
  buttonContent?: string;
  onlineVisitChannelTypes?: any;
  onClick?: () => void;
  errorMessage?: string;
  groupExpertiseSlug?: string;
};
type ArgPropType = keyof PlasmicBookingService__ArgsType;
export const PlasmicBookingService__ArgProps = new Array<ArgPropType>(
  "title",
  "price",
  "isOnlineType",
  "content",
  "buttonContent",
  "onlineVisitChannelTypes",
  "onClick",
  "errorMessage",
  "groupExpertiseSlug"
);

export type PlasmicBookingService__OverridesType = {
  root?: Flex__<"div">;
  bookingNotAvailible?: Flex__<typeof BookingNotAvailible>;
};

export interface DefaultBookingServiceProps {
  title?: string;
  price?: string;
  isOnlineType?: boolean;
  content?: any;
  buttonContent?: string;
  onlineVisitChannelTypes?: any;
  onClick?: () => void;
  errorMessage?: string;
  groupExpertiseSlug?: string;
  isUnAvailable?: SingleBooleanChoiceArg<"isUnAvailable">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingService__RenderFunc(props: {
  variants: PlasmicBookingService__VariantsArgs;
  args: PlasmicBookingService__ArgsType;
  overrides: PlasmicBookingService__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "\u0639\u0646\u0648\u0627\u0646",
          isOnlineType: false,
          onlineVisitChannelTypes: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isUnAvailable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isUnAvailable
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisUnAvailable]: hasVariant(
            $state,
            "isUnAvailable",
            "isUnAvailable"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___8Ob6X, {
          [sty.freeBoxisUnAvailable___8Ob6XhFZbh]: hasVariant(
            $state,
            "isUnAvailable",
            "isUnAvailable"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tiTvf, {
            [sty.freeBoxisUnAvailable__tiTvfhFZbh]: hasVariant(
              $state,
              "isUnAvailable",
              "isUnAvailable"
            )
          })}
        >
          {(() => {
            try {
              return $props.isOnlineType;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg__bWleb)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return !$props.isOnlineType;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg__iWAH)}
              role={"img"}
            />
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aii7R
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0634\u0648\u06cc\u062f";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
        {(() => {
          try {
            return $props.isOnlineType;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a6L5T
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `${new Intl.NumberFormat().format(
                    +$props.price / 10
                  )} تومان`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sLNk, {
          [sty.freeBoxisUnAvailable__sLNKhFZbh]: hasVariant(
            $state,
            "isUnAvailable",
            "isUnAvailable"
          )
        })}
      >
        <BookingNotAvailible
          data-plasmic-name={"bookingNotAvailible"}
          data-plasmic-override={overrides.bookingNotAvailible}
          className={classNames("__wab_instance", sty.bookingNotAvailible, {
            [sty.bookingNotAvailibleisUnAvailable]: hasVariant(
              $state,
              "isUnAvailable",
              "isUnAvailable"
            )
          })}
          message={(() => {
            try {
              return $props.errorMessage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vwfrp, {
            [sty.freeBoxisUnAvailable__vwfrphFZbh]: hasVariant(
              $state,
              "isUnAvailable",
              "isUnAvailable"
            )
          })}
        >
          {(() => {
            try {
              return $props.isOnlineType;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__i3Vg8, {
                [sty.freeBoxisUnAvailable__i3Vg8HFZbh]: hasVariant(
                  $state,
                  "isUnAvailable",
                  "isUnAvailable"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hu6Gh
                )}
              >
                {
                  "\u0648\u06cc\u0632\u06cc\u062a \u0622\u0646\u0644\u0627\u06cc\u0646 \u062f\u0631 \u067e\u06cc\u0627\u0645 \u0631\u0633\u0627\u0646:"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wvHqn)}
              >
                {(() => {
                  try {
                    return $props.onlineVisitChannelTypes.includes("eitaa");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c4S89)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__lqj0N)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tbHak
                      )}
                    >
                      {"\u0627\u06cc\u062a\u0627"}
                    </div>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return $props.onlineVisitChannelTypes.includes("whatsapp");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fLmTn)}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__yZv2T)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1I5BR
                      )}
                    >
                      {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                    </div>
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
          ) : null}
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.content;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d6I1J,
                  {
                    [sty.textisUnAvailable__d6I1JhFZbh]: hasVariant(
                      $state,
                      "isUnAvailable",
                      "isUnAvailable"
                    )
                  }
                )}
                key={currentIndex}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return currentItem.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062a\u0636\u0645\u06cc\u0646 \u0628\u0627\u0632\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
            );
          })}
        </Stack__>
        {(
          hasVariant($state, "isUnAvailable", "isUnAvailable") ? false : true
        ) ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___25V2L,
                  {
                    [sty.textisUnAvailable___25V2LhFZbh]: hasVariant(
                      $state,
                      "isUnAvailable",
                      "isUnAvailable"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.buttonContent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0634\u0631\u0648\u0639 \u0648\u06cc\u0632\u06cc\u062a \u0628\u0627";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            className={classNames("__wab_instance", sty.button___9Jriu, {
              [sty.buttonisUnAvailable___9JriuhFZbh]: hasVariant(
                $state,
                "isUnAvailable",
                "isUnAvailable"
              )
            })}
            endIcon={
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__motgm, {
                  [sty.svgisUnAvailable__motgmhFZbh]: hasVariant(
                    $state,
                    "isUnAvailable",
                    "isUnAvailable"
                  )
                })}
                role={"img"}
              />
            }
            link={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? (() => {
                    try {
                      return `https://www.paziresh24.com/s/ir/${$props.groupExpertiseSlug}/?turn_type=consult`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            onClick={async event => {
              const $steps = {};

              $steps["runOnClick"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["onClick"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runOnClick"] != null &&
                typeof $steps["runOnClick"] === "object" &&
                typeof $steps["runOnClick"].then === "function"
              ) {
                $steps["runOnClick"] = await $steps["runOnClick"];
              }
            }}
            showEndIcon={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? undefined
                : true
            }
            space={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? undefined
                : true
            }
          />
        ) : null}
        {(
          hasVariant($state, "isUnAvailable", "isUnAvailable") ? true : false
        ) ? (
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___83Exu,
                  {
                    [sty.textisUnAvailable___83ExUhFZbh]: hasVariant(
                      $state,
                      "isUnAvailable",
                      "isUnAvailable"
                    )
                  }
                )}
              >
                {
                  "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u0627\u0632 \u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__zQOd4, {
              [sty.buttonisUnAvailable__zQOd4HFZbh]: hasVariant(
                $state,
                "isUnAvailable",
                "isUnAvailable"
              )
            })}
            endIcon={
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__afK3W, {
                  [sty.svgisUnAvailable__afK3WhFZbh]: hasVariant(
                    $state,
                    "isUnAvailable",
                    "isUnAvailable"
                  )
                })}
                role={"img"}
              />
            }
            link={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? (() => {
                    try {
                      return `https://www.paziresh24.com/s/ir/${$props.groupExpertiseSlug}/?turn_type=consult`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            onClick={async event => {
              const $steps = {};
            }}
            showEndIcon={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? undefined
                : true
            }
            space={
              hasVariant($state, "isUnAvailable", "isUnAvailable")
                ? undefined
                : true
            }
          />
        ) : null}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "bookingNotAvailible"],
  bookingNotAvailible: ["bookingNotAvailible"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  bookingNotAvailible: typeof BookingNotAvailible;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingService__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingService__VariantsArgs;
    args?: PlasmicBookingService__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingService__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookingService__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingService__ArgProps,
          internalVariantPropNames: PlasmicBookingService__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingService__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingService";
  } else {
    func.displayName = `PlasmicBookingService.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingService = Object.assign(
  // Top-level PlasmicBookingService renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bookingNotAvailible: makeNodeComponent("bookingNotAvailible"),

    // Metadata about props expected for PlasmicBookingService
    internalVariantProps: PlasmicBookingService__VariantProps,
    internalArgProps: PlasmicBookingService__ArgProps
  }
);

export default PlasmicBookingService;
/* prettier-ignore-end */
