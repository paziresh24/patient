// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: fpdRSzutXHoq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: -32RqKI9mlfN/codeComponent
import BookingService from "../../BookingService"; // plasmic-import: Fbeul3tjKryJ/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import CenterList from "../../CenterList"; // plasmic-import: 4Y4p7schjdHw/component
import CenterListService from "../../CenterListService"; // plasmic-import: oxKPcE6Kc5i3/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicBookingServiceList.module.css"; // plasmic-import: fpdRSzutXHoq/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: elhCY5BOnBh-/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicBookingServiceList__VariantMembers = {};
export type PlasmicBookingServiceList__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookingServiceList__VariantsArgs;
export const PlasmicBookingServiceList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBookingServiceList__ArgsType = {
  slug?: string;
};
type ArgPropType = keyof PlasmicBookingServiceList__ArgsType;
export const PlasmicBookingServiceList__ArgProps = new Array<ArgPropType>(
  "slug"
);

export type PlasmicBookingServiceList__OverridesType = {
  root?: Flex__<"div">;
  getFullProfileData?: Flex__<typeof ApiRequest>;
  apiRequest?: Flex__<typeof ApiRequest>;
  sideEffect?: Flex__<typeof SideEffect>;
  centerListDialog?: Flex__<typeof Dialog>;
  centerList?: Flex__<typeof CenterList>;
  serviceListDialog?: Flex__<typeof Dialog>;
  centerListService?: Flex__<typeof CenterListService>;
  mashhadBookingDialog?: Flex__<typeof Dialog>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  applicationDialog?: Flex__<typeof Dialog>;
};

export interface DefaultBookingServiceListProps {
  slug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingServiceList__RenderFunc(props: {
  variants: PlasmicBookingServiceList__VariantsArgs;
  args: PlasmicBookingServiceList__ArgsType;
  overrides: PlasmicBookingServiceList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getFullProfileData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getFullProfileData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getFullProfileData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "centerListDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "serviceListDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedCenter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mashhadBookingDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "applicationDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"getFullProfileData"}
        data-plasmic-override={overrides.getFullProfileData}
        className={classNames("__wab_instance", sty.getFullProfileData)}
        errorDisplay={null}
        loadingDisplay={
          <Icon15Icon
            className={classNames(projectcss.all, sty.svg__o8Sgz)}
            role={"img"}
          />
        }
        method={"GET"}
        onError={generateStateOnChangeProp($state, [
          "getFullProfileData",
          "error"
        ])}
        onLoading={generateStateOnChangeProp($state, [
          "getFullProfileData",
          "loading"
        ])}
        onSuccess={generateStateOnChangeProp($state, [
          "getFullProfileData",
          "data"
        ])}
        url={(() => {
          try {
            return `https://api.paziresh24.com/doctor/v1/full-profile/${$props.slug}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <ApiRequest
          data-plasmic-name={"apiRequest"}
          data-plasmic-override={overrides.apiRequest}
          className={classNames("__wab_instance", sty.apiRequest)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xdYt
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <Icon15Icon
              className={classNames(projectcss.all, sty.svg__oQMsp)}
              role={"img"}
            />
          }
          method={"GET"}
          onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
          onLoading={generateStateOnChangeProp($state, [
            "apiRequest",
            "loading"
          ])}
          onSuccess={generateStateOnChangeProp($state, ["apiRequest", "data"])}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/v1/feedbacks/average-waiting-time?slug=${$props.slug}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gTjnf)}
          >
            {(() => {
              try {
                return $state.getFullProfileData.data.data.centers?.some(
                  center => center.id == 5532 && center.is_active
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <BookingService
                buttonContent={(() => {
                  try {
                    return `شروع ویزیت با ${$state.getFullProfileData.data.data.display_name}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.bookingService__iHeOr
                )}
                content={(() => {
                  try {
                    return (() => {
                      const waitingTime = $state.apiRequest?.data?.result?.find(
                        center => center.center_id == 5532
                      )?.waiting_time_title;
                      return [
                        { text: "تضمین بازپرداخت مبلغ ویزیت در صورت نارضایتی" },
                        { text: "امکان برقراری تماس با این پزشک وجود دارد." },
                        {
                          text: "تا <b>3 روز</b> می‌توانید هر سوالی دارید از پزشک بپرسید"
                        },
                        !!waitingTime && {
                          text: `میانگین زمان انتظار تا ویزیت: <b>${waitingTime}</b>`
                        }
                      ];
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                errorMessage={(() => {
                  try {
                    return `درحال حاضر نوبت جدیدی برای ${$state.getFullProfileData.data.data.display_name} تعریف نشده است.`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                isOnlineType={true}
                onClick={async () => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `/booking/${
                                $props.slug
                              }?centerId=5532&skipTimeSelectStep=true&serviceId=${
                                $state.getFullProfileData?.data?.data?.centers?.find(
                                  center => center?.id == 5532
                                )?.services?.[0]?.id
                              }`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                onlineVisitChannelTypes={(() => {
                  try {
                    return $state.getFullProfileData.data.data
                      .online_visit_channel_types;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                price={(() => {
                  try {
                    return $state.getFullProfileData.data.data.centers?.find(
                      center => center.id == 5532
                    )?.services?.[0]?.free_price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                title={
                  "\u0647\u0645\u06cc\u0646 \u0627\u0644\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0634\u0648\u06cc\u062f"
                }
              />
            ) : null}
            {(() => {
              try {
                return (
                  $state.getFullProfileData.data.data.centers?.filter(
                    center => center.id !== 5532
                  )?.length !== 0
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <BookingService
                buttonContent={
                  "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a"
                }
                className={classNames(
                  "__wab_instance",
                  sty.bookingService___5MdRf
                )}
                content={(() => {
                  try {
                    return (() => {
                      const waitingTime =
                        $state.apiRequest?.data?.result?.filter(
                          center => center.center_id !== 5532
                        )[0]?.waiting_time_title;
                      return [
                        { text: "امکان دریافت زودترین نوبت" },
                        !!waitingTime && {
                          text: `میانگین زمان انتظار تا ویزیت: <b>${waitingTime}</b>`
                        }
                      ];
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        content: [
                          {
                            text: "\u0627\u0645\u06a9\u0627\u0646 \u062f\u0631\u06cc\u0627\u0641\u062a \u0632\u0648\u062f\u062a\u0631\u06cc\u0646 \u0646\u0648\u0628\u062a"
                          }
                        ]
                      };
                    }
                    throw e;
                  }
                })()}
                errorMessage={(() => {
                  try {
                    return `درحال حاضر نوبت جدیدی برای ${$state.getFullProfileData.data.data.display_name} تعریف نشده است.`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                groupExpertiseSlug={(() => {
                  try {
                    return $state.getFullProfileData.data.data
                      .group_expertises[0].en_slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                isOnlineType={false}
                isUnAvailable={(() => {
                  try {
                    return (
                      $state.getFullProfileData.data.data.centers.filter(
                        center => center.id != 5532 && center.is_active
                      ).length == 0
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async () => {
                  const $steps = {};

                  $steps["goToPage"] =
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length == 1 &&
                    !$state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].is_only_in_app.status &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].services.length == 1 &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].is_center != "mashhad"
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/booking/${$props.slug}/?centerId=${
                                  $state.getFullProfileData.data.data.centers.find(
                                    center => center.id != 5532
                                  ).id
                                }&serviceId=${
                                  $state.getFullProfileData.data.data.centers.find(
                                    center => center.id != 5532
                                  ).services[0].id
                                }`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }

                  $steps["updateSelectedCenter"] =
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length == 1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedCenter"]
                            },
                            operation: 0,
                            value:
                              $state.getFullProfileData.data.data.centers.filter(
                                center => center.id != 5532
                              )[0].id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateSelectedCenter"] != null &&
                    typeof $steps["updateSelectedCenter"] === "object" &&
                    typeof $steps["updateSelectedCenter"].then === "function"
                  ) {
                    $steps["updateSelectedCenter"] = await $steps[
                      "updateSelectedCenter"
                    ];
                  }

                  $steps["updateMashhadBookingDialogOpen"] =
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].is_center == "mashhad" &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length == 1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mashhadBookingDialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateMashhadBookingDialogOpen"] != null &&
                    typeof $steps["updateMashhadBookingDialogOpen"] ===
                      "object" &&
                    typeof $steps["updateMashhadBookingDialogOpen"].then ===
                      "function"
                  ) {
                    $steps["updateMashhadBookingDialogOpen"] = await $steps[
                      "updateMashhadBookingDialogOpen"
                    ];
                  }

                  $steps["updateApplicationDialogOpen"] =
                    !$ctx["Fragment/PWA"].isPWAUser &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].is_only_in_app.status &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length == 1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["applicationDialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateApplicationDialogOpen"] != null &&
                    typeof $steps["updateApplicationDialogOpen"] === "object" &&
                    typeof $steps["updateApplicationDialogOpen"].then ===
                      "function"
                  ) {
                    $steps["updateApplicationDialogOpen"] = await $steps[
                      "updateApplicationDialogOpen"
                    ];
                  }

                  $steps["updateServiceListDialogOpen"] =
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    )[0].services.length > 1 &&
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length == 1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["serviceListDialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateServiceListDialogOpen"] != null &&
                    typeof $steps["updateServiceListDialogOpen"] === "object" &&
                    typeof $steps["updateServiceListDialogOpen"].then ===
                      "function"
                  ) {
                    $steps["updateServiceListDialogOpen"] = await $steps[
                      "updateServiceListDialogOpen"
                    ];
                  }

                  $steps["updateDialogOpen"] =
                    $state.getFullProfileData.data.data.centers.filter(
                      center => center.id != 5532
                    ).length > 1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["centerListDialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateDialogOpen"] != null &&
                    typeof $steps["updateDialogOpen"] === "object" &&
                    typeof $steps["updateDialogOpen"].then === "function"
                  ) {
                    $steps["updateDialogOpen"] = await $steps[
                      "updateDialogOpen"
                    ];
                  }
                }}
                price={(() => {
                  try {
                    return $state.getFullProfileData.data.data.centers?.find(
                      center => center.id == 5532
                    )?.services?.[0]?.free_price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                title={
                  "\u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0648 \u0645\u0631\u0627\u062c\u0639\u0647 \u062d\u0636\u0648\u0631\u06cc"
                }
              />
            ) : null}
          </Stack__>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return console.log($state.getFullProfileData.data);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />
        </ApiRequest>
      </ApiRequest>
      <Dialog
        data-plasmic-name={"centerListDialog"}
        data-plasmic-override={overrides.centerListDialog}
        body={
          <CenterList
            data-plasmic-name={"centerList"}
            data-plasmic-override={overrides.centerList}
            centers={(() => {
              try {
                return (() => {
                  return $state.getFullProfileData.data.data.centers
                    ?.filter(center => center.id != 5532)
                    .map(item => {
                      const freeturnsInfo = item.freeturns_info?.[0];
                      const selectedWaitingTime =
                        $state.apiRequest.data?.result?.find(
                          waitingTime => waitingTime.center_id === item.id
                        )?.waiting_time_title;
                      return {
                        id: item.id,
                        name: item.name,
                        address: item.address,
                        freeTurn: item.freeturn_text,
                        isActive: item.is_active,
                        type: item.center_type == 1 ? "office" : "hospital",
                        phoneNumbers: item.display_number_array,
                        nextFreeTurn: freeturnsInfo?.availalbe_time_text,
                        waitingTime: selectedWaitingTime,
                        isAvailable:
                          item.services.length === 1 && !!freeturnsInfo
                            ? freeturnsInfo?.available_time <=
                              Math.floor(new Date().getTime() / 1000)
                            : true
                      };
                    });
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.centerList)}
            onClick={async id => {
              const $steps = {};

              $steps["updateSelectedCenter"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selectedCenter"]
                      },
                      operation: 0,
                      value: id
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelectedCenter"] != null &&
                typeof $steps["updateSelectedCenter"] === "object" &&
                typeof $steps["updateSelectedCenter"].then === "function"
              ) {
                $steps["updateSelectedCenter"] = await $steps[
                  "updateSelectedCenter"
                ];
              }

              $steps["updateMashhadBookingDialogOpen"] =
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_center === "mashhad"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["mashhadBookingDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateMashhadBookingDialogOpen"] != null &&
                typeof $steps["updateMashhadBookingDialogOpen"] === "object" &&
                typeof $steps["updateMashhadBookingDialogOpen"].then ===
                  "function"
              ) {
                $steps["updateMashhadBookingDialogOpen"] = await $steps[
                  "updateMashhadBookingDialogOpen"
                ];
              }

              $steps["goToPage"] =
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).services.length === 1 &&
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_center !== "mashhad" &&
                !$state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_only_in_app.status
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/booking/${
                              $props.slug
                            }/?centerId=${id}&serviceId=${
                              $state.getFullProfileData.data.data.centers.find(
                                center => center.id === id
                              ).services[0].id
                            }`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }

              $steps["updateServiceListDialogOpen"] =
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).services.length > 1 &&
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_center !== "mashhad"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["serviceListDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateServiceListDialogOpen"] != null &&
                typeof $steps["updateServiceListDialogOpen"] === "object" &&
                typeof $steps["updateServiceListDialogOpen"].then === "function"
              ) {
                $steps["updateServiceListDialogOpen"] = await $steps[
                  "updateServiceListDialogOpen"
                ];
              }

              $steps["updateApplicationDialogOpen"] =
                !$ctx["Fragment/PWA"].isPWAUser &&
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_only_in_app.status &&
                $state.getFullProfileData.data.data.centers.find(
                  center => center.id === id
                ).is_center != "mashhad"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["applicationDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateApplicationDialogOpen"] != null &&
                typeof $steps["updateApplicationDialogOpen"] === "object" &&
                typeof $steps["updateApplicationDialogOpen"].then === "function"
              ) {
                $steps["updateApplicationDialogOpen"] = await $steps[
                  "updateApplicationDialogOpen"
                ];
              }
            }}
          />
        }
        className={classNames("__wab_instance", sty.centerListDialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "centerListDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["centerListDialog", "open"])}
        title={"\u0627\u0646\u062a\u062e\u0627\u0628 \u0645\u0631\u06a9\u0632"}
        trigger={null}
      />

      <Dialog
        data-plasmic-name={"serviceListDialog"}
        data-plasmic-override={overrides.serviceListDialog}
        body={
          <CenterListService
            data-plasmic-name={"centerListService"}
            data-plasmic-override={overrides.centerListService}
            className={classNames("__wab_instance", sty.centerListService)}
            onClick={async id => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return `/booking/${$props.slug}/?centerId=${$state.selectedCenter}&serviceId=${id}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            serviceData={(() => {
              try {
                return $state.getFullProfileData.data.data.centers
                  .find(center => center.id === $state.selectedCenter)
                  .services.map(service => ({
                    id: service.id,
                    title: service.alias_title
                  }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        }
        className={classNames("__wab_instance", sty.serviceListDialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "serviceListDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["serviceListDialog", "open"])}
        title={"\u0627\u0646\u062a\u062e\u0627\u0628 \u062e\u062f\u0645\u062a"}
        trigger={null}
      />

      <Dialog
        data-plasmic-name={"mashhadBookingDialog"}
        data-plasmic-override={overrides.mashhadBookingDialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__y0RsR)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jb5K1
              )}
            >
              {
                "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0627\u06cc\u0646 \u067e\u0632\u0634\u06a9 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f! \u0634\u0645\u0627 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0628\u0631 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u0632\u06cc\u0631\u060c \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0633\u0627\u06cc\u062a \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0639\u0644\u0648\u0645 \u067e\u0632\u0634\u06a9\u06cc \u0645\u0634\u0647\u062f \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f."
              }
            </div>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={"https://nobat.mums.ac.ir/AppointmentSite/"}
              platform={"nextjs"}
              target={"_blank"}
            >
              <Button
                children2={
                  "\u0648\u0631\u0648\u062f \u0628\u0647 \u0633\u0627\u06cc\u062a \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0639\u0644\u0648\u0645 \u067e\u0632\u0634\u06a9\u06cc \u0645\u0634\u0647\u062f"
                }
                className={classNames("__wab_instance", sty.button__nl513)}
              />
            </PlasmicLink__>
          </Stack__>
        }
        className={classNames("__wab_instance", sty.mashhadBookingDialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "mashhadBookingDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["mashhadBookingDialog", "open"])}
        title={
          "\u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0648 \u062d\u0636\u0648\u0631\u06cc (\u063a\u06cc\u0631\u0641\u0639\u0627\u0644)"
        }
        trigger={null}
      />

      <Dialog
        data-plasmic-name={"applicationDialog"}
        data-plasmic-override={overrides.applicationDialog}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hmcX)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hu845
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.getFullProfileData.data.data.centers.find(
                      center => center.id === $state.selectedCenter
                    ).is_only_in_app.message;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0646\u0648\u0628\u062a\u200c\u062f\u0647\u06cc \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0627\u06cc\u0646 \u067e\u0632\u0634\u06a9 \u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f! \u0634\u0645\u0627 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0628\u0631 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u0632\u06cc\u0631\u060c \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0633\u0627\u06cc\u062a \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u0639\u0644\u0648\u0645 \u067e\u0632\u0634\u06a9\u06cc \u0645\u0634\u0647\u062f \u0646\u0648\u0628\u062a \u062e\u0648\u062f \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Button
              children2={
                " \u062f\u0627\u0646\u0644\u0648\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646"
              }
              className={classNames("__wab_instance", sty.button__iMhm9)}
              onClick={async event => {
                const $steps = {};

                $steps["goToApp"] = true
                  ? (() => {
                      const actionArgs = { destination: "/app" };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToApp"] != null &&
                  typeof $steps["goToApp"] === "object" &&
                  typeof $steps["goToApp"].then === "function"
                ) {
                  $steps["goToApp"] = await $steps["goToApp"];
                }
              }}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.applicationDialog)}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "applicationDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["applicationDialog", "open"])}
        title={
          "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646"
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "getFullProfileData",
    "apiRequest",
    "sideEffect",
    "centerListDialog",
    "centerList",
    "serviceListDialog",
    "centerListService",
    "mashhadBookingDialog",
    "link",
    "applicationDialog"
  ],
  getFullProfileData: ["getFullProfileData", "apiRequest", "sideEffect"],
  apiRequest: ["apiRequest", "sideEffect"],
  sideEffect: ["sideEffect"],
  centerListDialog: ["centerListDialog", "centerList"],
  centerList: ["centerList"],
  serviceListDialog: ["serviceListDialog", "centerListService"],
  centerListService: ["centerListService"],
  mashhadBookingDialog: ["mashhadBookingDialog", "link"],
  link: ["link"],
  applicationDialog: ["applicationDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getFullProfileData: typeof ApiRequest;
  apiRequest: typeof ApiRequest;
  sideEffect: typeof SideEffect;
  centerListDialog: typeof Dialog;
  centerList: typeof CenterList;
  serviceListDialog: typeof Dialog;
  centerListService: typeof CenterListService;
  mashhadBookingDialog: typeof Dialog;
  link: "a";
  applicationDialog: typeof Dialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingServiceList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingServiceList__VariantsArgs;
    args?: PlasmicBookingServiceList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingServiceList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookingServiceList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingServiceList__ArgProps,
          internalVariantPropNames: PlasmicBookingServiceList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingServiceList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingServiceList";
  } else {
    func.displayName = `PlasmicBookingServiceList.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingServiceList = Object.assign(
  // Top-level PlasmicBookingServiceList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getFullProfileData: makeNodeComponent("getFullProfileData"),
    apiRequest: makeNodeComponent("apiRequest"),
    sideEffect: makeNodeComponent("sideEffect"),
    centerListDialog: makeNodeComponent("centerListDialog"),
    centerList: makeNodeComponent("centerList"),
    serviceListDialog: makeNodeComponent("serviceListDialog"),
    centerListService: makeNodeComponent("centerListService"),
    mashhadBookingDialog: makeNodeComponent("mashhadBookingDialog"),
    link: makeNodeComponent("link"),
    applicationDialog: makeNodeComponent("applicationDialog"),

    // Metadata about props expected for PlasmicBookingServiceList
    internalVariantProps: PlasmicBookingServiceList__VariantProps,
    internalArgProps: PlasmicBookingServiceList__ArgProps
  }
);

export default PlasmicBookingServiceList;
/* prettier-ignore-end */
