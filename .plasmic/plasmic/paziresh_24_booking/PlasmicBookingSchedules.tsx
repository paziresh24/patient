/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8NbkXymcLwvMUC2yXeRrWk
// Component: Mt_WMP6AHSGv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: -32RqKI9mlfN/codeComponent
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Popover } from "@plasmicpkgs/radix-ui";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 8NbkXymcLwvMUC2yXeRrWk/projectcss
import sty from "./PlasmicBookingSchedules.module.css"; // plasmic-import: Mt_WMP6AHSGv/css

import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon
import XIcon from "../fragment_icons/icons/PlasmicIcon__X"; // plasmic-import: zb1oqVXdrxPK/icon

createPlasmicElementProxy;

export type PlasmicBookingSchedules__VariantMembers = {};
export type PlasmicBookingSchedules__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookingSchedules__VariantsArgs;
export const PlasmicBookingSchedules__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBookingSchedules__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
};
type ArgPropType = keyof PlasmicBookingSchedules__ArgsType;
export const PlasmicBookingSchedules__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "centerName"
);

export type PlasmicBookingSchedules__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  dialog?: Flex__<typeof Dialog>;
  popoverCore?: Flex__<typeof Popover>;
};

export interface DefaultBookingSchedulesProps {
  centerId?: string;
  userCenterId?: string;
  centerName?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingSchedules__RenderFunc(props: {
  variants: PlasmicBookingSchedules__VariantsArgs;
  args: PlasmicBookingSchedules__ArgsType;
  overrides: PlasmicBookingSchedules__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "service",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/v1/centeral-booking/schedules?center_id=${
              $props.centerId
            }&user_center_id=${$props.userCenterId}&type=${
              typeof window != "undefined" &&
              window.location.host.includes(".paziresh24.com")
                ? "7"
                : "1"
            }`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(() => {
        try {
          return !!$state.apiRequest.data[0]?.center_id;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <React.Fragment>
              {(() => {
                try {
                  return $state.apiRequest.data.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qv9Rk)}
                >
                  <Popover
                    data-plasmic-name={"popoverCore"}
                    data-plasmic-override={overrides.popoverCore}
                    align={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "center"
                        : "start"
                    }
                    className={classNames("__wab_instance", sty.popoverCore)}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "popoverCore",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, [
                      "popoverCore",
                      "open"
                    ])}
                    overlay={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kShU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xYhmM
                          )}
                        >
                          {
                            "\u062e\u062f\u0645\u062a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.apiRequest.data[0].services;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nuEbc
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Button";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__hIyj4
                              )}
                              color={"text"}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateService"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["service"]
                                        },
                                        operation: 0,
                                        value: currentItem.id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateService"] != null &&
                                  typeof $steps["updateService"] === "object" &&
                                  typeof $steps["updateService"].then ===
                                    "function"
                                ) {
                                  $steps["updateService"] = await $steps[
                                    "updateService"
                                  ];
                                }

                                $steps["updatePopoverCoreOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["popoverCore", "open"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updatePopoverCoreOpen"] != null &&
                                  typeof $steps["updatePopoverCoreOpen"] ===
                                    "object" &&
                                  typeof $steps["updatePopoverCoreOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updatePopoverCoreOpen"] =
                                    await $steps["updatePopoverCoreOpen"];
                                }
                              }}
                              size={"compact"}
                              space={true}
                            />
                          );
                        })}
                      </Stack__>
                    }
                    side={"bottom"}
                    themeResetClass={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_fragment_design_system_css.plasmic_tokens
                    )}
                  >
                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__voqEo
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.service
                                    ? $ctx.schedules[0].services.find(
                                        item => item.id === $state.service
                                      ).title
                                    : $ctx.schedules[0].services[0].title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Button";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.service
                                    ? $state.apiRequest.data[0].services.find(
                                        item => item.id === $state.service
                                      ).title
                                    : $state.apiRequest.data[0].services[0]
                                        .title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Button";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__exzpj
                      )}
                      color={"softBlue"}
                      endIcon={
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4WLk1
                          )}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                      space={true}
                    />
                  </Popover>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [
                          { english: "saturday", persian: "شنبه" },
                          { english: "sunday", persian: "یک‌شنبه" },
                          { english: "monday", persian: "دوشنبه" },
                          { english: "tuesday", persian: "سه‌شنبه" },
                          { english: "wednesday", persian: "چهارشنبه" },
                          { english: "thursday", persian: "پنج‌شنبه" },
                          { english: "friday", persian: "جمعه" }
                        ];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentDay = __plasmic_item_0;
                    const currentDayIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fgI1
                        )}
                        key={currentDayIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cBbSj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x42En
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentDay.persian;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0646\u0628\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nvcct
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uTljt
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return (
                                        $ctx.schedules[0].services
                                          .find(
                                            item =>
                                              item.id ===
                                              ($state.service ||
                                                $ctx.schedules[0].services[0]
                                                  .id)
                                          )
                                          .schedules.filter(
                                            item =>
                                              item.day === currentDay.english
                                          )
                                          .map(
                                            item =>
                                              `${
                                                item.from_date
                                                  ? `(از تاریخ ${new Date(
                                                      item.from_date
                                                    ).toLocaleDateString(
                                                      "fa-IR-u-nu-latn"
                                                    )} تا ${new Date(
                                                      item.to_date
                                                    ).toLocaleDateString(
                                                      "fa-IR-u-nu-latn"
                                                    )}) `
                                                  : ""
                                              }${item.from_hour.slice(
                                                0,
                                                5
                                              )} - ${item.to_hour.slice(0, 5)}`
                                          )
                                          .join("<br/>") || "---"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u062f\u0627\u0631\u062f";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            ) : (
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return (
                                        $state.apiRequest?.data?.[0].services
                                          .find(
                                            item =>
                                              item.id ===
                                              ($state.service ||
                                                $state.apiRequest?.data?.[0]
                                                  .services[0].id)
                                          )
                                          .schedules.filter(
                                            item =>
                                              item.day === currentDay.english
                                          )
                                          .map(
                                            item =>
                                              `${
                                                item.from_date
                                                  ? `(از تاریخ ${new Date(
                                                      item.from_date
                                                    ).toLocaleDateString(
                                                      "fa-IR-u-nu-latn"
                                                    )} تا ${new Date(
                                                      item.to_date
                                                    ).toLocaleDateString(
                                                      "fa-IR-u-nu-latn"
                                                    )}) `
                                                  : ""
                                              }${item.from_hour.slice(
                                                0,
                                                5
                                              )} - ${item.to_hour.slice(0, 5)}`
                                          )
                                          .join("<br/>") || "---"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u062f\u0627\u0631\u062f";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.data.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xhyyH)}
                >
                  <InfoIcon
                    className={classNames(projectcss.all, sty.svg__psuCv)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6L5Zm
                    )}
                  >
                    {
                      "\u067e\u0632\u0634\u06a9 \u062f\u0631 \u0627\u06cc\u0646 \u0645\u0631\u06a9\u0632 \u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u0646\u062f\u0627\u0631\u062f."
                    }
                  </div>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__vpiFh)}>
                  <Icon17Icon
                    className={classNames(
                      projectcss.all,
                      sty.svg__mzAE,
                      "loader"
                    )}
                    role={"img"}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return !!$state.apiRequest.error;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uNfGv)}
                >
                  <XIcon
                    className={classNames(projectcss.all, sty.svg__dKT8)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t71AX
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9"
                    }
                  </div>
                </Stack__>
              ) : null}
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.dialog)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hsVOo
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `برنامه کاری در ${$props.centerName}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc \u067e\u0632\u0634\u06a9";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          trigger={
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jtSe
                  )}
                >
                  {
                    "\u0628\u0631\u0646\u0627\u0645\u0647 \u06a9\u0627\u0631\u06cc"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__o3I8D)}
              outline={
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              }
              showStartIcon={true}
              startIcon={
                <CalendarIcon
                  className={classNames(projectcss.all, sty.svg__ieOcA)}
                  role={"img"}
                />
              }
            />
          }
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "dialog", "popoverCore"],
  apiRequest: ["apiRequest"],
  dialog: ["dialog", "popoverCore"],
  popoverCore: ["popoverCore"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  dialog: typeof Dialog;
  popoverCore: typeof Popover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookingSchedules__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookingSchedules__VariantsArgs;
    args?: PlasmicBookingSchedules__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookingSchedules__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBookingSchedules__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingSchedules__ArgProps,
          internalVariantPropNames: PlasmicBookingSchedules__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingSchedules__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingSchedules";
  } else {
    func.displayName = `PlasmicBookingSchedules.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingSchedules = Object.assign(
  // Top-level PlasmicBookingSchedules renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    dialog: makeNodeComponent("dialog"),
    popoverCore: makeNodeComponent("popoverCore"),

    // Metadata about props expected for PlasmicBookingSchedules
    internalVariantProps: PlasmicBookingSchedules__VariantProps,
    internalArgProps: PlasmicBookingSchedules__ArgProps
  }
);

export default PlasmicBookingSchedules;
/* prettier-ignore-end */
