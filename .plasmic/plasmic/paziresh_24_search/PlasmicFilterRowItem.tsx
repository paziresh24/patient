// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: gbTY0L-vUhOv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterRowItem.module.css"; // plasmic-import: gbTY0L-vUhOv/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: jX-MgKdWVzUV/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: E9NGWfCxi3aB/icon

createPlasmicElementProxy;

export type PlasmicFilterRowItem__VariantMembers = {
  active: "active";
};
export type PlasmicFilterRowItem__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};
type VariantPropType = keyof PlasmicFilterRowItem__VariantsArgs;
export const PlasmicFilterRowItem__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicFilterRowItem__ArgsType = {
  label?: string;
  onSelect?: (key: string) => void;
  filterKey?: string;
  onRemove?: (key: string) => void;
  icon?: string;
};
type ArgPropType = keyof PlasmicFilterRowItem__ArgsType;
export const PlasmicFilterRowItem__ArgProps = new Array<ArgPropType>(
  "label",
  "onSelect",
  "filterKey",
  "onRemove",
  "icon"
);

export type PlasmicFilterRowItem__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultFilterRowItemProps {
  label?: string;
  onSelect?: (key: string) => void;
  filterKey?: string;
  onRemove?: (key: string) => void;
  icon?: string;
  active?: SingleBooleanChoiceArg<"active">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterRowItem__RenderFunc(props: {
  variants: PlasmicFilterRowItem__VariantsArgs;
  args: PlasmicFilterRowItem__ArgsType;
  overrides: PlasmicFilterRowItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "active",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.active
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootactive]: hasVariant($state, "active", "active") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runOnSelect"] = true
          ? (() => {
              const actionArgs = {
                eventRef: $props["onSelect"],
                args: [
                  (() => {
                    try {
                      return $props.filterKey;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                ]
              };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnSelect"] != null &&
          typeof $steps["runOnSelect"] === "object" &&
          typeof $steps["runOnSelect"].then === "function"
        ) {
          $steps["runOnSelect"] = await $steps["runOnSelect"];
        }
      }}
    >
      {(() => {
        try {
          return $props.icon;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon16Icon
          className={classNames(projectcss.all, sty.svg__z1Wpp, {
            [sty.svgactive__z1Wpp7W96W]: hasVariant($state, "active", "active")
          })}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.label;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textactive]: hasVariant($state, "active", "active") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxactive]: hasVariant($state, "active", "active")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return event?.stopPropagation();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }

          $steps["runOnRemove"] = true
            ? (() => {
                const actionArgs = {
                  eventRef: $props["onRemove"],
                  args: [
                    (() => {
                      try {
                        return $props.filterKey;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnRemove"] != null &&
            typeof $steps["runOnRemove"] === "object" &&
            typeof $steps["runOnRemove"].then === "function"
          ) {
            $steps["runOnRemove"] = await $steps["runOnRemove"];
          }
        }}
      >
        <Icon13Icon
          className={classNames(projectcss.all, sty.svg__iqJxy, {
            [sty.svgactive__iqJxy7W96W]: hasVariant($state, "active", "active")
          })}
          role={"img"}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox"],
  text: ["text"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterRowItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterRowItem__VariantsArgs;
    args?: PlasmicFilterRowItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterRowItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterRowItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterRowItem__ArgProps,
          internalVariantPropNames: PlasmicFilterRowItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterRowItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterRowItem";
  } else {
    func.displayName = `PlasmicFilterRowItem.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterRowItem = Object.assign(
  // Top-level PlasmicFilterRowItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFilterRowItem
    internalVariantProps: PlasmicFilterRowItem__VariantProps,
    internalArgProps: PlasmicFilterRowItem__ArgProps
  }
);

export default PlasmicFilterRowItem;
/* prettier-ignore-end */
