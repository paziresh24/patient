// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: ZuA2HO8MLBhh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import LineClamp from "../../LineClamp"; // plasmic-import: fa_t7ELXcm5k/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Chip from "../../Chip"; // plasmic-import: 1bFBcAoH0lNN/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: ZuA2HO8MLBhh/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: TnnJDmwgAOL7/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: I0wBVQs9owLc/icon
import LocationIcon from "../fragment_icons/icons/PlasmicIcon__Location"; // plasmic-import: 9zdEG9CdGbdC/icon
import MoneyIcon from "../fragment_icons/icons/PlasmicIcon__Money"; // plasmic-import: 4D7uZNf6OjbV/icon
import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import ClockIcon from "../fragment_icons/icons/PlasmicIcon__Clock"; // plasmic-import: rW7v27ONOoUe/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProductCard__VariantMembers = {
  _5StarRatingMode3: "_5StarA";
  externalBookDesign: "externalBookDesign";
};
export type PlasmicProductCard__VariantsArgs = {
  _5StarRatingMode3?: SingleChoiceArg<"_5StarA">;
  externalBookDesign?: SingleBooleanChoiceArg<"externalBookDesign">;
};
type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "_5StarRatingMode3",
  "externalBookDesign"
);

export type PlasmicProductCard__ArgsType = {
  badges?: any;
  actionButtons?: any;
  title?: string;
  subTitle?: string;
  address?: string;
  price?: string;
  avatarSrc?: string;
  rateCount?: number;
  satisfactionPercent?: number;
  avatarVerifiedTick?: boolean;
  avatarRingColor?: string;
  url?: any;
  avatarAltText?: string;
  eventTrigger?: (elementName: string, elementContent: string) => void;
  topBadge?: any;
  externalLinkTitle?: string;
  classificationTitleApi?: string;
  children?: React.ReactNode;
  searchCardId?: string;
  debugModeResult?: any;
  slug?: string;
  centers?: any;
};
type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "badges",
  "actionButtons",
  "title",
  "subTitle",
  "address",
  "price",
  "avatarSrc",
  "rateCount",
  "satisfactionPercent",
  "avatarVerifiedTick",
  "avatarRingColor",
  "url",
  "avatarAltText",
  "eventTrigger",
  "topBadge",
  "externalLinkTitle",
  "classificationTitleApi",
  "children",
  "searchCardId",
  "debugModeResult",
  "slug",
  "centers"
);

export type PlasmicProductCard__OverridesType = {
  root?: Flex__<"div">;
  avatar?: Flex__<typeof Avatar>;
  classificationApi?: Flex__<typeof DataFetcher>;
  classificationTitle?: Flex__<"span">;
  cardTitle?: Flex__<"h2">;
  cardSubtitle?: Flex__<"span">;
  cardAddressRow?: Flex__<"span">;
  cardPrice?: Flex__<"span">;
  dialog?: Flex__<typeof Dialog>;
  badgesChip?: Flex__<typeof Chip>;
  dialog2?: Flex__<typeof Dialog>;
  badgesChip2?: Flex__<typeof Chip>;
  cardDataActionUiFetcher?: Flex__<typeof DataFetcher>;
  cardActionSduiV2UiRequest?: Flex__<typeof ApiRequest>;
  oldActionButtonsHorizontalStack?: Flex__<"div">;
  getProviderFromSlugApiRequest?: Flex__<typeof ApiRequest>;
  availabilityStatus?: Flex__<typeof ApiRequest>;
};

export interface DefaultProductCardProps {
  badges?: any;
  actionButtons?: any;
  title?: string;
  subTitle?: string;
  address?: string;
  price?: string;
  avatarSrc?: string;
  rateCount?: number;
  satisfactionPercent?: number;
  avatarVerifiedTick?: boolean;
  avatarRingColor?: string;
  url?: any;
  avatarAltText?: string;
  eventTrigger?: (elementName: string, elementContent: string) => void;
  topBadge?: any;
  externalLinkTitle?: string;
  classificationTitleApi?: string;
  children?: React.ReactNode;
  searchCardId?: string;
  debugModeResult?: any;
  slug?: string;
  centers?: any;
  _5StarRatingMode3?: SingleChoiceArg<"_5StarA">;
  externalBookDesign?: SingleBooleanChoiceArg<"externalBookDesign">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          avatarVerifiedTick: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "_5StarRatingMode3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props._5StarRatingMode3
      },
      {
        path: "externalBookDesign",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.externalBookDesign
      },
      {
        path: "actionButtonsVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialog2[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "cardActionSduiV2UiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cardActionSduiV2UiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cardActionSduiV2UiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getProviderFromSlugApiRequest[].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "getProviderFromSlugApiRequest[].error",
        type: "private",
        variableType: "object"
      },
      {
        path: "getProviderFromSlugApiRequest[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "availabilityStatus[].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "availabilityStatus[].error",
        type: "private",
        variableType: "object"
      },
      {
        path: "availabilityStatus[].loading",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    (() => {
      try {
        return true;
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <Stack__
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root,
          {
            [sty.root_5StarRatingMode3__5StarA]: hasVariant(
              $state,
              "_5StarRatingMode3",
              "_5StarA"
            ),
            [sty.rootexternalBookDesign]: hasVariant(
              $state,
              "externalBookDesign",
              "externalBookDesign"
            )
          }
        )}
        dir={"rtl"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bcNgL)}
        >
          {(() => {
            try {
              return $props.topBadge[0].title !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hKulC
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.topBadge[0].title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(() => {
            try {
              return $props.topBadge[0].title !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hUA
              )}
            >
              {"    "}
            </div>
          ) : null}
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wJlKm, {
            [sty.freeBoxexternalBookDesign__wJlKmHqYe]: hasVariant(
              $state,
              "externalBookDesign",
              "externalBookDesign"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vbw0E)}
          >
            {(() => {
              try {
                return !!$props.avatarSrc;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__hyRw8
                )}
                component={Link}
                href={(() => {
                  try {
                    return $props.url?.destination.startsWith("/center/https")
                      ? $props.url?.destination.slice(8, -1)
                      : $props.url?.destination;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runEventTrigger"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["eventTrigger"],
                          args: ["avatar"]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runEventTrigger"] != null &&
                    typeof $steps["runEventTrigger"] === "object" &&
                    typeof $steps["runEventTrigger"].then === "function"
                  ) {
                    $steps["runEventTrigger"] = await $steps["runEventTrigger"];
                  }
                }}
                platform={"nextjs"}
                target={(() => {
                  try {
                    return $props.url?.openInNewTab;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                title={(() => {
                  try {
                    return $props.url?.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <Avatar
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  alt={(() => {
                    try {
                      return $props.avatarAltText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  badge={(() => {
                    try {
                      return $props.avatarVerifiedTick ? "check" : "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.avatar)}
                  ring={(() => {
                    try {
                      return $props.avatarRingColor;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  src={(() => {
                    try {
                      return $props.avatarSrc;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </PlasmicLink__>
            ) : null}
            <DataFetcher
              data-plasmic-name={"classificationApi"}
              data-plasmic-override={overrides.classificationApi}
              className={classNames("__wab_instance", sty.classificationApi)}
              dataName={"fetchedData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yApKc
                      )}
                    >
                      {"Error fetching data"}
                    </div>
                  )}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7PCh
                      )}
                    >
                      {""}
                    </div>
                  )}
                </DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              previewErrorDisplay={false}
              previewSpinner={false}
              url={(() => {
                try {
                  return $props.classificationTitleApi;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <DataCtxReader__>
                {$ctx =>
                  (() => {
                    try {
                      return (
                        $ctx.fetchedData.classifications[0]?.name?.length > 2
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <span
                      data-plasmic-name={"classificationTitle"}
                      data-plasmic-override={overrides.classificationTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        sty.classificationTitle,
                        {
                          [sty.classificationTitle_5StarRatingMode3__5StarA]:
                            hasVariant($state, "_5StarRatingMode3", "_5StarA"),
                          [sty.classificationTitleexternalBookDesign]:
                            hasVariant(
                              $state,
                              "externalBookDesign",
                              "externalBookDesign"
                            )
                        }
                      )}
                    >
                      {renderPlasmicSlot({
                        defaultContents: (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $ctx.fetchedData.classifications[0].name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ),
                        value: args.children,
                        className: classNames(sty.slotTargetChildren, {
                          [sty.slotTargetChildren_5StarRatingMode3__5StarA]:
                            hasVariant($state, "_5StarRatingMode3", "_5StarA"),
                          [sty.slotTargetChildrenexternalBookDesign]:
                            hasVariant(
                              $state,
                              "externalBookDesign",
                              "externalBookDesign"
                            )
                        })
                      })}
                    </span>
                  ) : null
                }
              </DataCtxReader__>
            </DataFetcher>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uwhEa)}
          >
            {(() => {
              try {
                return $props.title ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__iYnI7
                )}
                component={Link}
                href={(() => {
                  try {
                    return $props.url?.destination.startsWith("/center/https")
                      ? $props.url?.destination.slice(8, -1)
                      : $props.url?.destination;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runEventTrigger"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["eventTrigger"],
                          args: [
                            "title",
                            (() => {
                              try {
                                return $props.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runEventTrigger"] != null &&
                    typeof $steps["runEventTrigger"] === "object" &&
                    typeof $steps["runEventTrigger"].then === "function"
                  ) {
                    $steps["runEventTrigger"] = await $steps["runEventTrigger"];
                  }
                }}
                platform={"nextjs"}
                target={(() => {
                  try {
                    return $props.url?.openInNewTab;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                title={(() => {
                  try {
                    return $props.url?.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <h2
                  data-plasmic-name={"cardTitle"}
                  data-plasmic-override={overrides.cardTitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.cardTitle
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0639\u0646\u0648\u0627\u0646 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631 \u06cc\u0627 \u0646\u062a\u06cc\u062c\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h2>
              </PlasmicLink__>
            ) : null}
            {(() => {
              try {
                return !!$props.subTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <LineClamp
                className={classNames("__wab_instance", sty.lineClamp__lmqY, {
                  [sty.lineClampexternalBookDesign__lmqYHqYe]: hasVariant(
                    $state,
                    "externalBookDesign",
                    "externalBookDesign"
                  )
                })}
                numberOfLines={1}
              >
                <span
                  data-plasmic-name={"cardSubtitle"}
                  data-plasmic-override={overrides.cardSubtitle}
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.cardSubtitle,
                    {
                      [sty.cardSubtitle_5StarRatingMode3__5StarA]: hasVariant(
                        $state,
                        "_5StarRatingMode3",
                        "_5StarA"
                      ),
                      [sty.cardSubtitleexternalBookDesign]: hasVariant(
                        $state,
                        "externalBookDesign",
                        "externalBookDesign"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.subTitle.replace(
                          /([^،])،([^،])/g,
                          "$1، $2"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              </LineClamp>
            ) : null}
            {(() => {
              try {
                return !!+$props.rateCount;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zf7Bm, {
                  [sty.freeBox_5StarRatingMode3__5StarA__zf7BmfZd0]: hasVariant(
                    $state,
                    "_5StarRatingMode3",
                    "_5StarA"
                  ),
                  [sty.freeBoxexternalBookDesign__zf7BmHqYe]: hasVariant(
                    $state,
                    "externalBookDesign",
                    "externalBookDesign"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "_5StarRatingMode3", "_5StarA")
                      ? Icon2Icon
                      : Icon7Icon
                  }
                  className={classNames(projectcss.all, sty.svg___4KelP, {
                    [sty.svg_5StarRatingMode3__5StarA___4KelPfZd0]: hasVariant(
                      $state,
                      "_5StarRatingMode3",
                      "_5StarA"
                    ),
                    [sty.svgexternalBookDesign___4KelPhqYe]: hasVariant(
                      $state,
                      "externalBookDesign",
                      "externalBookDesign"
                    )
                  })}
                  role={"img"}
                />

                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span__zMlGi,
                    {
                      [sty.span_5StarRatingMode3__5StarA__zMlGifZd0]:
                        hasVariant($state, "_5StarRatingMode3", "_5StarA")
                    }
                  )}
                >
                  {hasVariant($state, "_5StarRatingMode3", "_5StarA") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.satisfactionPercent % 20 === 0
                            ? $props.satisfactionPercent / 20
                            : ($props.satisfactionPercent / 20)
                                .toFixed(1)
                                .replace(".0", "");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.satisfactionPercent % 20 === 0
                            ? $props.satisfactionPercent / 20
                            : ($props.satisfactionPercent / 20)
                                .toFixed(1)
                                .replace(".0", "");
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return " ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </span>
                <span
                  className={classNames(
                    projectcss.all,
                    projectcss.span,
                    projectcss.__wab_text,
                    sty.span__qbAn4,
                    {
                      [sty.span_5StarRatingMode3__5StarA__qbAn4FZd0]:
                        hasVariant($state, "_5StarRatingMode3", "_5StarA")
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `(${$props.rateCount} نظر)`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "(376 \u0646\u0638\u0631)";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </span>
              </Stack__>
            ) : null}
          </Stack__>
        </Stack__>
        {(() => {
          try {
            return $props.address;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rdT8C, {
              [sty.freeBoxexternalBookDesign__rdT8CHqYe]: hasVariant(
                $state,
                "externalBookDesign",
                "externalBookDesign"
              )
            })}
          >
            <LocationIcon
              className={classNames(projectcss.all, sty.svg__uyLb1)}
              role={"img"}
            />

            <LineClamp
              className={classNames("__wab_instance", sty.lineClamp__sDffa)}
            >
              <span
                data-plasmic-name={"cardAddressRow"}
                data-plasmic-override={overrides.cardAddressRow}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.cardAddressRow,
                  {
                    [sty.cardAddressRow_5StarRatingMode3__5StarA]: hasVariant(
                      $state,
                      "_5StarRatingMode3",
                      "_5StarA"
                    ),
                    [sty.cardAddressRowexternalBookDesign]: hasVariant(
                      $state,
                      "externalBookDesign",
                      "externalBookDesign"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.address;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0627\u0633\u062a\u0627\u0646 \u0641\u0644\u0627\u0646\u060c \u0634\u0647\u0631\u060c \u0645\u0646\u0637\u0642\u0647\u060c \u0645\u062d\u0644\u0647 \u0641\u0644\u0627\u0646\u060c \u062e\u06cc\u0627\u0628\u0627\u0646 \u0627\u06cc\u06a9\u0633 \u060c \u06a9\u0648\u0686\u0647 \u0627\u06cc\u06af\u0631\u06af \u060c \u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u0634\u062e\u0635\u06cc \u0632\u0627\u062f\u0647\u060c \u0637\u0628\u0642\u0647\u060c \u0648\u0627\u062d\u062f\u060c \u067e\u0644\u0627\u06a9 ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            </LineClamp>
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $props.price;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ddsL)}
          >
            <MoneyIcon
              className={classNames(projectcss.all, sty.svg__oF6)}
              role={"img"}
            />

            <span
              data-plasmic-name={"cardPrice"}
              data-plasmic-override={overrides.cardPrice}
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                sty.cardPrice
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "128,000 \u062a\u0648\u0645\u0627\u0646";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </span>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___57MCk
              )}
            >
              {"    "}
            </div>
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $props.badges.length > 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sd0, {
              [sty.freeBoxexternalBookDesign__sd0HqYe]: hasVariant(
                $state,
                "externalBookDesign",
                "externalBookDesign"
              )
            })}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.badges;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (() => {
                const child$Props = {
                  body: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aNeb4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ),
                  className: classNames("__wab_instance", sty.dialog),
                  key: currentIndex,
                  onOpenChange: generateStateOnChangeProp($state, [
                    "dialog",
                    __plasmic_idx_0,
                    "open"
                  ]),
                  open: generateStateValueProp($state, [
                    "dialog",
                    __plasmic_idx_0,
                    "open"
                  ]),
                  title: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qVzhr
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Dialog title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ),
                  trigger: (
                    <Chip
                      data-plasmic-name={"badgesChip"}
                      data-plasmic-override={overrides.badgesChip}
                      className={classNames("__wab_instance", sty.badgesChip)}
                      color={(() => {
                        try {
                          return currentItem.type === "success"
                            ? "gray"
                            : currentItem.type === "info"
                            ? "blue"
                            : "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "gray";
                          }
                          throw e;
                        }
                      })()}
                      content={(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      rounded={true}
                      showEndIcon={(() => {
                        try {
                          return !!currentItem.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()}
                      showStartIcon={(() => {
                        try {
                          return Boolean(currentItem.icon);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()}
                      size={"xSmall"}
                      slot={
                        <InfoIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4AT6K
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {(() => {
                        try {
                          return currentItem.icon == "smile-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <SmileIcon
                          className={classNames(projectcss.all, sty.svg__fj8S)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.icon == "forbidden-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <CalendarIcon
                          className={classNames(projectcss.all, sty.svg__vdNz)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.icon == "clock-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <ClockIcon
                          className={classNames(projectcss.all, sty.svg___2BpJ)}
                          role={"img"}
                        />
                      ) : null}
                    </Chip>
                  )
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "dialog[].open",
                      initFunc: ({ $props, $state, $queries }) => false
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Dialog
                    data-plasmic-name={"dialog"}
                    data-plasmic-override={overrides.dialog}
                    {...child$Props}
                  />
                );
              })();
            })}
          </Stack__>
        ) : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hzVw
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (
                  "search_result:show_card_action_sdui_v2: " +
                  $ctx.Growthbook.features["theme-config"][
                    "search_result:show_card_action_sdui_v2"
                  ] +
                  " \r\n " +
                  "ctx.Growthbook.attributes.url: " +
                  $ctx.Growthbook.attributes.url
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {false ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__esd8N, {
              [sty.freeBoxexternalBookDesign__esd8NHqYe]: hasVariant(
                $state,
                "externalBookDesign",
                "externalBookDesign"
              )
            })}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.badges;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (() => {
                const child$Props = {
                  body: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7VgVv
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ),
                  className: classNames("__wab_instance", sty.dialog2),
                  key: currentIndex,
                  onOpenChange: generateStateOnChangeProp($state, [
                    "dialog2",
                    __plasmic_idx_0,
                    "open"
                  ]),
                  open: generateStateValueProp($state, [
                    "dialog2",
                    __plasmic_idx_0,
                    "open"
                  ]),
                  title: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gDwHk
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Dialog title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ),
                  trigger: (
                    <Chip
                      data-plasmic-name={"badgesChip2"}
                      data-plasmic-override={overrides.badgesChip2}
                      className={classNames("__wab_instance", sty.badgesChip2)}
                      color={(() => {
                        try {
                          return currentItem.type === "success"
                            ? "gray"
                            : currentItem.type === "info"
                            ? "blue"
                            : "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "gray";
                          }
                          throw e;
                        }
                      })()}
                      content={(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      rounded={true}
                      showEndIcon={(() => {
                        try {
                          return !!currentItem.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()}
                      showStartIcon={(() => {
                        try {
                          return Boolean(currentItem.icon);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()}
                      size={"xSmall"}
                      slot={
                        <InfoIcon
                          className={classNames(projectcss.all, sty.svg__ug5N)}
                          role={"img"}
                        />
                      }
                    >
                      {(() => {
                        try {
                          return currentItem.icon == "smile-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <SmileIcon
                          className={classNames(projectcss.all, sty.svg__sCu7U)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.icon == "forbidden-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <CalendarIcon
                          className={classNames(projectcss.all, sty.svg__mDkNx)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.icon == "clock-icon";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <ClockIcon
                          className={classNames(projectcss.all, sty.svg__bJh58)}
                          role={"img"}
                        />
                      ) : null}
                    </Chip>
                  )
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "dialog2[].open",
                      initFunc: ({ $props, $state, $queries }) => false
                    }
                  ],
                  [__plasmic_idx_0]
                );
                return (
                  <Dialog
                    data-plasmic-name={"dialog2"}
                    data-plasmic-override={overrides.dialog2}
                    {...child$Props}
                  />
                );
              })();
            })}
          </Stack__>
        ) : null}
        {false ? (
          <DataFetcher
            data-plasmic-name={"cardDataActionUiFetcher"}
            data-plasmic-override={overrides.cardDataActionUiFetcher}
            className={classNames(
              "__wab_instance",
              sty.cardDataActionUiFetcher
            )}
            dataName={"search-result-card-ui-fetchedData"}
            errorDisplay={<DataCtxReader__>{$ctx => ""}</DataCtxReader__>}
            errorName={"fetchError"}
            headers={{
              "Content-Type": "application/json",
              Accept: "application/json"
            }}
            loadingDisplay={<DataCtxReader__>{$ctx => ""}</DataCtxReader__>}
            method={"GET"}
            noLayout={false}
            previewErrorDisplay={false}
            previewSpinner={false}
            url={(() => {
              try {
                return `https://apigw.paziresh24.com/v1/ui-jahannama/search-result-card-ui/${$props.searchCardId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx =>
                (() => {
                  try {
                    return $ctx.Growthbook.features["theme-config"][
                      "search_result:show_card_action_sdui_v2"
                    ]
                      ? true
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ekyvi)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $ctx["search-result-card-ui-fetchedData"]
                            .search_result_card_ui[0].data.actions;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const actionButton = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j5WP2
                          )}
                          key={currentIndex}
                        >
                          {(() => {
                            try {
                              return actionButton.top_title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                sty.span__nTnmb
                              )}
                            >
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: (() => {
                                    try {
                                      return actionButton.top_title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()
                                }}
                              />
                            </span>
                          ) : null}
                          <Button
                            children2={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return actionButton.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.button__yGi0J
                            )}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ppYwt
                                )}
                                role={"img"}
                              />
                            }
                            link={(() => {
                              try {
                                return actionButton.url.startsWith(
                                  "/center/https"
                                )
                                  ? actionButton.url.slice(8, -1)
                                  : actionButton.url;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runEventTrigger"] = true
                                ? (() => {
                                    const actionArgs = {
                                      eventRef: $props["eventTrigger"],
                                      args: [
                                        "action-button",
                                        (() => {
                                          try {
                                            return actionButton.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return (({ eventRef, args }) => {
                                      return eventRef?.(...(args ?? []));
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runEventTrigger"] != null &&
                                typeof $steps["runEventTrigger"] === "object" &&
                                typeof $steps["runEventTrigger"].then ===
                                  "function"
                              ) {
                                $steps["runEventTrigger"] = await $steps[
                                  "runEventTrigger"
                                ];
                              }
                            }}
                            outline={(() => {
                              try {
                                return actionButton.outline;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8WdnR
                                )}
                                role={"img"}
                              />
                            }
                            target={true}
                          />
                        </Stack__>
                      );
                    })}
                  </Stack__>
                ) : null
              }
            </DataCtxReader__>
          </DataFetcher>
        ) : null}
        <ApiRequest
          data-plasmic-name={"cardActionSduiV2UiRequest"}
          data-plasmic-override={overrides.cardActionSduiV2UiRequest}
          className={classNames(
            "__wab_instance",
            sty.cardActionSduiV2UiRequest
          )}
          config={(() => {
            try {
              return {
                test: $props.searchCardId
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s4JDx
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9H2S0
              )}
            >
              {"Loading..."}
            </div>
          }
          method={"GET"}
          onError={generateStateOnChangeProp($state, [
            "cardActionSduiV2UiRequest",
            "error"
          ])}
          onLoading={generateStateOnChangeProp($state, [
            "cardActionSduiV2UiRequest",
            "loading"
          ])}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "cardActionSduiV2UiRequest",
              "data"
            ]).apply(null, eventArgs);
            (async data => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
          params={undefined}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/v1/ui-jahannama/search-result-card-ui/${$props.searchCardId}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(() => {
            try {
              return $ctx.Growthbook.features["theme-config"][
                "search_result:show_card_action_sdui_v2"
              ]
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ybVvU)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.cardActionSduiV2UiRequest.data
                      .search_result_card_ui[0].data.actions;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const actionButton = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mf4Qz)}
                    key={currentIndex}
                  >
                    {(() => {
                      try {
                        return actionButton.top_title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span___0BetQ
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return actionButton.top_title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </span>
                    ) : null}
                    <Button
                      children2={
                        <React.Fragment>
                          {(() => {
                            try {
                              return actionButton.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Button";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__j7YzP
                      )}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__ptUpu)}
                          role={"img"}
                        />
                      }
                      link={(() => {
                        try {
                          return actionButton.url.startsWith("/center/https")
                            ? actionButton.url.slice(8, -1)
                            : actionButton.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runEventTrigger"] = true
                          ? (() => {
                              const actionArgs = {
                                eventRef: $props["eventTrigger"],
                                args: [
                                  "action-button",
                                  (() => {
                                    try {
                                      return actionButton.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runEventTrigger"] != null &&
                          typeof $steps["runEventTrigger"] === "object" &&
                          typeof $steps["runEventTrigger"].then === "function"
                        ) {
                          $steps["runEventTrigger"] = await $steps[
                            "runEventTrigger"
                          ];
                        }
                      }}
                      outline={(() => {
                        try {
                          return actionButton.outline;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__fAvHp)}
                          role={"img"}
                        />
                      }
                      target={true}
                    />
                  </Stack__>
                );
              })}
            </Stack__>
          ) : null}
        </ApiRequest>
        {(() => {
          try {
            return (
              $props.actionButtons.length > 0 &&
              !(
                $ctx.Growthbook.features["theme-config"][
                  "search_result:show_card_action_sdui_v2"
                ] &&
                $state.cardActionSduiV2UiRequest.data?.search_result_card_ui[0]
                  ?.data?.actions !== undefined
              )
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"oldActionButtonsHorizontalStack"}
            data-plasmic-override={overrides.oldActionButtonsHorizontalStack}
            hasGap={true}
            className={classNames(
              projectcss.all,
              sty.oldActionButtonsHorizontalStack
            )}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.actionButtons;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const actionButton = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xozVc)}
                  key={currentIndex}
                >
                  {(() => {
                    try {
                      return (() => {
                        if (
                          $ctx.Growthbook.attributes?.url &&
                          !!$ctx.Growthbook.isReady &&
                          !!$ctx.Growthbook.features["theme-config"] &&
                          actionButton.top_title.trim() !== "" &&
                          actionButton.top_title &&
                          !$ctx.Growthbook.features["theme-config"][
                            "search_result:first_free_time_data_src_from_availability-status_api"
                          ]
                        ) {
                          return true;
                        } else {
                          return false;
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <span
                      className={classNames(
                        projectcss.all,
                        projectcss.span,
                        projectcss.__wab_text,
                        sty.span__mY5Gg
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return actionButton.top_title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </span>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        $ctx.Growthbook.features["theme-config"][
                          "search_result:first_free_time_data_src_from_availability-status_api"
                        ] !== undefined &&
                        $ctx.Growthbook.features["theme-config"][
                          "search_result:first_free_time_data_src_from_availability-status_api"
                        ] === true
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xzb64)}
                    >
                      <ApiRequest
                        data-plasmic-name={"getProviderFromSlugApiRequest"}
                        data-plasmic-override={
                          overrides.getProviderFromSlugApiRequest
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.getProviderFromSlugApiRequest
                        )}
                        errorDisplay={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lq4Dj
                            )}
                          >
                            {"Error fetching data"}
                          </div>
                        }
                        loadingDisplay={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__c1SLh
                            )}
                          >
                            {"Loading..."}
                          </div>
                        }
                        method={"GET"}
                        onError={generateStateOnChangeProp($state, [
                          "getProviderFromSlugApiRequest",
                          __plasmic_idx_0,
                          "error"
                        ])}
                        onLoading={generateStateOnChangeProp($state, [
                          "getProviderFromSlugApiRequest",
                          __plasmic_idx_0,
                          "loading"
                        ])}
                        onSuccess={generateStateOnChangeProp($state, [
                          "getProviderFromSlugApiRequest",
                          __plasmic_idx_0,
                          "data"
                        ])}
                        url={(() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/v1/providers?slug=" +
                              $props.slug
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <ApiRequest
                          data-plasmic-name={"availabilityStatus"}
                          data-plasmic-override={overrides.availabilityStatus}
                          className={classNames(
                            "__wab_instance",
                            sty.availabilityStatus
                          )}
                          errorDisplay={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__utvuQ
                              )}
                            >
                              {"Error fetching data"}
                            </div>
                          }
                          loadingDisplay={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__emhrt
                              )}
                            >
                              {"Loading..."}
                            </div>
                          }
                          method={"GET"}
                          onError={generateStateOnChangeProp($state, [
                            "availabilityStatus",
                            __plasmic_idx_0,
                            "error"
                          ])}
                          onLoading={generateStateOnChangeProp($state, [
                            "availabilityStatus",
                            __plasmic_idx_0,
                            "loading"
                          ])}
                          onSuccess={generateStateOnChangeProp($state, [
                            "availabilityStatus",
                            __plasmic_idx_0,
                            "data"
                          ])}
                          url={(() => {
                            try {
                              return (
                                "https://apigw.paziresh24.com/core-booking/v1/providers/" +
                                $state.getProviderFromSlugApiRequest[
                                  currentIndex
                                ].data.providers[0].user_id +
                                "/availability-status"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span__dqNWz
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (() => {
                                      const centerIds = $props.centers.map(
                                        center => center.id
                                      );
                                      const availabilities =
                                        $state.availabilityStatus[currentIndex]
                                          .data.availability;
                                      const filteredAvailabilities =
                                        availabilities.filter(availability =>
                                          centerIds.includes(
                                            availability.center_id
                                          )
                                        );
                                      if (filteredAvailabilities.length > 0) {
                                        const nearestAvailability =
                                          filteredAvailabilities.reduce(
                                            (earliest, current) =>
                                              new Date(current.freeturn) <
                                              new Date(earliest.freeturn)
                                                ? current
                                                : earliest
                                          );
                                        const presence_freeturn = new Date(
                                          nearestAvailability.freeturn
                                        );
                                        const now = new Date();
                                        const timeDifference =
                                          (presence_freeturn - now) / 1000;
                                        const formatTimeToFarsi =
                                          timeDifference => {
                                            if (timeDifference <= 0) {
                                              return "هم‌اکنون";
                                            } else if (timeDifference < 3600) {
                                              return "کمتر از ۱ ساعت دیگر";
                                            } else if (timeDifference < 86400) {
                                              const hours = Math.floor(
                                                timeDifference / 3600
                                              );
                                              return `حدود ${hours} ساعت دیگر`;
                                            } else {
                                              const days = Math.floor(
                                                timeDifference / 86400
                                              );
                                              return `حدود ${days} روز دیگر`;
                                            }
                                          };
                                        const timeText =
                                          formatTimeToFarsi(timeDifference);
                                        const inPersonTopTitle = `<span>اولین نوبت: <b>${timeText}</b></span>`;
                                        return inPersonTopTitle;
                                      } else {
                                        return null;
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </span>
                        </ApiRequest>
                      </ApiRequest>
                    </div>
                  ) : null}
                  <Button
                    children2={
                      <React.Fragment>
                        {(() => {
                          try {
                            return actionButton.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Button";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.button__kYXz)}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__b1Zmp)}
                        role={"img"}
                      />
                    }
                    link={(() => {
                      try {
                        return actionButton.url.startsWith("/center/https")
                          ? actionButton.url.slice(8, -1)
                          : actionButton.url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runEventTrigger"] = true
                        ? (() => {
                            const actionArgs = {
                              eventRef: $props["eventTrigger"],
                              args: [
                                "action-button",
                                (() => {
                                  try {
                                    return actionButton.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runEventTrigger"] != null &&
                        typeof $steps["runEventTrigger"] === "object" &&
                        typeof $steps["runEventTrigger"].then === "function"
                      ) {
                        $steps["runEventTrigger"] = await $steps[
                          "runEventTrigger"
                        ];
                      }
                    }}
                    outline={(() => {
                      try {
                        return actionButton.outline;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__dDPe)}
                        role={"img"}
                      />
                    }
                  />
                </Stack__>
              );
            })}
          </Stack__>
        ) : null}
        {(() => {
          try {
            return Object.keys($props.debugModeResult).length > 2;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__pV4)}>
            <div className={classNames(projectcss.all, sty.freeBox___7UCt)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bz8I
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.debugModeResult.indexName;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yzXdY
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.debugModeResult.documentId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__u1Q0)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Gyd
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return Object.entries(
                          $props.debugModeResult.documentInfo
                        )
                          .map(([key, value]) => `${key}: ${value}`)
                          .join("<br>");
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
            </div>
          </div>
        ) : null}
      </Stack__>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatar",
    "classificationApi",
    "classificationTitle",
    "cardTitle",
    "cardSubtitle",
    "cardAddressRow",
    "cardPrice",
    "dialog",
    "badgesChip",
    "dialog2",
    "badgesChip2",
    "cardDataActionUiFetcher",
    "cardActionSduiV2UiRequest",
    "oldActionButtonsHorizontalStack",
    "getProviderFromSlugApiRequest",
    "availabilityStatus"
  ],
  avatar: ["avatar"],
  classificationApi: ["classificationApi", "classificationTitle"],
  classificationTitle: ["classificationTitle"],
  cardTitle: ["cardTitle"],
  cardSubtitle: ["cardSubtitle"],
  cardAddressRow: ["cardAddressRow"],
  cardPrice: ["cardPrice"],
  dialog: ["dialog", "badgesChip"],
  badgesChip: ["badgesChip"],
  dialog2: ["dialog2", "badgesChip2"],
  badgesChip2: ["badgesChip2"],
  cardDataActionUiFetcher: ["cardDataActionUiFetcher"],
  cardActionSduiV2UiRequest: ["cardActionSduiV2UiRequest"],
  oldActionButtonsHorizontalStack: [
    "oldActionButtonsHorizontalStack",
    "getProviderFromSlugApiRequest",
    "availabilityStatus"
  ],
  getProviderFromSlugApiRequest: [
    "getProviderFromSlugApiRequest",
    "availabilityStatus"
  ],
  availabilityStatus: ["availabilityStatus"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  classificationApi: typeof DataFetcher;
  classificationTitle: "span";
  cardTitle: "h2";
  cardSubtitle: "span";
  cardAddressRow: "span";
  cardPrice: "span";
  dialog: typeof Dialog;
  badgesChip: typeof Chip;
  dialog2: typeof Dialog;
  badgesChip2: typeof Chip;
  cardDataActionUiFetcher: typeof DataFetcher;
  cardActionSduiV2UiRequest: typeof ApiRequest;
  oldActionButtonsHorizontalStack: "div";
  getProviderFromSlugApiRequest: typeof ApiRequest;
  availabilityStatus: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    classificationApi: makeNodeComponent("classificationApi"),
    classificationTitle: makeNodeComponent("classificationTitle"),
    cardTitle: makeNodeComponent("cardTitle"),
    cardSubtitle: makeNodeComponent("cardSubtitle"),
    cardAddressRow: makeNodeComponent("cardAddressRow"),
    cardPrice: makeNodeComponent("cardPrice"),
    dialog: makeNodeComponent("dialog"),
    badgesChip: makeNodeComponent("badgesChip"),
    dialog2: makeNodeComponent("dialog2"),
    badgesChip2: makeNodeComponent("badgesChip2"),
    cardDataActionUiFetcher: makeNodeComponent("cardDataActionUiFetcher"),
    cardActionSduiV2UiRequest: makeNodeComponent("cardActionSduiV2UiRequest"),
    oldActionButtonsHorizontalStack: makeNodeComponent(
      "oldActionButtonsHorizontalStack"
    ),
    getProviderFromSlugApiRequest: makeNodeComponent(
      "getProviderFromSlugApiRequest"
    ),
    availabilityStatus: makeNodeComponent("availabilityStatus"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
