// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: ZuA2HO8MLBhh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import LineClamp from "../../LineClamp"; // plasmic-import: fa_t7ELXcm5k/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Chip from "../../Chip"; // plasmic-import: 1bFBcAoH0lNN/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: ZuA2HO8MLBhh/css

import ThumbUpIcon from "../fragment_icons/icons/PlasmicIcon__ThumbUp"; // plasmic-import: GRY2zHJ6uxOn/icon
import LocationIcon from "../fragment_icons/icons/PlasmicIcon__Location"; // plasmic-import: 9zdEG9CdGbdC/icon
import MoneyIcon from "../fragment_icons/icons/PlasmicIcon__Money"; // plasmic-import: 4D7uZNf6OjbV/icon
import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon
import ClockIcon from "../fragment_icons/icons/PlasmicIcon__Clock"; // plasmic-import: rW7v27ONOoUe/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicProductCard__VariantMembers = {};
export type PlasmicProductCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>();

export type PlasmicProductCard__ArgsType = {
  badges?: any;
  actionButtons?: any;
  title?: string;
  subTitle?: string;
  address?: string;
  price?: string;
  avatarSrc?: string;
  rateCount?: number;
  satisfactionPercent?: number;
  avatarVerifiedTick?: boolean;
  avatarRingColor?: string;
  url?: any;
  avatarAltText?: string;
  eventTrigger?: (elementName: string, elementContent: string) => void;
};
type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "badges",
  "actionButtons",
  "title",
  "subTitle",
  "address",
  "price",
  "avatarSrc",
  "rateCount",
  "satisfactionPercent",
  "avatarVerifiedTick",
  "avatarRingColor",
  "url",
  "avatarAltText",
  "eventTrigger"
);

export type PlasmicProductCard__OverridesType = {
  root?: Flex__<"div">;
  avatar?: Flex__<typeof Avatar>;
  cardTitle?: Flex__<"h2">;
  cardSubtitle?: Flex__<"span">;
  cardAddressRow?: Flex__<"span">;
  cardPrice?: Flex__<"span">;
  dialog?: Flex__<typeof Dialog>;
  badgesChip?: Flex__<typeof Chip>;
  text?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultProductCardProps {
  badges?: any;
  actionButtons?: any;
  title?: string;
  subTitle?: string;
  address?: string;
  price?: string;
  avatarSrc?: string;
  rateCount?: number;
  satisfactionPercent?: number;
  avatarVerifiedTick?: boolean;
  avatarRingColor?: string;
  url?: any;
  avatarAltText?: string;
  eventTrigger?: (elementName: string, elementContent: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          avatarVerifiedTick: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "unnamedGroupOfVariants2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wJlKm)}
      >
        {(() => {
          try {
            return !!$props.avatarSrc;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__hyRw8
            )}
            component={Link}
            href={(() => {
              try {
                return $props.url?.destination;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["runEventTrigger"] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props["eventTrigger"],
                      args: ["avatar"]
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runEventTrigger"] != null &&
                typeof $steps["runEventTrigger"] === "object" &&
                typeof $steps["runEventTrigger"].then === "function"
              ) {
                $steps["runEventTrigger"] = await $steps["runEventTrigger"];
              }
            }}
            platform={"nextjs"}
            target={(() => {
              try {
                return $props.url?.openInNewTab;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            title={(() => {
              try {
                return $props.url?.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <Avatar
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              alt={(() => {
                try {
                  return $props.avatarAltText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              badge={(() => {
                try {
                  return $props.avatarVerifiedTick ? "check" : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.avatar)}
              ring={(() => {
                try {
                  return $props.avatarRingColor;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              src={(() => {
                try {
                  return $props.avatarSrc;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </PlasmicLink__>
        ) : null}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uwhEa)}
        >
          {(() => {
            try {
              return $props.title ? true : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__iYnI7
              )}
              component={Link}
              href={(() => {
                try {
                  return $props.url?.destination;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["runEventTrigger"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["eventTrigger"],
                        args: [
                          "title",
                          (() => {
                            try {
                              return $props.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runEventTrigger"] != null &&
                  typeof $steps["runEventTrigger"] === "object" &&
                  typeof $steps["runEventTrigger"].then === "function"
                ) {
                  $steps["runEventTrigger"] = await $steps["runEventTrigger"];
                }
              }}
              platform={"nextjs"}
              target={(() => {
                try {
                  return $props.url?.openInNewTab;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              title={(() => {
                try {
                  return $props.url?.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <h2
                data-plasmic-name={"cardTitle"}
                data-plasmic-override={overrides.cardTitle}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.cardTitle
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0639\u0646\u0648\u0627\u0646 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631 \u06cc\u0627 \u0646\u062a\u06cc\u062c\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h2>
            </PlasmicLink__>
          ) : null}
          {(() => {
            try {
              return !!$props.subTitle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <LineClamp
              className={classNames("__wab_instance", sty.lineClamp__lmqY)}
              numberOfLines={2}
            >
              <span
                data-plasmic-name={"cardSubtitle"}
                data-plasmic-override={overrides.cardSubtitle}
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.cardSubtitle
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.subTitle;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627\u0633\u0627\u0628 \u062a\u0627\u06cc\u062a\u06cc\u0644 \u067e\u06cc\u0634 \u0641\u0631\u0636 \u062a\u062e\u0635\u0635 \u060c \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u062a\u0639\u0627\u0631 \u0648 \u062f\u0631\u0645\u0627\u0646 \u0647\u0627";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            </LineClamp>
          ) : null}
          {(() => {
            try {
              return $props.rateCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zf7Bm)}
            >
              <ThumbUpIcon
                className={classNames(projectcss.all, sty.svg___4KelP)}
                role={"img"}
              />

              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__zMlGi
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "٪" + $props.satisfactionPercent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "100%";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__qbAn4
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `(${$props.rateCount} نظر)`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "(376 \u0646\u0638\u0631)";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            </Stack__>
          ) : null}
        </Stack__>
      </Stack__>
      {(() => {
        try {
          return $props.address;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rdT8C)}
        >
          <LocationIcon
            className={classNames(projectcss.all, sty.svg__uyLb1)}
            role={"img"}
          />

          <LineClamp
            className={classNames("__wab_instance", sty.lineClamp__sDffa)}
          >
            <span
              data-plasmic-name={"cardAddressRow"}
              data-plasmic-override={overrides.cardAddressRow}
              className={classNames(
                projectcss.all,
                projectcss.span,
                projectcss.__wab_text,
                sty.cardAddressRow
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.address;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0627\u0633\u062a\u0627\u0646 \u0641\u0644\u0627\u0646\u060c \u0634\u0647\u0631\u060c \u0645\u0646\u0637\u0642\u0647\u060c \u0645\u062d\u0644\u0647 \u0641\u0644\u0627\u0646\u060c \u062e\u06cc\u0627\u0628\u0627\u0646 \u0627\u06cc\u06a9\u0633 \u060c \u06a9\u0648\u0686\u0647 \u0627\u06cc\u06af\u0631\u06af \u060c \u0633\u0627\u062e\u062a\u0645\u0627\u0646 \u0634\u062e\u0635\u06cc \u0632\u0627\u062f\u0647\u060c \u0637\u0628\u0642\u0647\u060c \u0648\u0627\u062d\u062f\u060c \u067e\u0644\u0627\u06a9 ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </span>
          </LineClamp>
        </Stack__>
      ) : null}
      {(() => {
        try {
          return $props.price;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ddsL)}
        >
          <MoneyIcon
            className={classNames(projectcss.all, sty.svg__oF6)}
            role={"img"}
          />

          <span
            data-plasmic-name={"cardPrice"}
            data-plasmic-override={overrides.cardPrice}
            className={classNames(
              projectcss.all,
              projectcss.span,
              projectcss.__wab_text,
              sty.cardPrice
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.price;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "128,000 \u062a\u0648\u0645\u0627\u0646";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </span>
        </Stack__>
      ) : null}
      {(() => {
        try {
          return $props.badges.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sd0)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.badges;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (() => {
              const child$Props = {
                body: (
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ),
                className: classNames("__wab_instance", sty.dialog),
                key: currentIndex,
                onOpenChange: generateStateOnChangeProp($state, [
                  "dialog",
                  __plasmic_idx_0,
                  "open"
                ]),
                open: generateStateValueProp($state, [
                  "dialog",
                  __plasmic_idx_0,
                  "open"
                ]),
                title: (
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Dialog title";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ),
                trigger: (
                  <Chip
                    data-plasmic-name={"badgesChip"}
                    data-plasmic-override={overrides.badgesChip}
                    className={classNames("__wab_instance", sty.badgesChip)}
                    color={(() => {
                      try {
                        return currentItem.type === "success"
                          ? "green"
                          : currentItem.type === "info"
                          ? "blue"
                          : "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "green";
                        }
                        throw e;
                      }
                    })()}
                    content={(() => {
                      try {
                        return currentItem.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    showEndIcon={(() => {
                      try {
                        return !!currentItem.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    showStartIcon={(() => {
                      try {
                        return Boolean(currentItem.icon);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()}
                    slot={
                      <InfoIcon
                        className={classNames(projectcss.all, sty.svg___4AT6K)}
                        role={"img"}
                      />
                    }
                  >
                    {(() => {
                      try {
                        return currentItem.icon == "smile-icon";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <SmileIcon
                        className={classNames(projectcss.all, sty.svg__fj8S)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.icon == "forbidden-icon";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <CalendarIcon
                        className={classNames(projectcss.all, sty.svg__vdNz)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.icon == "clock-icon";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <ClockIcon
                        className={classNames(projectcss.all, sty.svg___2BpJ)}
                        role={"img"}
                      />
                    ) : null}
                  </Chip>
                )
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "dialog[].open",
                    initFunc: ({ $props, $state, $queries }) => false
                  }
                ],
                [__plasmic_idx_0]
              );
              return (
                <Dialog
                  data-plasmic-name={"dialog"}
                  data-plasmic-override={overrides.dialog}
                  {...child$Props}
                />
              );
            })();
          })}
        </Stack__>
      ) : null}
      {(() => {
        try {
          return $props.actionButtons.length > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___070Nx)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.actionButtons;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const actionButton = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xozVc)}
                key={currentIndex}
              >
                {(() => {
                  try {
                    return actionButton.top_title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span__mY5Gg
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return actionButton.top_title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </span>
                ) : null}
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  children2={
                    <React.Fragment>
                      {(() => {
                        try {
                          return actionButton.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Button";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.button)}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__b1Zmp)}
                      role={"img"}
                    />
                  }
                  link={(() => {
                    try {
                      return actionButton.url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runEventTrigger"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["eventTrigger"],
                            args: [
                              "action-button",
                              (() => {
                                try {
                                  return actionButton.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runEventTrigger"] != null &&
                      typeof $steps["runEventTrigger"] === "object" &&
                      typeof $steps["runEventTrigger"].then === "function"
                    ) {
                      $steps["runEventTrigger"] = await $steps[
                        "runEventTrigger"
                      ];
                    }
                  }}
                  outline={(() => {
                    try {
                      return actionButton.outline;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__dDPe)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
            );
          })}
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatar",
    "cardTitle",
    "cardSubtitle",
    "cardAddressRow",
    "cardPrice",
    "dialog",
    "badgesChip",
    "text",
    "button"
  ],
  avatar: ["avatar"],
  cardTitle: ["cardTitle"],
  cardSubtitle: ["cardSubtitle"],
  cardAddressRow: ["cardAddressRow"],
  cardPrice: ["cardPrice"],
  dialog: ["dialog", "badgesChip", "text"],
  badgesChip: ["badgesChip"],
  text: ["text"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  cardTitle: "h2";
  cardSubtitle: "span";
  cardAddressRow: "span";
  cardPrice: "span";
  dialog: typeof Dialog;
  badgesChip: typeof Chip;
  text: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    cardTitle: makeNodeComponent("cardTitle"),
    cardSubtitle: makeNodeComponent("cardSubtitle"),
    cardAddressRow: makeNodeComponent("cardAddressRow"),
    cardPrice: makeNodeComponent("cardPrice"),
    dialog: makeNodeComponent("dialog"),
    badgesChip: makeNodeComponent("badgesChip"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
