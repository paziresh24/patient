/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: TJ3HSI2L1TNq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearchContentIcon.module.css"; // plasmic-import: TJ3HSI2L1TNq/css

import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: rTJSPdQduhvU/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: pdD_r88YmSVj/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: h10wdJp1eXad/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: BmcHQiKDl3nz/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: 0DJK2nGF5vml/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: UEgrkBNNlA0k/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: Gz4YUaFhVw-g/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: yW5uO9V8qazZ/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: z2aQXXWFTU5x/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: CaOHNuBE-ADD/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: 7_jxAV8cTPnZ/icon

createPlasmicElementProxy;

export type PlasmicSearchContentIcon__VariantMembers = {};
export type PlasmicSearchContentIcon__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchContentIcon__VariantsArgs;
export const PlasmicSearchContentIcon__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSearchContentIcon__ArgsType = { iconType?: string };
type ArgPropType = keyof PlasmicSearchContentIcon__ArgsType;
export const PlasmicSearchContentIcon__ArgProps = new Array<ArgPropType>(
  "iconType"
);

export type PlasmicSearchContentIcon__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSearchContentIconProps {
  iconType?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchContentIcon__RenderFunc(props: {
  variants: PlasmicSearchContentIcon__VariantsArgs;
  args: PlasmicSearchContentIcon__ArgsType;
  overrides: PlasmicSearchContentIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return $props.iconType === "hospital-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon26Icon
          className={classNames(projectcss.all, sty.svg__jj3CK)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "most_common";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon28Icon
          className={classNames(projectcss.all, sty.svg__hoXUf)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "top-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon27Icon
          className={classNames(projectcss.all, sty.svg__upnnn)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "list-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon29Icon
          className={classNames(projectcss.all, sty.svg__fSH)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "category-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon30Icon
          className={classNames(projectcss.all, sty.svg__wsnUw)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "history-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon31Icon
          className={classNames(projectcss.all, sty.svg___7XW7Y)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "search-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon32Icon
          className={classNames(projectcss.all, sty.svg__uEetf)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "illness";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon33Icon
          className={classNames(projectcss.all, sty.svg___5BjVv)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "smile-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon34Icon
          className={classNames(projectcss.all, sty.svg___2ChPw)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "clock-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon35Icon
          className={classNames(projectcss.all, sty.svg__yb4Zn)}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.iconType === "shield-icon";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon36Icon
          className={classNames(projectcss.all, sty.svg__nrQyL)}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchContentIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchContentIcon__VariantsArgs;
    args?: PlasmicSearchContentIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchContentIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearchContentIcon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchContentIcon__ArgProps,
          internalVariantPropNames: PlasmicSearchContentIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchContentIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchContentIcon";
  } else {
    func.displayName = `PlasmicSearchContentIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchContentIcon = Object.assign(
  // Top-level PlasmicSearchContentIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSearchContentIcon
    internalVariantProps: PlasmicSearchContentIcon__VariantProps,
    internalArgProps: PlasmicSearchContentIcon__ArgProps
  }
);

export default PlasmicSearchContentIcon;
/* prettier-ignore-end */
