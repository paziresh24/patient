/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: OC23iWRW1Dia

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterRowSingle.module.css"; // plasmic-import: OC23iWRW1Dia/css

import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: 4V-TWoJLDufJ/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 1c4VKcJb9X7m/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: E9NGWfCxi3aB/icon

createPlasmicElementProxy;

export type PlasmicFilterRowSingle__VariantMembers = {
  isSelected: "isSelected";
};
export type PlasmicFilterRowSingle__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};
type VariantPropType = keyof PlasmicFilterRowSingle__VariantsArgs;
export const PlasmicFilterRowSingle__VariantProps = new Array<VariantPropType>(
  "isSelected"
);

export type PlasmicFilterRowSingle__ArgsType = {
  label?: string;
  name?: string;
  onClick?: (name: string) => void;
  onDelete?: (name: string) => void;
};
type ArgPropType = keyof PlasmicFilterRowSingle__ArgsType;
export const PlasmicFilterRowSingle__ArgProps = new Array<ArgPropType>(
  "label",
  "name",
  "onClick",
  "onDelete"
);

export type PlasmicFilterRowSingle__OverridesType = {
  root?: Flex__<"div">;
  sortIcon?: Flex__<"svg">;
  text?: Flex__<"div">;
  _delete?: Flex__<"div">;
};

export interface DefaultFilterRowSingleProps {
  label?: string;
  name?: string;
  onClick?: (name: string) => void;
  onDelete?: (name: string) => void;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterRowSingle__RenderFunc(props: {
  variants: PlasmicFilterRowSingle__VariantsArgs;
  args: PlasmicFilterRowSingle__ArgsType;
  overrides: PlasmicFilterRowSingle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_fragment_design_system,
        sty.root,
        { [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runOnClick"] = true
          ? (() => {
              const actionArgs = {
                eventRef: $props["onClick"],
                args: [
                  (() => {
                    try {
                      return $props.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                ]
              };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnClick"] != null &&
          typeof $steps["runOnClick"] === "object" &&
          typeof $steps["runOnClick"].then === "function"
        ) {
          $steps["runOnClick"] = await $steps["runOnClick"];
        }
      }}
      style={{ minWidth: "max-content" }}
    >
      {(
        hasVariant($state, "isSelected", "isSelected")
          ? (() => {
              try {
                return $props.name === "order_items";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return $props.name === "order_items";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <Icon18Icon
          data-plasmic-name={"sortIcon"}
          data-plasmic-override={overrides.sortIcon}
          className={classNames(projectcss.all, sty.sortIcon, {
            [sty.sortIconisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(() => {
        try {
          return $props.name === "filters";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Icon19Icon
          className={classNames(projectcss.all, sty.svg__zaOfU, {
            [sty.svgisSelected__zaOfUjXAqb]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            )
          })}
          role={"img"}
        />
      ) : null}
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textisSelected]: hasVariant($state, "isSelected", "isSelected")
        })}
        onClick={async event => {
          const $steps = {};
        }}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      {(
        hasVariant($state, "isSelected", "isSelected")
          ? (() => {
              try {
                return (
                  $props.name !== "filters" &&
                  $props.name !== "order_items" &&
                  $props.name !== "category"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <div
          data-plasmic-name={"_delete"}
          data-plasmic-override={overrides._delete}
          className={classNames(projectcss.all, sty._delete, {
            [sty._deleteisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return event.stopPropagation();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["runOnDelete"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onDelete"],
                    args: [
                      (() => {
                        try {
                          return $props.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnDelete"] != null &&
              typeof $steps["runOnDelete"] === "object" &&
              typeof $steps["runOnDelete"].then === "function"
            ) {
              $steps["runOnDelete"] = await $steps["runOnDelete"];
            }
          }}
        >
          <Icon13Icon
            className={classNames(projectcss.all, sty.svg__vXxbX, {
              [sty.svgisSelected__vXxbXjXAqb]: hasVariant(
                $state,
                "isSelected",
                "isSelected"
              )
            })}
            role={"img"}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sortIcon", "text", "_delete"],
  sortIcon: ["sortIcon"],
  text: ["text"],
  _delete: ["_delete"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sortIcon: "svg";
  text: "div";
  _delete: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterRowSingle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterRowSingle__VariantsArgs;
    args?: PlasmicFilterRowSingle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterRowSingle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFilterRowSingle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterRowSingle__ArgProps,
          internalVariantPropNames: PlasmicFilterRowSingle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterRowSingle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterRowSingle";
  } else {
    func.displayName = `PlasmicFilterRowSingle.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterRowSingle = Object.assign(
  // Top-level PlasmicFilterRowSingle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sortIcon: makeNodeComponent("sortIcon"),
    text: makeNodeComponent("text"),
    _delete: makeNodeComponent("_delete"),

    // Metadata about props expected for PlasmicFilterRowSingle
    internalVariantProps: PlasmicFilterRowSingle__VariantProps,
    internalArgProps: PlasmicFilterRowSingle__ArgProps
  }
);

export default PlasmicFilterRowSingle;
/* prettier-ignore-end */
