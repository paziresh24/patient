/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: d6rjYjjJdnoM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: ZuA2HO8MLBhh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearchContentSlider.module.css"; // plasmic-import: d6rjYjjJdnoM/css

createPlasmicElementProxy;

export type PlasmicSearchContentSlider__VariantMembers = {};
export type PlasmicSearchContentSlider__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchContentSlider__VariantsArgs;
export const PlasmicSearchContentSlider__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSearchContentSlider__ArgsType = { data?: any };
type ArgPropType = keyof PlasmicSearchContentSlider__ArgsType;
export const PlasmicSearchContentSlider__ArgProps = new Array<ArgPropType>(
  "data"
);

export type PlasmicSearchContentSlider__OverridesType = {
  root?: Flex__<"div">;
  getDoctorRate?: Flex__<typeof ApiRequest>;
  productCard?: Flex__<typeof ProductCard>;
};

export interface DefaultSearchContentSliderProps {
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchContentSlider__RenderFunc(props: {
  variants: PlasmicSearchContentSlider__VariantsArgs;
  args: PlasmicSearchContentSlider__ArgsType;
  overrides: PlasmicSearchContentSlider__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getDoctorRate.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getDoctorRate.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getDoctorRate.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"getDoctorRate"}
        data-plasmic-override={overrides.getDoctorRate}
        className={classNames("__wab_instance", sty.getDoctorRate)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getDoctorRate", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getDoctorRate", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getDoctorRate", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={undefined}
        url={(() => {
          try {
            return (() => {
              const slug = $props.data.url.split("/")?.[2];
              return `https://apigw.paziresh24.com/ravi/v1/rate?where=(doctor_slug,eq,${slug})`;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <ProductCard
          data-plasmic-name={"productCard"}
          data-plasmic-override={overrides.productCard}
          avatarAltText={(() => {
            try {
              return $props.data.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          avatarRingColor={(() => {
            try {
              return $props.data.is_online ? "green" : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          avatarSrc={(() => {
            try {
              return "https://cdn.paziresh24.com" + $props.data.image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          avatarVerifiedTick={false}
          className={classNames("__wab_instance", sty.productCard)}
          isSingleCard={true}
          rateCount={(() => {
            try {
              return $state.getDoctorRate.data.list[0].count_rates;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          satisfactionPercent={(() => {
            try {
              return (
                (
                  ((+$state.getDoctorRate.data.list[0]?.quality_of_treatment ??
                    0) +
                    (+$state.getDoctorRate.data.list[0]?.doctor_encounter ??
                      0) +
                    (+$state.getDoctorRate.data.list[0]?.explanation_of_issue ??
                      0)) /
                  3
                ).toFixed(1) * 20
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          slug={(() => {
            try {
              return $props.data.url.split("/")?.[2];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          subTitle={(() => {
            try {
              return $props.data.sub_title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          title={(() => {
            try {
              return $props.data.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          url={(() => {
            try {
              return {
                destination: $props.data.url,
                title: $props.data.name,
                openInNewTab: false
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "getDoctorRate", "productCard"],
  getDoctorRate: ["getDoctorRate", "productCard"],
  productCard: ["productCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  getDoctorRate: typeof ApiRequest;
  productCard: typeof ProductCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchContentSlider__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchContentSlider__VariantsArgs;
    args?: PlasmicSearchContentSlider__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchContentSlider__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchContentSlider__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchContentSlider__ArgProps,
          internalVariantPropNames: PlasmicSearchContentSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchContentSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchContentSlider";
  } else {
    func.displayName = `PlasmicSearchContentSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchContentSlider = Object.assign(
  // Top-level PlasmicSearchContentSlider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    getDoctorRate: makeNodeComponent("getDoctorRate"),
    productCard: makeNodeComponent("productCard"),

    // Metadata about props expected for PlasmicSearchContentSlider
    internalVariantProps: PlasmicSearchContentSlider__VariantProps,
    internalArgProps: PlasmicSearchContentSlider__ArgProps
  }
);

export default PlasmicSearchContentSlider;
/* prettier-ignore-end */
