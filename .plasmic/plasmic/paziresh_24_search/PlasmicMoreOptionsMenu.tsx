/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: v0iNnwZxOTSN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@/common/fragment/components/popover"; // plasmic-import: RaDHRLat0tPP/codeComponent
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicMoreOptionsMenu.module.css"; // plasmic-import: v0iNnwZxOTSN/css

import MenuIcon from "../fragment_icons/icons/PlasmicIcon__Menu"; // plasmic-import: dmfb3Ga2IoVt/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: yKa-YpcgLEXS/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: ndjBgkfafmiq/icon

createPlasmicElementProxy;

export type PlasmicMoreOptionsMenu__VariantMembers = {};
export type PlasmicMoreOptionsMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoreOptionsMenu__VariantsArgs;
export const PlasmicMoreOptionsMenu__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoreOptionsMenu__ArgsType = {
  searchCardId?: string;
  title?: string;
  destinationPageUrl?: string;
};
type ArgPropType = keyof PlasmicMoreOptionsMenu__ArgsType;
export const PlasmicMoreOptionsMenu__ArgProps = new Array<ArgPropType>(
  "searchCardId",
  "title",
  "destinationPageUrl"
);

export type PlasmicMoreOptionsMenu__OverridesType = {
  actionMenu?: Flex__<"div">;
  popover?: Flex__<typeof Popover>;
  freeBox?: Flex__<"div">;
};

export interface DefaultMoreOptionsMenuProps {
  searchCardId?: string;
  title?: string;
  destinationPageUrl?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoreOptionsMenu__RenderFunc(props: {
  variants: PlasmicMoreOptionsMenu__VariantsArgs;
  args: PlasmicMoreOptionsMenu__ArgsType;
  overrides: PlasmicMoreOptionsMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "popover"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"actionMenu"}
      data-plasmic-override={overrides.actionMenu}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.actionMenu
      )}
    >
      <Popover
        data-plasmic-name={"popover"}
        data-plasmic-override={overrides.popover}
        className={classNames("__wab_instance", sty.popover)}
        content={
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4CuTj
                  )}
                >
                  {
                    "\u06af\u0632\u0627\u0631\u0634 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u0634\u062a\u0628\u0627\u0647"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__cCw8U)}
              link={(() => {
                try {
                  return (() => {
                    const encodedUrl = globalThis.location.href
                      .replace(/#/g, "%23")
                      .replace(/&/g, "%26")
                      .replace(/:/g, "%3A")
                      .replace(/\//g, "%2F")
                      .replace(/\?/g, "%3F");
                    const reportUrl = `https://apigw.paziresh24.com/v1/hami/report?searchCardId=${$props.searchCardId}&name=${$props.title}&url=${encodedUrl}`;
                    return reportUrl;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              outline={true}
              showStartIcon={true}
              startIcon={
                <Icon43Icon
                  className={classNames(projectcss.all, sty.svg__x0RRr)}
                  role={"img"}
                />
              }
              target={true}
            />

            {(() => {
              try {
                return !!$props.destinationPageUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u1CbF
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "اشتراک گذاری این نتیجه";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc \u0627\u06cc\u0646 \u0646\u062a\u06cc\u062c\u0647 \u0628\u0627 \u0628\u0642\u06cc\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                }
                className={classNames("__wab_instance", sty.button___4N5QR)}
                onClick={async event => {
                  const $steps = {};

                  $steps["shortenurl"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/v1/n8n-search/webhook/shorten_url",
                            undefined,
                            (() => {
                              try {
                                return {
                                  url:
                                    $props.destinationPageUrl +
                                    "?utm_source=paziresh24&utm_medium=share_button&utm_campaign=search_results"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["shortenurl"] != null &&
                    typeof $steps["shortenurl"] === "object" &&
                    typeof $steps["shortenurl"].then === "function"
                  ) {
                    $steps["shortenurl"] = await $steps["shortenurl"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (function () {
                              const textToShare =
                                "مشاهده " + $props.title + " در پذیرش24";
                              const urlToShare = $steps.shortenurl.data.link;
                              if (navigator.share) {
                                navigator
                                  .share({
                                    title: $props.title,
                                    text: textToShare,
                                    url: urlToShare
                                  })
                                  .then(() => {
                                    console.log("Content shared successfully");
                                  })
                                  .catch(error => {
                                    console.error(
                                      "Error sharing content:",
                                      error
                                    );
                                  });
                              } else {
                                alert(
                                  "Web Share API is not supported on this browser or platform."
                                );
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                outline={true}
                showStartIcon={true}
                startIcon={
                  <Icon45Icon
                    className={classNames(projectcss.all, sty.svg__ykHkg)}
                    role={"img"}
                  />
                }
                target={true}
              />
            ) : null}
          </Stack__>
        }
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["popover", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["popover", "open"])}
        ref={ref => {
          $refs["popover"] = ref;
        }}
        trigger={
          <MenuIcon
            className={classNames(projectcss.all, sty.svg__vBtLl)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  actionMenu: ["actionMenu", "popover", "freeBox"],
  popover: ["popover", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  actionMenu: "div";
  popover: typeof Popover;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoreOptionsMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoreOptionsMenu__VariantsArgs;
    args?: PlasmicMoreOptionsMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoreOptionsMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMoreOptionsMenu__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoreOptionsMenu__ArgProps,
          internalVariantPropNames: PlasmicMoreOptionsMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoreOptionsMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "actionMenu") {
    func.displayName = "PlasmicMoreOptionsMenu";
  } else {
    func.displayName = `PlasmicMoreOptionsMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMoreOptionsMenu = Object.assign(
  // Top-level PlasmicMoreOptionsMenu renders the root element
  makeNodeComponent("actionMenu"),
  {
    // Helper components rendering sub-elements
    popover: makeNodeComponent("popover"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicMoreOptionsMenu
    internalVariantProps: PlasmicMoreOptionsMenu__VariantProps,
    internalArgProps: PlasmicMoreOptionsMenu__ArgProps
  }
);

export default PlasmicMoreOptionsMenu;
/* prettier-ignore-end */
