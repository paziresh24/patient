// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: SctdwrC6-ku4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: 6w9lKEd-r02I/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import SearchResults from "../../SearchResults"; // plasmic-import: XhSI4pxMLR3L/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearchPage.module.css"; // plasmic-import: SctdwrC6-ku4/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: QrVR5pllCw55/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 6y6ixEKeF2Sb/icon

createPlasmicElementProxy;

export type PlasmicSearchPage__VariantMembers = {};
export type PlasmicSearchPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchPage__VariantsArgs;
export const PlasmicSearchPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSearchPage__ArgsType = {};
type ArgPropType = keyof PlasmicSearchPage__ArgsType;
export const PlasmicSearchPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchPage__OverridesType = {
  root?: Flex__<"div">;
  searchTextInput?: Flex__<typeof TextInput>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  searchResults?: Flex__<typeof SearchResults>;
};

export interface DefaultSearchPageProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchPage__RenderFunc(props: {
  variants: PlasmicSearchPage__VariantsArgs;
  args: PlasmicSearchPage__ArgsType;
  overrides: PlasmicSearchPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <TextInput
        data-plasmic-name={"searchTextInput"}
        data-plasmic-override={overrides.searchTextInput}
        className={classNames("__wab_instance", sty.searchTextInput)}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["searchTextInput", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={
          "\u0633\u0631\u062f\u0631\u062f\u060c \u0642\u0627\u0639\u062f\u06af\u06cc \u0646\u0627\u0645\u0646\u0638\u0645\u060c \u06af\u0648\u0627\u0631\u0634 \u0648 ..."
        }
        value={
          generateStateValueProp($state, ["searchTextInput", "value"]) ?? ""
        }
      />

      <DataFetcher
        data-plasmic-name={"httpRestApiFetcher"}
        data-plasmic-override={overrides.httpRestApiFetcher}
        className={classNames("__wab_instance", sty.httpRestApiFetcher)}
        dataName={"fetchedData"}
        errorDisplay={
          <DataCtxReader__>{$ctx => "Error fetching data"}</DataCtxReader__>
        }
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={
          <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
        }
        method={"GET"}
        noLayout={false}
        url={(() => {
          try {
            return (
              "https://apigw.paziresh24.com/v1/jahannama?from=0&size=10&docInfo=1&query=" +
              $state.searchTextInput.value
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <SearchResults
              data-plasmic-name={"searchResults"}
              data-plasmic-override={overrides.searchResults}
              className={classNames("__wab_instance", sty.searchResults)}
              imageSrcPrefix={"https://cdn.paziresh24.com"}
              searchResultResponse={(() => {
                try {
                  return {
                    search: {
                      query_id: $ctx.fetchedData.entity.queryId,
                      total: $ctx.fetchedData.entity.totalHits,
                      is_landing: false,
                      pagination: {
                        limit: 20,
                        page: 1
                      },
                      result: $ctx.fetchedData.entity.results.map(doctor => ({
                        _id: doctor.documentId,
                        id: doctor.source.doctor_id,
                        server_id: doctor.source.server_id,
                        type: "doctor",
                        title: doctor.source.display_name,
                        prefix: doctor.source.prefix || "",
                        image: `/getImage/p24/search-men/${doctor.source.image}?size=150`,
                        view: doctor.source.number_of_visits,
                        display_expertise: doctor.source.expertises
                          .map(expertise => expertise.expertise.name)
                          .join(", "),
                        satisfaction: doctor.source.satisfaction || 0,
                        rates_count: doctor.source.rates_count || 0,
                        centers: doctor.source.centers.map(center => ({
                          id: center.id,
                          status: center.status,
                          user_center_id: center.user_center_id,
                          server_id: center.server_id,
                          name: center.name,
                          display_number: center.display_number,
                          address: center.address,
                          province_name: center.province_name,
                          city_name: center.city_name,
                          center_type: center.center_type,
                          map: {
                            lat: center.map ? center.map.lat : null,
                            lon: center.map ? center.map.lon : null
                          },
                          active_booking: center.active_booking
                        })),
                        display_address_full: `${doctor.source.city_name}, ${doctor.source.centers[0].address}`,
                        display_address: [
                          ...new Set(
                            doctor.source.centers
                              .filter(center => center.id != "5532")
                              .map(center => center.city_name)
                          )
                        ].join(", "),
                        waiting_time: null,
                        badges: [],
                        is_bulk: true,
                        consult_active_booking:
                          doctor.source.consult_active_booking,
                        presence_active_booking:
                          doctor.source.presence_active_booking,
                        url: `/dr/${doctor.slug}`,
                        actions: [
                          {
                            title: "مشاهده",
                            outline: true,
                            top_title: "",
                            url: `/dr/${doctor.slug}`
                          }
                        ],
                        experience: doctor.source.experience,
                        position: 2, // Example position, you might assign a specific value here
                        has_presciption: false,
                        insurances: doctor.source.insurances,
                        experiment_details: {
                          search_index: "slim_clinic",
                          consult_search_index: "slim_clinic_online_visit"
                        },
                        expertises: doctor.source.expertises,
                        gender: doctor.source.gender,
                        expertise: doctor.source.expertise,
                        rate_info: doctor.source.rate_info,
                        consult_services: doctor.source.consult_services,
                        doctor_id: doctor.source.doctor_id,
                        number_of_visits: doctor.source.number_of_visits,
                        waiting_time_info: doctor.source.waiting_time_info,
                        slug: doctor.slug,
                        graduation_date: doctor.source.graduation_date,
                        star: doctor.source.star,
                        services: doctor.source.services.map(service => ({
                          workhours: service.workhours,
                          center_id: service.center_id,
                          id: service.id
                        })),
                        university_name: doctor.source.university_name,
                        display_name: doctor.source.display_name,
                        record_type: doctor.source.record_type,
                        center_id: doctor.source.center_id,
                        name: doctor.source.name,
                        medical_code: doctor.source.medical_code,
                        calculated_rate: doctor.source.calculated_rate
                      }))
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          )}
        </DataCtxReader__>
      </DataFetcher>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "searchTextInput", "httpRestApiFetcher", "searchResults"],
  searchTextInput: ["searchTextInput"],
  httpRestApiFetcher: ["httpRestApiFetcher", "searchResults"],
  searchResults: ["searchResults"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  searchTextInput: typeof TextInput;
  httpRestApiFetcher: typeof DataFetcher;
  searchResults: typeof SearchResults;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchPage__VariantsArgs;
    args?: PlasmicSearchPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearchPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchPage__ArgProps,
          internalVariantPropNames: PlasmicSearchPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchPage";
  } else {
    func.displayName = `PlasmicSearchPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchPage = Object.assign(
  // Top-level PlasmicSearchPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchTextInput: makeNodeComponent("searchTextInput"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    searchResults: makeNodeComponent("searchResults"),

    // Metadata about props expected for PlasmicSearchPage
    internalVariantProps: PlasmicSearchPage__VariantProps,
    internalArgProps: PlasmicSearchPage__ArgProps
  }
);

export default PlasmicSearchPage;
/* prettier-ignore-end */
