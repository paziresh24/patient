// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: AK8GMS7oZ_Fh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: g0pqddGARgnV/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterItemSingleSelect.module.css"; // plasmic-import: AK8GMS7oZ_Fh/css

import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon

createPlasmicElementProxy;

export type PlasmicFilterItemSingleSelect__VariantMembers = {};
export type PlasmicFilterItemSingleSelect__VariantsArgs = {};
type VariantPropType = keyof PlasmicFilterItemSingleSelect__VariantsArgs;
export const PlasmicFilterItemSingleSelect__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFilterItemSingleSelect__ArgsType = {
  label?: string;
  options?: any;
  defaultSelected?: any;
  onSelect?: (itemsSelected: any) => void;
};
type ArgPropType = keyof PlasmicFilterItemSingleSelect__ArgsType;
export const PlasmicFilterItemSingleSelect__ArgProps = new Array<ArgPropType>(
  "label",
  "options",
  "defaultSelected",
  "onSelect"
);

export type PlasmicFilterItemSingleSelect__OverridesType = {
  root?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  freeBox?: Flex__<"div">;
};

export interface DefaultFilterItemSingleSelectProps {
  label?: string;
  options?: any;
  defaultSelected?: any;
  onSelect?: (itemsSelected: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterItemSingleSelect__RenderFunc(props: {
  variants: PlasmicFilterItemSingleSelect__VariantsArgs;
  args: PlasmicFilterItemSingleSelect__ArgsType;
  overrides: PlasmicFilterItemSingleSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          defaultSelected: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selected",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props?.defaultSelected ? $props.defaultSelected : [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__shEly
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.open || $props.options <= 6
              ? $props.options
              : $props.options?.slice(0, 6);
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.checkbox),
            isChecked:
              generateStateValueProp($state, [
                "checkbox",
                __plasmic_idx_0,
                "isChecked"
              ]) ?? false,
            key: currentIndex,
            onChange: async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "checkbox",
                  __plasmic_idx_0,
                  "isChecked"
                ])(eventArgs[0]);
              }).apply(null, eventArgs);
              (async isChecked => {
                const $steps = {};

                $steps["updateSelected2"] = !isChecked
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selected"]
                        },
                        operation: 0,
                        value: $state.selected?.filter?.(
                          item => item !== currentItem.name
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelected2"] != null &&
                  typeof $steps["updateSelected2"] === "object" &&
                  typeof $steps["updateSelected2"].then === "function"
                ) {
                  $steps["updateSelected2"] = await $steps["updateSelected2"];
                }

                $steps["updateSelected"] = isChecked
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selected"]
                        },
                        operation: 5,
                        value: currentItem.name
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const arr = $stateGet(objRoot, variablePath);
                        arr.push(value);
                        return arr;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelected"] != null &&
                  typeof $steps["updateSelected"] === "object" &&
                  typeof $steps["updateSelected"].then === "function"
                ) {
                  $steps["updateSelected"] = await $steps["updateSelected"];
                }

                $steps["runOnSelect"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSelect"],
                        args: [
                          (() => {
                            try {
                              return $state.selected;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnSelect"] != null &&
                  typeof $steps["runOnSelect"] === "object" &&
                  typeof $steps["runOnSelect"].then === "function"
                ) {
                  $steps["runOnSelect"] = await $steps["runOnSelect"];
                }
              }).apply(null, eventArgs);
            },
            value: (() => {
              try {
                return currentItem.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          };

          initializePlasmicStates(
            $state,
            [
              {
                name: "checkbox[].isChecked",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return $state.selected?.includes(currentItem.name);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
              }
            ],
            [__plasmic_idx_0]
          );
          return (
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              {...child$Props}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tCoRz
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nxNgD
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `(${currentItem.count})`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Checkbox>
          );
        })();
      })}
      {(() => {
        try {
          return $props.options.length > 6;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
          onClick={async event => {
            const $steps = {};

            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["open"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpen"] != null &&
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await $steps["updateOpen"];
            }
          }}
        >
          {(() => {
            try {
              return !$state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronDownIcon
              className={classNames(projectcss.all, sty.svg__lrujQ)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ChevronUpIcon
              className={classNames(projectcss.all, sty.svg__uaKsg)}
              role={"img"}
            />
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7Ruk7
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.open ? "مشاهده کمتر" : "مشاهده بیشتر";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0645\u0634\u0627\u0647\u062f\u0647 \u0628\u06cc\u0634\u062a\u0631";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "checkbox", "freeBox"],
  checkbox: ["checkbox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterItemSingleSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterItemSingleSelect__VariantsArgs;
    args?: PlasmicFilterItemSingleSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterItemSingleSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterItemSingleSelect__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterItemSingleSelect__ArgProps,
          internalVariantPropNames: PlasmicFilterItemSingleSelect__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterItemSingleSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterItemSingleSelect";
  } else {
    func.displayName = `PlasmicFilterItemSingleSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterItemSingleSelect = Object.assign(
  // Top-level PlasmicFilterItemSingleSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFilterItemSingleSelect
    internalVariantProps: PlasmicFilterItemSingleSelect__VariantProps,
    internalArgProps: PlasmicFilterItemSingleSelect__ArgProps
  }
);

export default PlasmicFilterItemSingleSelect;
/* prettier-ignore-end */
