/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: Bvcm4PjzJBd8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FilterExpertiseItem from "../../FilterExpertiseItem"; // plasmic-import: Lt7HZLy_mQCZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterExpertise.module.css"; // plasmic-import: Bvcm4PjzJBd8/css

createPlasmicElementProxy;

export type PlasmicFilterExpertise__VariantMembers = {
  isSelected: "isSelected";
};
export type PlasmicFilterExpertise__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
};
type VariantPropType = keyof PlasmicFilterExpertise__VariantsArgs;
export const PlasmicFilterExpertise__VariantProps = new Array<VariantPropType>(
  "isSelected"
);

export type PlasmicFilterExpertise__ArgsType = {
  items?: any;
  selectedCategory?: string;
  selectedSubCategory?: string;
};
type ArgPropType = keyof PlasmicFilterExpertise__ArgsType;
export const PlasmicFilterExpertise__ArgProps = new Array<ArgPropType>(
  "items",
  "selectedCategory",
  "selectedSubCategory"
);

export type PlasmicFilterExpertise__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  freeBox?: Flex__<"div">;
  filterExpertiseItem?: Flex__<typeof FilterExpertiseItem>;
};

export interface DefaultFilterExpertiseProps {
  items?: any;
  selectedCategory?: string;
  selectedSubCategory?: string;
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterExpertise__RenderFunc(props: {
  variants: PlasmicFilterExpertise__VariantsArgs;
  args: PlasmicFilterExpertise__ArgsType;
  overrides: PlasmicFilterExpertise__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root,
        { [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected") }
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link,
          {
            [sty.linkisSelected]: hasVariant($state, "isSelected", "isSelected")
          }
        )}
        component={Link}
        href={(() => {
          try {
            return $props.items.find(
              item => item.value === $props.selectedCategory
            ).url;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.items.find(
                item => item.value === $props.selectedCategory
              ).title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u062a\u062e\u0635\u0635";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </PlasmicLink__>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, "scrollBar", {
          [sty.freeBoxisSelected]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          )
        })}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return !!$props.selectedCategory
                ? $props.items.find(
                    cat => cat.value === $props.selectedCategory
                  ).sub_categories
                : $props.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <FilterExpertiseItem
              data-plasmic-name={"filterExpertiseItem"}
              data-plasmic-override={overrides.filterExpertiseItem}
              className={classNames("__wab_instance", sty.filterExpertiseItem, {
                [sty.filterExpertiseItemisSelected]: hasVariant(
                  $state,
                  "isSelected",
                  "isSelected"
                )
              })}
              isSelected={(() => {
                try {
                  return currentItem.value === $props.selectedSubCategory;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              link={(() => {
                try {
                  return currentItem.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async (value, link) => {
                const $steps = {};

                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return link;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
              title={(() => {
                try {
                  return currentItem.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              value={(() => {
                try {
                  return currentItem.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "freeBox", "filterExpertiseItem"],
  link: ["link"],
  freeBox: ["freeBox", "filterExpertiseItem"],
  filterExpertiseItem: ["filterExpertiseItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  freeBox: "div";
  filterExpertiseItem: typeof FilterExpertiseItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterExpertise__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterExpertise__VariantsArgs;
    args?: PlasmicFilterExpertise__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterExpertise__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterExpertise__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterExpertise__ArgProps,
          internalVariantPropNames: PlasmicFilterExpertise__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterExpertise__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterExpertise";
  } else {
    func.displayName = `PlasmicFilterExpertise.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterExpertise = Object.assign(
  // Top-level PlasmicFilterExpertise renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    freeBox: makeNodeComponent("freeBox"),
    filterExpertiseItem: makeNodeComponent("filterExpertiseItem"),

    // Metadata about props expected for PlasmicFilterExpertise
    internalVariantProps: PlasmicFilterExpertise__VariantProps,
    internalArgProps: PlasmicFilterExpertise__ArgProps
  }
);

export default PlasmicFilterExpertise;
/* prettier-ignore-end */
