/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: Z5K_XiJUvXFD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FilterList from "../../FilterList"; // plasmic-import: qU4-tv66hXdh/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterListView.module.css"; // plasmic-import: Z5K_XiJUvXFD/css

createPlasmicElementProxy;

export type PlasmicFilterListView__VariantMembers = {
  hideBackground: "hideBackground";
};
export type PlasmicFilterListView__VariantsArgs = {
  hideBackground?: SingleBooleanChoiceArg<"hideBackground">;
};
type VariantPropType = keyof PlasmicFilterListView__VariantsArgs;
export const PlasmicFilterListView__VariantProps = new Array<VariantPropType>(
  "hideBackground"
);

export type PlasmicFilterListView__ArgsType = {
  items?: any;
  onClick?: (name: string, value: string) => void;
  selected?: any;
};
type ArgPropType = keyof PlasmicFilterListView__ArgsType;
export const PlasmicFilterListView__ArgProps = new Array<ArgPropType>(
  "items",
  "onClick",
  "selected"
);

export type PlasmicFilterListView__OverridesType = {
  root?: Flex__<"div">;
  filterList?: Flex__<typeof FilterList>;
};

export interface DefaultFilterListViewProps {
  items?: any;
  onClick?: (name: string, value: string) => void;
  selected?: any;
  hideBackground?: SingleBooleanChoiceArg<"hideBackground">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterListView__RenderFunc(props: {
  variants: PlasmicFilterListView__VariantsArgs;
  args: PlasmicFilterListView__ArgsType;
  overrides: PlasmicFilterListView__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hideBackground",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideBackground
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothideBackground]: hasVariant(
            $state,
            "hideBackground",
            "hideBackground"
          )
        }
      )}
    >
      <FilterList
        data-plasmic-name={"filterList"}
        data-plasmic-override={overrides.filterList}
        className={classNames("__wab_instance", sty.filterList, {
          [sty.filterListhideBackground]: hasVariant(
            $state,
            "hideBackground",
            "hideBackground"
          )
        })}
        filters={(() => {
          try {
            return $props.items;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async (name, value) => {
          const $steps = {};

          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = {
                  eventRef: $props["onClick"],
                  args: [
                    (() => {
                      try {
                        return name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    (() => {
                      try {
                        return value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
        selected={(() => {
          try {
            return $props.selected;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "filterList"],
  filterList: ["filterList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  filterList: typeof FilterList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterListView__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterListView__VariantsArgs;
    args?: PlasmicFilterListView__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterListView__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterListView__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterListView__ArgProps,
          internalVariantPropNames: PlasmicFilterListView__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterListView__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterListView";
  } else {
    func.displayName = `PlasmicFilterListView.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterListView = Object.assign(
  // Top-level PlasmicFilterListView renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    filterList: makeNodeComponent("filterList"),

    // Metadata about props expected for PlasmicFilterListView
    internalVariantProps: PlasmicFilterListView__VariantProps,
    internalArgProps: PlasmicFilterListView__ArgProps
  }
);

export default PlasmicFilterListView;
/* prettier-ignore-end */
