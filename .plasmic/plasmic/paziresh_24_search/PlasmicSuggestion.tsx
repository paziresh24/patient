// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: f83TZwYbQ2l0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SuggestionInput from "../../SuggestionInput"; // plasmic-import: KILAc4YdRdGh/component
import SuggestedItem from "../../SuggestedItem"; // plasmic-import: Q8q3z8vRCZn_/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSuggestion.module.css"; // plasmic-import: f83TZwYbQ2l0/css

createPlasmicElementProxy;

export type PlasmicSuggestion__VariantMembers = {};
export type PlasmicSuggestion__VariantsArgs = {};
type VariantPropType = keyof PlasmicSuggestion__VariantsArgs;
export const PlasmicSuggestion__VariantProps = new Array<VariantPropType>();

export type PlasmicSuggestion__ArgsType = {
  onSuggestionInputTextInputValueChange?: (val: string) => void;
  onSelect?: (searchQuery: string) => void;
  defaultSearchQuery?: string;
  suggestionInputInputQueryText?: string;
  onSuggestionInputInputQueryTextChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSuggestion__ArgsType;
export const PlasmicSuggestion__ArgProps = new Array<ArgPropType>(
  "onSuggestionInputTextInputValueChange",
  "onSelect",
  "defaultSearchQuery",
  "suggestionInputInputQueryText",
  "onSuggestionInputInputQueryTextChange"
);

export type PlasmicSuggestion__OverridesType = {
  root?: Flex__<"div">;
  suggestionInput?: Flex__<typeof SuggestionInput>;
  fragmentApiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultSuggestionProps {
  onSuggestionInputTextInputValueChange?: (val: string) => void;
  onSelect?: (searchQuery: string) => void;
  defaultSearchQuery?: string;
  suggestionInputInputQueryText?: string;
  onSuggestionInputInputQueryTextChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSuggestion__RenderFunc(props: {
  variants: PlasmicSuggestion__VariantsArgs;
  args: PlasmicSuggestion__ArgsType;
  overrides: PlasmicSuggestion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "suggestionInput.suggestedContentVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "fragmentApiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "fragmentApiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionInput.suggestionTextInputValue",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultSearchQuery;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onChangeProp: "onSuggestionInputTextInputValueChange"
      },
      {
        path: "suggestionInput.selectedOption",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionInput.inputQueryText",
        type: "writable",
        variableType: "text",

        valueProp: "suggestionInputInputQueryText",
        onChangeProp: "onSuggestionInputInputQueryTextChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <SuggestionInput
        data-plasmic-name={"suggestionInput"}
        data-plasmic-override={overrides.suggestionInput}
        className={classNames("__wab_instance", sty.suggestionInput)}
        inputQueryText={generateStateValueProp($state, [
          "suggestionInput",
          "inputQueryText"
        ])}
        onInputQueryTextChange={generateStateOnChangeProp($state, [
          "suggestionInput",
          "inputQueryText"
        ])}
        onSelect={async option => {
          const $steps = {};

          $steps["runOnSelect"] =
            option > 0
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onSelect"],
                    args: [
                      (() => {
                        try {
                          return $state.fragmentApiRequest.data.entity
                            .topQuerySuggestions[option];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runOnSelect"] != null &&
            typeof $steps["runOnSelect"] === "object" &&
            typeof $steps["runOnSelect"].then === "function"
          ) {
            $steps["runOnSelect"] = await $steps["runOnSelect"];
          }

          $steps["onSelectInteractProb"] =
            option === 0
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onSelect"],
                    args: [
                      (() => {
                        try {
                          return $state.suggestionInput
                            .suggestionTextInputValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["onSelectInteractProb"] != null &&
            typeof $steps["onSelectInteractProb"] === "object" &&
            typeof $steps["onSelectInteractProb"].then === "function"
          ) {
            $steps["onSelectInteractProb"] = await $steps[
              "onSelectInteractProb"
            ];
          }
        }}
        onSelectedOptionChange={generateStateOnChangeProp($state, [
          "suggestionInput",
          "selectedOption"
        ])}
        onSuggestedContentVisibilityChange={generateStateOnChangeProp($state, [
          "suggestionInput",
          "suggestedContentVisibility"
        ])}
        onSuggestionTextInputValueChange={generateStateOnChangeProp($state, [
          "suggestionInput",
          "suggestionTextInputValue"
        ])}
        optionsLength={(() => {
          try {
            return (
              $state.fragmentApiRequest.data.entity.topQuerySuggestions
                ?.length + 1
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return 0;
            }
            throw e;
          }
        })()}
        suggestedContentVisibility={generateStateValueProp($state, [
          "suggestionInput",
          "suggestedContentVisibility"
        ])}
        suggestionContents2={
          <React.Fragment>
            {(() => {
              try {
                return $state.suggestionInput.suggestionTextInputValue;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__r4Ka)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runOnSelect"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onSelect"],
                          args: [
                            (() => {
                              try {
                                return $state.suggestionInput
                                  .suggestionTextInputValue;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnSelect"] != null &&
                    typeof $steps["runOnSelect"] === "object" &&
                    typeof $steps["runOnSelect"].then === "function"
                  ) {
                    $steps["runOnSelect"] = await $steps["runOnSelect"];
                  }

                  $steps["updateSuggestionInputSuggestedContentVisibility"] =
                    true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "suggestionInput",
                                "suggestedContentVisibility"
                              ]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateSuggestionInputSuggestedContentVisibility"] !=
                      null &&
                    typeof $steps[
                      "updateSuggestionInputSuggestedContentVisibility"
                    ] === "object" &&
                    typeof $steps[
                      "updateSuggestionInputSuggestedContentVisibility"
                    ].then === "function"
                  ) {
                    $steps["updateSuggestionInputSuggestedContentVisibility"] =
                      await $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ];
                  }
                }}
              >
                <SuggestedItem
                  className={classNames(
                    "__wab_instance",
                    sty.suggestedItem___9AqF7
                  )}
                  name={(() => {
                    try {
                      return $state.suggestionInput.suggestionTextInputValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  selected={(() => {
                    try {
                      return 0 === $state.suggestionInput.selectedOption;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            ) : null}
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.fragmentApiRequest.data.entity
                    .topQuerySuggestions;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__ac64N)}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runOnSelect"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onSelect"],
                            args: [
                              (() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnSelect"] != null &&
                      typeof $steps["runOnSelect"] === "object" &&
                      typeof $steps["runOnSelect"].then === "function"
                    ) {
                      $steps["runOnSelect"] = await $steps["runOnSelect"];
                    }

                    $steps["updateSuggestionInputSuggestedContentVisibility"] =
                      true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "suggestionInput",
                                  "suggestedContentVisibility"
                                ]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ] != null &&
                      typeof $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ] === "object" &&
                      typeof $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ].then === "function"
                    ) {
                      $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ] = await $steps[
                        "updateSuggestionInputSuggestedContentVisibility"
                      ];
                    }
                  }}
                >
                  <SuggestedItem
                    className={classNames(
                      "__wab_instance",
                      sty.suggestedItem__emdMt
                    )}
                    name={(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    selected={(() => {
                      try {
                        return (
                          currentIndex + 1 ===
                          $state.suggestionInput.selectedOption
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              );
            })}
          </React.Fragment>
        }
        suggestionTextInputValue={generateStateValueProp($state, [
          "suggestionInput",
          "suggestionTextInputValue"
        ])}
      />

      <ApiRequest
        data-plasmic-name={"fragmentApiRequest"}
        data-plasmic-override={overrides.fragmentApiRequest}
        className={classNames("__wab_instance", sty.fragmentApiRequest)}
        config={{ headers: { apikey: "gwiuATzYDmeayT7eqmbHG2obv6lGpqJa" } }}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={generateStateOnChangeProp($state, [
          "fragmentApiRequest",
          "error"
        ])}
        onLoading={generateStateOnChangeProp($state, [
          "fragmentApiRequest",
          "loading"
        ])}
        onSuccess={generateStateOnChangeProp($state, [
          "fragmentApiRequest",
          "data"
        ])}
        params={(() => {
          try {
            return {
              query: $state.suggestionInput?.suggestionTextInputValue ?? ""
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        url={"https://searchia.ir/api/v2/qs/index/slim_clinic_query_su"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "suggestionInput", "fragmentApiRequest"],
  suggestionInput: ["suggestionInput"],
  fragmentApiRequest: ["fragmentApiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  suggestionInput: typeof SuggestionInput;
  fragmentApiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSuggestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSuggestion__VariantsArgs;
    args?: PlasmicSuggestion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSuggestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSuggestion__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSuggestion__ArgProps,
          internalVariantPropNames: PlasmicSuggestion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSuggestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSuggestion";
  } else {
    func.displayName = `PlasmicSuggestion.${nodeName}`;
  }
  return func;
}

export const PlasmicSuggestion = Object.assign(
  // Top-level PlasmicSuggestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    suggestionInput: makeNodeComponent("suggestionInput"),
    fragmentApiRequest: makeNodeComponent("fragmentApiRequest"),

    // Metadata about props expected for PlasmicSuggestion
    internalVariantProps: PlasmicSuggestion__VariantProps,
    internalArgProps: PlasmicSuggestion__ArgProps
  }
);

export default PlasmicSuggestion;
/* prettier-ignore-end */
