/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: t_GYTnthnuf9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicDebugMode.module.css"; // plasmic-import: t_GYTnthnuf9/css

createPlasmicElementProxy;

export type PlasmicDebugMode__VariantMembers = {};
export type PlasmicDebugMode__VariantsArgs = {};
type VariantPropType = keyof PlasmicDebugMode__VariantsArgs;
export const PlasmicDebugMode__VariantProps = new Array<VariantPropType>();

export type PlasmicDebugMode__ArgsType = { searchResultResponse?: any };
type ArgPropType = keyof PlasmicDebugMode__ArgsType;
export const PlasmicDebugMode__ArgProps = new Array<ArgPropType>(
  "searchResultResponse"
);

export type PlasmicDebugMode__OverridesType = {
  showDebugData?: Flex__<"div">;
};

export interface DefaultDebugModeProps {
  searchResultResponse?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDebugMode__RenderFunc(props: {
  variants: PlasmicDebugMode__VariantsArgs;
  args: PlasmicDebugMode__ArgsType;
  overrides: PlasmicDebugMode__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"showDebugData"}
      data-plasmic-override={overrides.showDebugData}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.showDebugData
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.searchResultResponse.debug_mode_result
              .search_engine_response.entity.results;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentResultItem = __plasmic_item_0;
        const currentResultIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__jifA6)}
            key={currentResultIndex}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z9Chk
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentResultItem.source.display_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return Object.entries(currentResultItem.documentInfo).map(
                    ([key, value]) => ({ name: key, value })
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_1, __plasmic_idx_1) => {
              const docInfoCurrentItem = __plasmic_item_1;
              const docInfoCurrentIndex = __plasmic_idx_1;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Nb0T)}
                  key={docInfoCurrentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tFgFw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return docInfoCurrentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lxMbc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return docInfoCurrentItem.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              );
            })}
          </div>
        );
      })}
      <div className={classNames(projectcss.all, sty.freeBox__zhXc1)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  showDebugData: ["showDebugData"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  showDebugData: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDebugMode__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDebugMode__VariantsArgs;
    args?: PlasmicDebugMode__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDebugMode__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDebugMode__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDebugMode__ArgProps,
          internalVariantPropNames: PlasmicDebugMode__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDebugMode__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "showDebugData") {
    func.displayName = "PlasmicDebugMode";
  } else {
    func.displayName = `PlasmicDebugMode.${nodeName}`;
  }
  return func;
}

export const PlasmicDebugMode = Object.assign(
  // Top-level PlasmicDebugMode renders the root element
  makeNodeComponent("showDebugData"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDebugMode
    internalVariantProps: PlasmicDebugMode__VariantProps,
    internalArgProps: PlasmicDebugMode__ArgProps
  }
);

export default PlasmicDebugMode;
/* prettier-ignore-end */
