/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: _bc7j5YswB_4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClamp from "../../LineClamp"; // plasmic-import: fa_t7ELXcm5k/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearchContentTree.module.css"; // plasmic-import: _bc7j5YswB_4/css

createPlasmicElementProxy;

export type PlasmicSearchContentTree__VariantMembers = {};
export type PlasmicSearchContentTree__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchContentTree__VariantsArgs;
export const PlasmicSearchContentTree__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSearchContentTree__ArgsType = {
  data?: any;
  onClick?: (value: any) => void;
};
type ArgPropType = keyof PlasmicSearchContentTree__ArgsType;
export const PlasmicSearchContentTree__ArgProps = new Array<ArgPropType>(
  "data",
  "onClick"
);

export type PlasmicSearchContentTree__OverridesType = {
  root?: Flex__<"div">;
  lineClamp?: Flex__<typeof LineClamp>;
};

export interface DefaultSearchContentTreeProps {
  data?: any;
  onClick?: (value: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchContentTree__RenderFunc(props: {
  variants: PlasmicSearchContentTree__VariantsArgs;
  args: PlasmicSearchContentTree__ArgsType;
  overrides: PlasmicSearchContentTree__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return !!$props.data.formatted_title;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox___8Q83S,
            "default-styles"
          )}
        >
          {(() => {
            try {
              return !!$props.data.formatted_title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__xnRm8)}>
              <div className={classNames(projectcss.all, sty.freeBox__bLpwi)} />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l9Onv
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runOnClick"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClick"],
                          args: [
                            (() => {
                              try {
                                return (() => {
                                  const {
                                    sub_items,
                                    activity,
                                    ...otherFields
                                  } = $props.data;
                                  return otherFields;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClick"] != null &&
                    typeof $steps["runOnClick"] === "object" &&
                    typeof $steps["runOnClick"].then === "function"
                  ) {
                    $steps["runOnClick"] = await $steps["runOnClick"];
                  }
                }}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return $props.data.formatted_title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__lvcKr)}>
            {(() => {
              try {
                return !!$props.data.sub_title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__puw5N)}>
                <LineClamp
                  data-plasmic-name={"lineClamp"}
                  data-plasmic-override={overrides.lineClamp}
                  className={classNames("__wab_instance", sty.lineClamp)}
                  numberOfLines={2}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ncMdh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const text = $props.data.sub_title;
                            if (text <= 280) {
                              return text;
                            } else {
                              return text.slice(0, 280 - 3) + "...";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </LineClamp>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__qg5E)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.data.sub_items;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__i8FmB)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runOnClick"] = true
                        ? (() => {
                            const actionArgs = {
                              eventRef: $props["onClick"],
                              args: [
                                (() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runOnClick"] != null &&
                        typeof $steps["runOnClick"] === "object" &&
                        typeof $steps["runOnClick"].then === "function"
                      ) {
                        $steps["runOnClick"] = await $steps["runOnClick"];
                      }
                    }}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qn0Zo)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lubU0
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return currentItem.formatted_title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return !$props.data.formatted_title;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.data.sub_items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__ijG)}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["runOnClick"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClick"],
                          args: [
                            (() => {
                              try {
                                return currentItem;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClick"] != null &&
                    typeof $steps["runOnClick"] === "object" &&
                    typeof $steps["runOnClick"].then === "function"
                  ) {
                    $steps["runOnClick"] = await $steps["runOnClick"];
                  }
                }}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__j308O)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i5Mjy
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return currentItem.formatted_title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
              </div>
            );
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "lineClamp"],
  lineClamp: ["lineClamp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lineClamp: typeof LineClamp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchContentTree__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchContentTree__VariantsArgs;
    args?: PlasmicSearchContentTree__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchContentTree__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchContentTree__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchContentTree__ArgProps,
          internalVariantPropNames: PlasmicSearchContentTree__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchContentTree__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchContentTree";
  } else {
    func.displayName = `PlasmicSearchContentTree.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchContentTree = Object.assign(
  // Top-level PlasmicSearchContentTree renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lineClamp: makeNodeComponent("lineClamp"),

    // Metadata about props expected for PlasmicSearchContentTree
    internalVariantProps: PlasmicSearchContentTree__VariantProps,
    internalArgProps: PlasmicSearchContentTree__ArgProps
  }
);

export default PlasmicSearchContentTree;
/* prettier-ignore-end */
