/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: Cf7MAesKvnvP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicUnknownCityDialog.module.css"; // plasmic-import: Cf7MAesKvnvP/css

createPlasmicElementProxy;

export type PlasmicUnknownCityDialog__VariantMembers = {};
export type PlasmicUnknownCityDialog__VariantsArgs = {};
type VariantPropType = keyof PlasmicUnknownCityDialog__VariantsArgs;
export const PlasmicUnknownCityDialog__VariantProps =
  new Array<VariantPropType>();

export type PlasmicUnknownCityDialog__ArgsType = { searchCity?: any };
type ArgPropType = keyof PlasmicUnknownCityDialog__ArgsType;
export const PlasmicUnknownCityDialog__ArgProps = new Array<ArgPropType>(
  "searchCity"
);

export type PlasmicUnknownCityDialog__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  text?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultUnknownCityDialogProps {
  searchCity?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnknownCityDialog__RenderFunc(props: {
  variants: PlasmicUnknownCityDialog__VariantsArgs;
  args: PlasmicUnknownCityDialog__ArgsType;
  overrides: PlasmicUnknownCityDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <Dialog
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        body={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `شما قبلاً «${
                    $props.searchCity?.name || ""
                  }» را برای مشاهده نتایج در پذیرش24 انتخاب کردید. لطفا شهر مورد نظر خود را انتخاب کنید`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "        \u0634\u0645\u0627 \u0642\u0628\u0644\u0627\u064b \u00ab{city?.name}\u00bb \u0631\u0627 \u0628\u0631\u0627\u06cc \u0645\u0634\u0627\u0647\u062f\u0647 \u0646\u062a\u0627\u06cc\u062c \u062f\u0631 \u067e\u0630\u06cc\u0631\u063424 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc\u062f. \u0644\u0637\u0641\u0627 \u0634\u0647\u0631 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f.\n";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        }
        className={classNames("__wab_instance", sty.dialog)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog", "open"])}
        title={""}
        trigger={null}
      />

      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      function getCookie(name) {
                        let match = globalThis.window.document.cookie.match(
                          "(^|;)\\s*" + name + "\\s*=\\s*([^;]+)"
                        );
                        return match ? match[2] : null;
                      }
                      function getCookieSimple(name) {
                        let cookies =
                          globalThis.window.document.cookie.split(";");
                        for (let cookie of cookies) {
                          let [key, value] = cookie.trim().split("=");
                          if (key === name) return value;
                        }
                        return null;
                      }
                      function checkCookie(name) {
                        const decodedCookie = globalThis.decodeURIComponent(
                          globalThis.window.document.cookie
                        );
                        const ca = decodedCookie.split(";");
                        let cookieValue = null;
                        ca.forEach(val => {
                          let c = val;
                          while (c.charAt(0) === " ") {
                            c = c.substring(1);
                          }
                          if (c.indexOf(name + "=") === 0) {
                            cookieValue = c.substring(
                              name.length + 1,
                              c.length
                            );
                          }
                        });
                        console.log(
                          `[checkCookie] ${name} cookie value:`,
                          cookieValue
                        );
                        return cookieValue;
                      }
                      if (typeof window != "undefined") {
                        const newCity = checkCookie("new-city");
                        return console.log("new city", newCity);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dialog", "text", "sideEffect"],
  dialog: ["dialog", "text"],
  text: ["text"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog;
  text: "div";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnknownCityDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnknownCityDialog__VariantsArgs;
    args?: PlasmicUnknownCityDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnknownCityDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnknownCityDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUnknownCityDialog__ArgProps,
          internalVariantPropNames: PlasmicUnknownCityDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnknownCityDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnknownCityDialog";
  } else {
    func.displayName = `PlasmicUnknownCityDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicUnknownCityDialog = Object.assign(
  // Top-level PlasmicUnknownCityDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    text: makeNodeComponent("text"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicUnknownCityDialog
    internalVariantProps: PlasmicUnknownCityDialog__VariantProps,
    internalArgProps: PlasmicUnknownCityDialog__ArgProps
  }
);

export default PlasmicUnknownCityDialog;
/* prettier-ignore-end */
