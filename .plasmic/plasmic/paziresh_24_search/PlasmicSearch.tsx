// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: d_qMEJ14UZf0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SearchInput from "../../SearchInput"; // plasmic-import: qe20xTbxVmkB/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent
import SearchContent from "../../SearchContent"; // plasmic-import: PfB5nhEPkWQb/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import LocationView from "../../LocationView"; // plasmic-import: p2ixA7V1voJv/component
import { Portal } from "@/common/fragment/components/portal"; // plasmic-import: 4fT4c69Xtkbb/codeComponent

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: d_qMEJ14UZf0/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: eKLBqU_Fr5SV/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicSearch__VariantMembers = {
  hasOverlay: "hasOverlay";
  isFocus: "isFocus";
};
export type PlasmicSearch__VariantsArgs = {
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>(
  "hasOverlay",
  "isFocus"
);

export type PlasmicSearch__ArgsType = {
  onClickCity?: (value: any) => void;
  onChangeInput?: (value: string) => void;
  value?: string;
};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>(
  "onClickCity",
  "onChangeInput",
  "value"
);

export type PlasmicSearch__OverridesType = {
  root?: Flex__<"div">;
  suggestionApi?: Flex__<typeof ApiRequest>;
  overlay?: Flex__<"div">;
  selectCityDialog?: Flex__<typeof Dialog>;
  getLocationList?: Flex__<typeof ApiRequest>;
  locationView?: Flex__<typeof LocationView>;
  fragmentPortal?: Flex__<typeof Portal>;
  suggestionApi2?: Flex__<typeof ApiRequest>;
};

export interface DefaultSearchProps {
  onClickCity?: (value: any) => void;
  onChangeInput?: (value: string) => void;
  value?: string;
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectCityDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "suggestionApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getLocationList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getLocationList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getLocationList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "hasOverlay",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasOverlay
      },
      {
        path: "isFocus",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFocus
      },
      {
        path: "suggestionApi2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionApi2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggestionApi2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootisFocus]: hasVariant($state, "isFocus", "isFocus") }
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? false : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__rWaf, {
            [sty.freeBoxisFocus__rWafMexBq]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__qeT0, {
              [sty.freeBoxisFocus__qeT0MexBq]: hasVariant(
                $state,
                "isFocus",
                "isFocus"
              )
            })}
          >
            <SearchInput
              className={classNames("__wab_instance", sty.searchInput__cXqko, {
                [sty.searchInputisFocus__cXqkoMexBq]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
              inputId={"searchInput"}
              inputValue={(() => {
                try {
                  return $props.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              isFocused={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return !!$state.isFocus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return !!$state.isFocus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              onChangeInput={async value => {
                const $steps = {};

                $steps["runOnChangeInput"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onChangeInput"],
                        args: [
                          (() => {
                            try {
                              return value;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnChangeInput"] != null &&
                  typeof $steps["runOnChangeInput"] === "object" &&
                  typeof $steps["runOnChangeInput"].then === "function"
                ) {
                  $steps["runOnChangeInput"] = await $steps["runOnChangeInput"];
                }
              }}
              onClickCities={async () => {
                const $steps = {};

                $steps["updateSelectCityOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectCityDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectCityOpen"] != null &&
                  typeof $steps["updateSelectCityOpen"] === "object" &&
                  typeof $steps["updateSelectCityOpen"].then === "function"
                ) {
                  $steps["updateSelectCityOpen"] = await $steps[
                    "updateSelectCityOpen"
                  ];
                }
              }}
              onClickSearchIcon={async () => {
                const $steps = {};

                $steps["goToS"] = true
                  ? (() => {
                      const actionArgs = { destination: "/s" };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToS"] != null &&
                  typeof $steps["goToS"] === "object" &&
                  typeof $steps["goToS"].then === "function"
                ) {
                  $steps["goToS"] = await $steps["goToS"];
                }
              }}
              onFocuse={async value => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.isFocus = value);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            />
          </div>
          {(() => {
            try {
              return !!$state.isFocus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__vKSpO, {
                [sty.freeBoxisFocus__vKSpOmexBq]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
              id={"suggestionContent"}
            >
              <ApiRequest
                data-plasmic-name={"suggestionApi"}
                data-plasmic-override={overrides.suggestionApi}
                className={classNames("__wab_instance", sty.suggestionApi)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lD73P)}
                  >
                    <Icon14Icon
                      className={classNames(projectcss.all, sty.svg__ukSyf)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={generateStateOnChangeProp($state, [
                  "suggestionApi",
                  "error"
                ])}
                onLoading={generateStateOnChangeProp($state, [
                  "suggestionApi",
                  "loading"
                ])}
                onSuccess={generateStateOnChangeProp($state, [
                  "suggestionApi",
                  "data"
                ])}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/seapi/v1/suggestion?q=${$state.inputValue}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <SearchContent
                  className={classNames(
                    "__wab_instance",
                    sty.searchContent___9SIt,
                    {
                      [sty.searchContentisFocus___9SItMexBq]: hasVariant(
                        $state,
                        "isFocus",
                        "isFocus"
                      )
                    }
                  )}
                  onClick={async value => {
                    const $steps = {};

                    $steps["updateInputValue"] = value.use_suggestion
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["inputValue"]
                            },
                            operation: 0,
                            value: value.name
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue"] != null &&
                      typeof $steps["updateInputValue"] === "object" &&
                      typeof $steps["updateInputValue"].then === "function"
                    ) {
                      $steps["updateInputValue"] = await $steps[
                        "updateInputValue"
                      ];
                    }

                    $steps["goToPage"] =
                      !value?.use_suggestion && !!value?.url
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return value?.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }

                    $steps["updateIsFocus"] = !value?.use_suggestion
                      ? (() => {
                          const actionArgs = {
                            vgroup: "isFocus",
                            operation: 6
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsFocus"] != null &&
                      typeof $steps["updateIsFocus"] === "object" &&
                      typeof $steps["updateIsFocus"].then === "function"
                    ) {
                      $steps["updateIsFocus"] = await $steps["updateIsFocus"];
                    }
                  }}
                  searchQuery={(() => {
                    try {
                      return $state.inputValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  suggestion={(() => {
                    try {
                      return $state.suggestionApi.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </ApiRequest>
            </div>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return !!$state.isFocus;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          className={classNames(projectcss.all, sty.overlay, {
            [sty.overlayhasOverlay]: hasVariant(
              $state,
              "hasOverlay",
              "hasOverlay"
            ),
            [sty.overlayisFocus]: hasVariant($state, "isFocus", "isFocus")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateIsFocus"] = true
              ? (() => {
                  const actionArgs = { vgroup: "isFocus", operation: 6 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsFocus"] != null &&
              typeof $steps["updateIsFocus"] === "object" &&
              typeof $steps["updateIsFocus"].then === "function"
            ) {
              $steps["updateIsFocus"] = await $steps["updateIsFocus"];
            }
          }}
        />
      ) : null}
      <Dialog
        data-plasmic-name={"selectCityDialog"}
        data-plasmic-override={overrides.selectCityDialog}
        body={
          <div className={classNames(projectcss.all, sty.freeBox___8CERd)}>
            <ApiRequest
              data-plasmic-name={"getLocationList"}
              data-plasmic-override={overrides.getLocationList}
              body={(() => {
                try {
                  return (() => {
                    const formData = new globalThis.FormData();
                    formData.append(
                      "table",
                      JSON.stringify(["city", "province"])
                    );
                    return formData;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { table: ["city", "province"] };
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.getLocationList)}
              errorDisplay={null}
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__iKi06)}>
                  <Icon14Icon
                    className={classNames(projectcss.all, sty.svg__g3HAz)}
                    role={"img"}
                  />
                </div>
              }
              method={"POST"}
              onError={generateStateOnChangeProp($state, [
                "getLocationList",
                "error"
              ])}
              onLoading={generateStateOnChangeProp($state, [
                "getLocationList",
                "loading"
              ])}
              onSuccess={generateStateOnChangeProp($state, [
                "getLocationList",
                "data"
              ])}
              url={"https://www.paziresh24.com/api/getbaseinfo"}
            >
              <LocationView
                data-plasmic-name={"locationView"}
                data-plasmic-override={overrides.locationView}
                className={classNames("__wab_instance", sty.locationView)}
                locations={(() => {
                  try {
                    return $state.getLocationList.data.result;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClickAllCities={async () => {
                  const $steps = {};

                  $steps["runOnClickCity"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClickCity"],
                          args: [
                            {
                              id: -1,
                              name: "\u0647\u0645\u0647 \u0634\u0647\u0631 \u0647\u0627",
                              en_slug: "ir"
                            }
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClickCity"] != null &&
                    typeof $steps["runOnClickCity"] === "object" &&
                    typeof $steps["runOnClickCity"].then === "function"
                  ) {
                    $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                  }
                }}
                onClickCity={async value => {
                  const $steps = {};

                  $steps["runOnClickCity"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClickCity"],
                          args: [
                            (() => {
                              try {
                                return value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClickCity"] != null &&
                    typeof $steps["runOnClickCity"] === "object" &&
                    typeof $steps["runOnClickCity"].then === "function"
                  ) {
                    $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                  }
                }}
                selectedProvinceId={"-1"}
              />
            </ApiRequest>
          </div>
        }
        className={classNames("__wab_instance", sty.selectCityDialog, {
          [sty.selectCityDialogisFocus]: hasVariant(
            $state,
            "isFocus",
            "isFocus"
          )
        })}
        noTrigger={true}
        onOpenChange={generateStateOnChangeProp($state, [
          "selectCityDialog",
          "open"
        ])}
        open={generateStateValueProp($state, ["selectCityDialog", "open"])}
        title={"\u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0647\u0631"}
      />

      <Portal
        data-plasmic-name={"fragmentPortal"}
        data-plasmic-override={overrides.fragmentPortal}
        className={classNames("__wab_instance", sty.fragmentPortal)}
        container={(() => {
          try {
            return window.document.getElementsByTagName("body")?.[0];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__vDoMn, {
              [sty.freeBoxisFocus__vDoMnMexBq]: hasVariant(
                $state,
                "isFocus",
                "isFocus"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__njZqc, {
                [sty.freeBoxisFocus__njZqcmexBq]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
            >
              <SearchInput
                className={classNames(
                  "__wab_instance",
                  sty.searchInput___9QpFr,
                  {
                    [sty.searchInputisFocus___9QpFrmexBq]: hasVariant(
                      $state,
                      "isFocus",
                      "isFocus"
                    )
                  }
                )}
                inputId={"searchInput"}
                inputValue={(() => {
                  try {
                    return $state.inputValue;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                isFocused={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return !!$state.isFocus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return !!$state.isFocus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                }
                onChangeInput={async value => {
                  const $steps = {};

                  $steps["updateInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["inputValue"]
                          },
                          operation: 0,
                          value: value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInputValue"] != null &&
                    typeof $steps["updateInputValue"] === "object" &&
                    typeof $steps["updateInputValue"].then === "function"
                  ) {
                    $steps["updateInputValue"] = await $steps[
                      "updateInputValue"
                    ];
                  }
                }}
                onClickCities={async () => {
                  const $steps = {};

                  $steps["updateSelectCityOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectCityDialog", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectCityOpen"] != null &&
                    typeof $steps["updateSelectCityOpen"] === "object" &&
                    typeof $steps["updateSelectCityOpen"].then === "function"
                  ) {
                    $steps["updateSelectCityOpen"] = await $steps[
                      "updateSelectCityOpen"
                    ];
                  }
                }}
                onClickSearchIcon={async () => {
                  const $steps = {};

                  $steps["goToS"] = true
                    ? (() => {
                        const actionArgs = { destination: "/s" };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToS"] != null &&
                    typeof $steps["goToS"] === "object" &&
                    typeof $steps["goToS"].then === "function"
                  ) {
                    $steps["goToS"] = await $steps["goToS"];
                  }
                }}
                onFocuse={async value => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.isFocus = value);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              />
            </div>
            {(() => {
              try {
                return !!$state.isFocus;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__pmx5R, {
                  [sty.freeBoxisFocus__pmx5RMexBq]: hasVariant(
                    $state,
                    "isFocus",
                    "isFocus"
                  )
                })}
                id={"suggestionContent"}
              >
                <ApiRequest
                  data-plasmic-name={"suggestionApi2"}
                  data-plasmic-override={overrides.suggestionApi2}
                  className={classNames("__wab_instance", sty.suggestionApi2, {
                    [sty.suggestionApi2isFocus]: hasVariant(
                      $state,
                      "isFocus",
                      "isFocus"
                    )
                  })}
                  errorDisplay={null}
                  loadingDisplay={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k0GLd)}
                    >
                      <Icon14Icon
                        className={classNames(projectcss.all, sty.svg__bpU30)}
                        role={"img"}
                      />
                    </div>
                  }
                  method={"GET"}
                  onError={generateStateOnChangeProp($state, [
                    "suggestionApi2",
                    "error"
                  ])}
                  onLoading={generateStateOnChangeProp($state, [
                    "suggestionApi2",
                    "loading"
                  ])}
                  onSuccess={generateStateOnChangeProp($state, [
                    "suggestionApi2",
                    "data"
                  ])}
                  url={(() => {
                    try {
                      return `https://apigw.paziresh24.com/seapi/v1/suggestion?q=${$state.inputValue}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <SearchContent
                    className={classNames(
                      "__wab_instance",
                      sty.searchContent__kekcs,
                      {
                        [sty.searchContentisFocus__kekcsMexBq]: hasVariant(
                          $state,
                          "isFocus",
                          "isFocus"
                        )
                      }
                    )}
                    onClick={async value => {
                      const $steps = {};

                      $steps["updateInputValue"] = value.use_suggestion
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["inputValue"]
                              },
                              operation: 0,
                              value: value.name
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateInputValue"] != null &&
                        typeof $steps["updateInputValue"] === "object" &&
                        typeof $steps["updateInputValue"].then === "function"
                      ) {
                        $steps["updateInputValue"] = await $steps[
                          "updateInputValue"
                        ];
                      }

                      $steps["goToPage"] =
                        !value?.use_suggestion && !!value?.url
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return value?.url;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateIsFocus"] = !value?.use_suggestion
                        ? (() => {
                            const actionArgs = {
                              vgroup: "isFocus",
                              operation: 6
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsFocus"] != null &&
                        typeof $steps["updateIsFocus"] === "object" &&
                        typeof $steps["updateIsFocus"].then === "function"
                      ) {
                        $steps["updateIsFocus"] = await $steps["updateIsFocus"];
                      }
                    }}
                    searchQuery={(() => {
                      try {
                        return $state.inputValue;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    suggestion={(() => {
                      try {
                        return $state.suggestionApi2.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </ApiRequest>
              </div>
            ) : null}
          </div>
        ) : null}
      </Portal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "suggestionApi",
    "overlay",
    "selectCityDialog",
    "getLocationList",
    "locationView",
    "fragmentPortal",
    "suggestionApi2"
  ],
  suggestionApi: ["suggestionApi"],
  overlay: ["overlay"],
  selectCityDialog: ["selectCityDialog", "getLocationList", "locationView"],
  getLocationList: ["getLocationList", "locationView"],
  locationView: ["locationView"],
  fragmentPortal: ["fragmentPortal", "suggestionApi2"],
  suggestionApi2: ["suggestionApi2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  suggestionApi: typeof ApiRequest;
  overlay: "div";
  selectCityDialog: typeof Dialog;
  getLocationList: typeof ApiRequest;
  locationView: typeof LocationView;
  fragmentPortal: typeof Portal;
  suggestionApi2: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearch__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    suggestionApi: makeNodeComponent("suggestionApi"),
    overlay: makeNodeComponent("overlay"),
    selectCityDialog: makeNodeComponent("selectCityDialog"),
    getLocationList: makeNodeComponent("getLocationList"),
    locationView: makeNodeComponent("locationView"),
    fragmentPortal: makeNodeComponent("fragmentPortal"),
    suggestionApi2: makeNodeComponent("suggestionApi2"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
