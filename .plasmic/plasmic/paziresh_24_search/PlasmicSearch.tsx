/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: d_qMEJ14UZf0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SearchInput from "../../SearchInput"; // plasmic-import: qe20xTbxVmkB/component
import SearchResultQs from "../../SearchResultQs"; // plasmic-import: 4t5SBkIXsA5h/component
import SearchResultSimple from "../../SearchResultSimple"; // plasmic-import: dQKny9PQUcJM/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent
import LocationView from "../../LocationView"; // plasmic-import: p2ixA7V1voJv/component
import { Portal } from "@/common/fragment/components/portal"; // plasmic-import: 4fT4c69Xtkbb/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: d_qMEJ14UZf0/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: eKLBqU_Fr5SV/icon

import { debounce as __lib_lodash__debounce } from "lodash";

createPlasmicElementProxy;

export type PlasmicSearch__VariantMembers = {
  hasOverlay: "hasOverlay";
  isFocus: "isFocus";
};
export type PlasmicSearch__VariantsArgs = {
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>(
  "hasOverlay",
  "isFocus"
);

export type PlasmicSearch__ArgsType = {
  onClickCity?: (value: any) => void;
  selectedCity?: any;
  defaultValue?: string;
  onClickOverlay?: () => void;
  inputVal?: string;
  onChangeInputVal?: (value: string) => void;
  onFocusChange?: (value: boolean) => void;
  isAroundMe?: boolean;
};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>(
  "onClickCity",
  "selectedCity",
  "defaultValue",
  "onClickOverlay",
  "inputVal",
  "onChangeInputVal",
  "onFocusChange",
  "isAroundMe"
);

export type PlasmicSearch__OverridesType = {
  root?: Flex__<"div">;
  overlay?: Flex__<"div">;
  selectCityDialog?: Flex__<typeof Dialog>;
  getLocationList?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  locationView?: Flex__<typeof LocationView>;
  fragmentPortal?: Flex__<typeof Portal>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultSearchProps {
  onClickCity?: (value: any) => void;
  selectedCity?: any;
  defaultValue?: string;
  onClickOverlay?: () => void;
  inputVal?: string;
  onChangeInputVal?: (value: string) => void;
  onFocusChange?: (value: boolean) => void;
  isAroundMe?: boolean;
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
  className?: string;
}

const $$ = {
  lodash: {
    debounce: __lib_lodash__debounce
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isAroundMe: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectCityDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultValue || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getLocationList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getLocationList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getLocationList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "hasOverlay",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasOverlay
      },
      {
        path: "isFocus",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFocus
      },
      {
        path: "terms",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isCityInputFocused",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timoutRef",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root,
        ``,
        {
          [sty.roothasOverlay]: hasVariant($state, "hasOverlay", "hasOverlay"),
          [sty.rootisFocus]: hasVariant($state, "isFocus", "isFocus")
        }
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? false : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__rWaf, {
            [sty.freeBoxisFocus__rWafMexBq]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__qeT0, {
              [sty.freeBoxisFocus__qeT0MexBq]: hasVariant(
                $state,
                "isFocus",
                "isFocus"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__g5VPh)}>
              <SearchInput
                cityName={(() => {
                  try {
                    return $props.selectedCity.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                citySlug={(() => {
                  try {
                    return $props.selectedCity.en_slug != "ir" &&
                      $props.selectedCity.en_slug
                      ? $props.selectedCity.en_slug
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.searchInput__cXqko,
                  {
                    [sty.searchInputisFocus__cXqkoMexBq]: hasVariant(
                      $state,
                      "isFocus",
                      "isFocus"
                    )
                  }
                )}
                inputId={"searchInput"}
                inputValue={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.inputValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.inputValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                }
                isAroundMe={(() => {
                  try {
                    return $props.isAroundMe;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                isFocused={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return !!$state.isFocus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return !!$state.isFocus;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                }
                onChangeInput={async value => {
                  const $steps = {};

                  $steps["updateInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["inputValue"]
                          },
                          operation: 0,
                          value: value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInputValue"] != null &&
                    typeof $steps["updateInputValue"] === "object" &&
                    typeof $steps["updateInputValue"].then === "function"
                  ) {
                    $steps["updateInputValue"] = await $steps[
                      "updateInputValue"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              clearTimeout($state.timoutRef);
                              return ($state.timoutRef = setTimeout(() => {
                                $state.terms = value;
                              }, 600));
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onClickCities={async () => {
                  const $steps = {};

                  $steps["updateSelectCityOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectCityDialog", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectCityOpen"] != null &&
                    typeof $steps["updateSelectCityOpen"] === "object" &&
                    typeof $steps["updateSelectCityOpen"].then === "function"
                  ) {
                    $steps["updateSelectCityOpen"] = await $steps[
                      "updateSelectCityOpen"
                    ];
                  }
                }}
                onClickSearchIcon={async () => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return (() => {
                                const params = new globalThis.URLSearchParams(
                                  globalThis.window.location.search
                                );
                                if ($state.inputValue) {
                                  params.delete("text");
                                  params.append("text", $state.inputValue);
                                }
                                const citySlug =
                                  $props.selectedCity.en_slug &&
                                  $props.selectedCity.en_slug != "ir"
                                    ? $props.selectedCity.en_slug + "/"
                                    : "";
                                return `/s/${citySlug}?${params.toString()}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "/s";
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                onFocuse={async value => {
                  const $steps = {};

                  $steps["isOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if (value && !$state.isFocus) {
                                return true;
                              } else {
                                return false;
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["isOpen"] != null &&
                    typeof $steps["isOpen"] === "object" &&
                    typeof $steps["isOpen"].then === "function"
                  ) {
                    $steps["isOpen"] = await $steps["isOpen"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.isFocus = value);
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["runOnClickOverlay"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClickOverlay"]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClickOverlay"] != null &&
                    typeof $steps["runOnClickOverlay"] === "object" &&
                    typeof $steps["runOnClickOverlay"].then === "function"
                  ) {
                    $steps["runOnClickOverlay"] = await $steps[
                      "runOnClickOverlay"
                    ];
                  }

                  $steps["splunk"] = $steps.isOpen
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  event_group: "suggestion_events",
                                  event_type: "suggestion_open",
                                  current_url: globalThis.window.location.href,
                                  terminal_id: (function () {
                                    try {
                                      return document.cookie.replace(
                                        /(?:(?:^|.*;\s*)terminal_id\s*\=\s*([^;]*).*$)|^.*$/,
                                        "$1"
                                      );
                                    } catch (e) {
                                      return null;
                                    }
                                  })(),
                                  is_application: false,
                                  data: {
                                    city: $props.selectedCity.name,
                                    current_url:
                                      globalThis.window.location.href,
                                    terminal_id: (function () {
                                      try {
                                        return document.cookie.replace(
                                          /(?:(?:^|.*;\s*)terminal_id\s*\=\s*([^;]*).*$)|^.*$/,
                                          "$1"
                                        );
                                      } catch (e) {
                                        return null;
                                      }
                                    })()
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }}
              />
            </div>
          </div>
          {(() => {
            try {
              return !!$state.isFocus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__vKSpO, {
                [sty.freeBoxisFocus__vKSpOmexBq]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
              id={"suggestionContent"}
            >
              <SearchResultQs
                citySlug={(() => {
                  try {
                    return $props.selectedCity.en_slug != "ir" &&
                      $props.selectedCity.en_slug
                      ? $props.selectedCity.en_slug
                      : "";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.searchResultQs__mz2G7,
                  {
                    [sty.searchResultQsisFocus__mz2G7MexBq]: hasVariant(
                      $state,
                      "isFocus",
                      "isFocus"
                    )
                  }
                )}
                onClick={async value => {
                  const $steps = {};

                  $steps["updateIsFocus"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "isFocus", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateIsFocus"] != null &&
                    typeof $steps["updateIsFocus"] === "object" &&
                    typeof $steps["updateIsFocus"].then === "function"
                  ) {
                    $steps["updateIsFocus"] = await $steps["updateIsFocus"];
                  }

                  $steps["runOnFocusChange"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onFocusChange"]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnFocusChange"] != null &&
                    typeof $steps["runOnFocusChange"] === "object" &&
                    typeof $steps["runOnFocusChange"].then === "function"
                  ) {
                    $steps["runOnFocusChange"] = await $steps[
                      "runOnFocusChange"
                    ];
                  }
                }}
                terms={$state.terms}
              />

              {(() => {
                try {
                  return $state.terms.trim().length >= 3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <SearchResultSimple
                  cityId={(() => {
                    try {
                      return $props.selectedCity.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.searchResultSimple__ipciO,
                    {
                      [sty.searchResultSimpleisFocus__ipciOmexBq]: hasVariant(
                        $state,
                        "isFocus",
                        "isFocus"
                      )
                    }
                  )}
                  inputValue={$state.terms}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return !!$state.isFocus;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          className={classNames(projectcss.all, sty.overlay, {
            [sty.overlayhasOverlay]: hasVariant(
              $state,
              "hasOverlay",
              "hasOverlay"
            ),
            [sty.overlayisFocus]: hasVariant($state, "isFocus", "isFocus")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["updateIsFocus"] = true
              ? (() => {
                  const actionArgs = { vgroup: "isFocus", operation: 6 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsFocus"] != null &&
              typeof $steps["updateIsFocus"] === "object" &&
              typeof $steps["updateIsFocus"].then === "function"
            ) {
              $steps["updateIsFocus"] = await $steps["updateIsFocus"];
            }

            $steps["runOnClickOverlay"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["onClickOverlay"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnClickOverlay"] != null &&
              typeof $steps["runOnClickOverlay"] === "object" &&
              typeof $steps["runOnClickOverlay"].then === "function"
            ) {
              $steps["runOnClickOverlay"] = await $steps["runOnClickOverlay"];
            }
          }}
        />
      ) : null}
      {(
        hasVariant($state, "isFocus", "isFocus") &&
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qUu1, {
            [sty.freeBoxisFocus__qUu1MexBq]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
        >
          <SearchInput
            cityName={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.selectedCity.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            className={classNames("__wab_instance", sty.searchInput__lnXWz, {
              [sty.searchInputisFocus__lnXWzMexBq]: hasVariant(
                $state,
                "isFocus",
                "isFocus"
              )
            })}
            inputId={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "searchInput23"
                : "searchInput"
            }
            inputValue={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.inputValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $props.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            isAroundMe={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $props.isAroundMe;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            isFocused={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return !!$state.isFocus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return !!$state.isFocus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
            }
            onChangeInput={async value => {
              const $steps = {};

              $steps["updateInputValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["inputValue"]
                      },
                      operation: 0,
                      value: value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateInputValue"] != null &&
                typeof $steps["updateInputValue"] === "object" &&
                typeof $steps["updateInputValue"].then === "function"
              ) {
                $steps["updateInputValue"] = await $steps["updateInputValue"];
              }
            }}
            onClickCities={async () => {
              const $steps = {};

              $steps["updateSelectCityOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["selectCityDialog", "open"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSelectCityOpen"] != null &&
                typeof $steps["updateSelectCityOpen"] === "object" &&
                typeof $steps["updateSelectCityOpen"].then === "function"
              ) {
                $steps["updateSelectCityOpen"] = await $steps[
                  "updateSelectCityOpen"
                ];
              }
            }}
            onClickSearchIcon={async () => {
              const $steps = {};

              $steps["goToPage"] = true
                ? (() => {
                    const actionArgs = {
                      destination: (() => {
                        try {
                          return (() => {
                            const params = new globalThis.URLSearchParams(
                              globalThis.window.location.search
                            );
                            if ($state.inputValue) {
                              params.delete("text");
                              params.append("text", $state.inputValue);
                            }
                            const citySlug =
                              $props.selectedCity.en_slug &&
                              $props.selectedCity.en_slug != "ir"
                                ? $props.selectedCity.en_slug + "/"
                                : "";
                            return `/s/${citySlug}?${params.toString()}`;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "/s";
                          }
                          throw e;
                        }
                      })()
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
            onFocuse={async value => {
              const $steps = {};

              $steps["isOpen"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (value && !$state.isFocus) {
                            return true;
                          } else {
                            return false;
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["isOpen"] != null &&
                typeof $steps["isOpen"] === "object" &&
                typeof $steps["isOpen"].then === "function"
              ) {
                $steps["isOpen"] = await $steps["isOpen"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.isFocus = value);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["splunk"] = $steps.isOpen
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              event_group: "suggestion_events",
                              event_type: "suggestion_open",
                              current_url: globalThis.window.location.href,
                              terminal_id: (function () {
                                try {
                                  return document.cookie.replace(
                                    /(?:(?:^|.*;\s*)terminal_id\s*\=\s*([^;]*).*$)|^.*$/,
                                    "$1"
                                  );
                                } catch (e) {
                                  return null;
                                }
                              })(),
                              is_application: true,
                              data: {
                                city: $props.selectedCity.name,
                                current_url: globalThis.window.location.href,
                                terminal_id: (function () {
                                  try {
                                    return document.cookie.replace(
                                      /(?:(?:^|.*;\s*)terminal_id\s*\=\s*([^;]*).*$)|^.*$/,
                                      "$1"
                                    );
                                  } catch (e) {
                                    return null;
                                  }
                                })()
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Splunk.sendLog"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["splunk"] != null &&
                typeof $steps["splunk"] === "object" &&
                typeof $steps["splunk"].then === "function"
              ) {
                $steps["splunk"] = await $steps["splunk"];
              }
            }}
          />
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__cK3Z)}>
        <Dialog
          data-plasmic-name={"selectCityDialog"}
          data-plasmic-override={overrides.selectCityDialog}
          body={
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___8CERd,
                "no-scroll"
              )}
            >
              <ApiRequest
                data-plasmic-name={"getLocationList"}
                data-plasmic-override={overrides.getLocationList}
                body={(() => {
                  try {
                    return (() => {
                      const formData = new globalThis.FormData();
                      formData.append(
                        "table",
                        JSON.stringify(["city", "province"])
                      );
                      return formData;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return { table: ["city", "province"] };
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.getLocationList)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iKi06)}
                  >
                    <Icon14Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getLocationList",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getLocationList",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getLocationList",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                url={"https://www.paziresh24.com/api/getbaseinfo"}
              >
                <LocationView
                  data-plasmic-name={"locationView"}
                  data-plasmic-override={overrides.locationView}
                  className={classNames("__wab_instance", sty.locationView, {
                    [sty.locationViewhasOverlay]: hasVariant(
                      $state,
                      "hasOverlay",
                      "hasOverlay"
                    )
                  })}
                  locations={(() => {
                    try {
                      return $state.getLocationList.data.result;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClickAllCities={async () => {
                    const $steps = {};

                    $steps["runOnClickCity"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onClickCity"],
                            args: [
                              {
                                id: -1,
                                name: "\u0647\u0645\u0647 \u0634\u0647\u0631 \u0647\u0627",
                                en_slug: "ir"
                              }
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClickCity"] != null &&
                      typeof $steps["runOnClickCity"] === "object" &&
                      typeof $steps["runOnClickCity"].then === "function"
                    ) {
                      $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                    }

                    $steps["updateSelectCityDialogOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectCityDialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectCityDialogOpen"] != null &&
                      typeof $steps["updateSelectCityDialogOpen"] ===
                        "object" &&
                      typeof $steps["updateSelectCityDialogOpen"].then ===
                        "function"
                    ) {
                      $steps["updateSelectCityDialogOpen"] = await $steps[
                        "updateSelectCityDialogOpen"
                      ];
                    }
                  }}
                  onClickCity={async value => {
                    const $steps = {};

                    $steps["runOnClickCity"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onClickCity"],
                            args: [
                              (() => {
                                try {
                                  return value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClickCity"] != null &&
                      typeof $steps["runOnClickCity"] === "object" &&
                      typeof $steps["runOnClickCity"].then === "function"
                    ) {
                      $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                    }

                    $steps["updateSelectCityDialogOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectCityDialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectCityDialogOpen"] != null &&
                      typeof $steps["updateSelectCityDialogOpen"] ===
                        "object" &&
                      typeof $steps["updateSelectCityDialogOpen"].then ===
                        "function"
                    ) {
                      $steps["updateSelectCityDialogOpen"] = await $steps[
                        "updateSelectCityDialogOpen"
                      ];
                    }
                  }}
                  onFocusInput={async value => {
                    const $steps = {};

                    $steps["updateIsCityInputFocused"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["isCityInputFocused"]
                            },
                            operation: 0,
                            value: value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsCityInputFocused"] != null &&
                      typeof $steps["updateIsCityInputFocused"] === "object" &&
                      typeof $steps["updateIsCityInputFocused"].then ===
                        "function"
                    ) {
                      $steps["updateIsCityInputFocused"] = await $steps[
                        "updateIsCityInputFocused"
                      ];
                    }
                  }}
                  selectedCity={(() => {
                    try {
                      return $props.selectedCity;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  selectedProvinceId={(() => {
                    try {
                      return $props.selectedCity.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </ApiRequest>
            </div>
          }
          className={classNames("__wab_instance", sty.selectCityDialog, {
            [sty.selectCityDialoghasOverlay]: hasVariant(
              $state,
              "hasOverlay",
              "hasOverlay"
            ),
            [sty.selectCityDialogisFocus]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
          fullScreen={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : undefined
          }
          noTrigger={true}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "selectCityDialog",
              "open"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["selectCityDialog", "open"])}
          title={"\u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0647\u0631"}
        />
      </div>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Portal
          data-plasmic-name={"fragmentPortal"}
          data-plasmic-override={overrides.fragmentPortal}
          className={classNames("__wab_instance", sty.fragmentPortal, {
            [sty.fragmentPortalisFocus]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
          container={
            hasVariant($state, "isFocus", "isFocus") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return (() => {
                      if (typeof window !== "undefined") {
                        return window.document.getElementsByTagName(
                          "body"
                        )?.[0];
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return globalThis.document.body;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        >
          {(
            hasVariant($state, "isFocus", "isFocus") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? false
              : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__vDoMn, {
                [sty.freeBoxisFocus__vDoMnMexBq]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__njZqc, {
                  [sty.freeBoxisFocus__njZqcmexBq]: hasVariant(
                    $state,
                    "isFocus",
                    "isFocus"
                  )
                })}
              >
                <SearchInput
                  cityName={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $props.selectedCity.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  citySlug={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $props.selectedCity.en_slug != "ir" &&
                              $props.selectedCity.en_slug
                              ? $props.selectedCity.en_slug
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.searchInput___9QpFr,
                    {
                      [sty.searchInputisFocus___9QpFrmexBq]: hasVariant(
                        $state,
                        "isFocus",
                        "isFocus"
                      )
                    }
                  )}
                  inputId={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "searchInput22"
                      : "searchInput"
                  }
                  inputValue={(() => {
                    try {
                      return $state.inputValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  isAroundMe={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $props.isAroundMe;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  isFocused={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return !!$state.isFocus;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return !!$state.isFocus;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  onChangeInput={async value => {
                    const $steps = {};

                    $steps["updateInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["inputValue"]
                            },
                            operation: 0,
                            value: value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue"] != null &&
                      typeof $steps["updateInputValue"] === "object" &&
                      typeof $steps["updateInputValue"].then === "function"
                    ) {
                      $steps["updateInputValue"] = await $steps[
                        "updateInputValue"
                      ];
                    }
                  }}
                  onClickCities={async () => {
                    const $steps = {};

                    $steps["updateSelectCityOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectCityDialog", "open"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectCityOpen"] != null &&
                      typeof $steps["updateSelectCityOpen"] === "object" &&
                      typeof $steps["updateSelectCityOpen"].then === "function"
                    ) {
                      $steps["updateSelectCityOpen"] = await $steps[
                        "updateSelectCityOpen"
                      ];
                    }
                  }}
                  onClickSearchIcon={async () => {
                    const $steps = {};

                    $steps["goToS"] = true
                      ? (() => {
                          const actionArgs = { destination: "/s" };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToS"] != null &&
                      typeof $steps["goToS"] === "object" &&
                      typeof $steps["goToS"].then === "function"
                    ) {
                      $steps["goToS"] = await $steps["goToS"];
                    }
                  }}
                  onFocuse={async value => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.isFocus = value);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runOnClickOverlay"] = !value
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onClickOverlay"]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClickOverlay"] != null &&
                      typeof $steps["runOnClickOverlay"] === "object" &&
                      typeof $steps["runOnClickOverlay"].then === "function"
                    ) {
                      $steps["runOnClickOverlay"] = await $steps[
                        "runOnClickOverlay"
                      ];
                    }
                  }}
                />
              </div>
              {(() => {
                try {
                  return !!$state.isFocus;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__pmx5R,
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "no-scroll"
                      : undefined,
                    {
                      [sty.freeBoxisFocus__pmx5RMexBq]: hasVariant(
                        $state,
                        "isFocus",
                        "isFocus"
                      )
                    }
                  )}
                  id={"suggestionContent"}
                >
                  <SearchResultQs
                    citySlug={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $props.selectedCity.en_slug != "ir" &&
                                $props.selectedCity.en_slug
                                ? $props.selectedCity.en_slug
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.searchResultQs__sn1YQ
                    )}
                    onClick={async value => {
                      const $steps = {};

                      $steps["updateIsFocus"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "isFocus",
                              operation: 6
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateIsFocus"] != null &&
                        typeof $steps["updateIsFocus"] === "object" &&
                        typeof $steps["updateIsFocus"].then === "function"
                      ) {
                        $steps["updateIsFocus"] = await $steps["updateIsFocus"];
                      }

                      $steps["runOnFocusChange"] = true
                        ? (() => {
                            const actionArgs = {
                              eventRef: $props["onFocusChange"]
                            };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runOnFocusChange"] != null &&
                        typeof $steps["runOnFocusChange"] === "object" &&
                        typeof $steps["runOnFocusChange"].then === "function"
                      ) {
                        $steps["runOnFocusChange"] = await $steps[
                          "runOnFocusChange"
                        ];
                      }
                    }}
                    terms={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return (() => {
                                const updateTerms = $$.lodash.debounce(() => {
                                  $state.terms = $state.inputValue;
                                }, 1000);
                                updateTerms();
                                return $state.terms;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                  />

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.inputValue.trim().length >= 3;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <SearchResultSimple
                      cityId={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return $props.selectedCity.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.searchResultSimple__zvKe
                      )}
                      inputValue={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return (() => {
                                  const updateTerms = $$.lodash.debounce(() => {
                                    $state.terms = $state.inputValue;
                                  }, 1000);
                                  updateTerms();
                                  return $state.terms;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                    />
                  ) : null}
                </div>
              ) : null}
            </div>
          ) : null}
        </Portal>
      ) : null}
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return console.log("data:", $ctx.fetchedData?.entity);
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "overlay",
    "selectCityDialog",
    "getLocationList",
    "svg",
    "locationView",
    "fragmentPortal",
    "sideEffect"
  ],
  overlay: ["overlay"],
  selectCityDialog: [
    "selectCityDialog",
    "getLocationList",
    "svg",
    "locationView"
  ],
  getLocationList: ["getLocationList", "svg", "locationView"],
  svg: ["svg"],
  locationView: ["locationView"],
  fragmentPortal: ["fragmentPortal"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  overlay: "div";
  selectCityDialog: typeof Dialog;
  getLocationList: typeof ApiRequest;
  svg: "svg";
  locationView: typeof LocationView;
  fragmentPortal: typeof Portal;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearch__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    overlay: makeNodeComponent("overlay"),
    selectCityDialog: makeNodeComponent("selectCityDialog"),
    getLocationList: makeNodeComponent("getLocationList"),
    svg: makeNodeComponent("svg"),
    locationView: makeNodeComponent("locationView"),
    fragmentPortal: makeNodeComponent("fragmentPortal"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
