// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: mTGIwE12clXg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Checkbox from "../../Checkbox"; // plasmic-import: g0pqddGARgnV/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicFilterItemToggle.module.css"; // plasmic-import: mTGIwE12clXg/css

createPlasmicElementProxy;

export type PlasmicFilterItemToggle__VariantMembers = {};
export type PlasmicFilterItemToggle__VariantsArgs = {};
type VariantPropType = keyof PlasmicFilterItemToggle__VariantsArgs;
export const PlasmicFilterItemToggle__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFilterItemToggle__ArgsType = {
  label?: string;
  defaultSelected?: boolean;
  onSelect?: (itemSelect: boolean) => void;
};
type ArgPropType = keyof PlasmicFilterItemToggle__ArgsType;
export const PlasmicFilterItemToggle__ArgProps = new Array<ArgPropType>(
  "label",
  "defaultSelected",
  "onSelect"
);

export type PlasmicFilterItemToggle__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
};

export interface DefaultFilterItemToggleProps {
  label?: string;
  defaultSelected?: boolean;
  onSelect?: (itemSelect: boolean) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFilterItemToggle__RenderFunc(props: {
  variants: PlasmicFilterItemToggle__VariantsArgs;
  args: PlasmicFilterItemToggle__ArgsType;
  overrides: PlasmicFilterItemToggle__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          defaultSelected: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.defaultSelected;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Checkbox
        data-plasmic-name={"checkbox"}
        data-plasmic-override={overrides.checkbox}
        children={null}
        className={classNames("__wab_instance", sty.checkbox)}
        isChecked={
          generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
        }
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
              eventArgs[0]
            );
          }).apply(null, eventArgs);
          (async isChecked => {
            const $steps = {};

            $steps["runOnSelect"] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props["onSelect"],
                    args: [
                      (() => {
                        try {
                          return $state.checkbox.isChecked;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnSelect"] != null &&
              typeof $steps["runOnSelect"] === "object" &&
              typeof $steps["runOnSelect"].then === "function"
            ) {
              $steps["runOnSelect"] = await $steps["runOnSelect"];
            }
          }).apply(null, eventArgs);
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "checkbox"],
  text: ["text"],
  checkbox: ["checkbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  checkbox: typeof Checkbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFilterItemToggle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFilterItemToggle__VariantsArgs;
    args?: PlasmicFilterItemToggle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFilterItemToggle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFilterItemToggle__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFilterItemToggle__ArgProps,
          internalVariantPropNames: PlasmicFilterItemToggle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFilterItemToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFilterItemToggle";
  } else {
    func.displayName = `PlasmicFilterItemToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicFilterItemToggle = Object.assign(
  // Top-level PlasmicFilterItemToggle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    checkbox: makeNodeComponent("checkbox"),

    // Metadata about props expected for PlasmicFilterItemToggle
    internalVariantProps: PlasmicFilterItemToggle__VariantProps,
    internalArgProps: PlasmicFilterItemToggle__ArgProps
  }
);

export default PlasmicFilterItemToggle;
/* prettier-ignore-end */
