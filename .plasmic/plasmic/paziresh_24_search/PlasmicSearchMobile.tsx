/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMdpLWyxbzDCruwMRffW2m
// Component: yb2GxUTcIaA5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: vW4UBuHCFshJ/codeComponent
import LocationView from "../../LocationView"; // plasmic-import: p2ixA7V1voJv/component
import SearchInput from "../../SearchInput"; // plasmic-import: qe20xTbxVmkB/component
import { Portal } from "@/common/fragment/components/portal"; // plasmic-import: 4fT4c69Xtkbb/codeComponent
import SearchContent from "../../SearchContent"; // plasmic-import: PfB5nhEPkWQb/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sMdpLWyxbzDCruwMRffW2m/projectcss
import sty from "./PlasmicSearchMobile.module.css"; // plasmic-import: yb2GxUTcIaA5/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: eKLBqU_Fr5SV/icon

createPlasmicElementProxy;

export type PlasmicSearchMobile__VariantMembers = {
  hasOverlay: "hasOverlay";
  isFocus: "isFocus";
};
export type PlasmicSearchMobile__VariantsArgs = {
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
};
type VariantPropType = keyof PlasmicSearchMobile__VariantsArgs;
export const PlasmicSearchMobile__VariantProps = new Array<VariantPropType>(
  "hasOverlay",
  "isFocus"
);

export type PlasmicSearchMobile__ArgsType = {
  onClickCity?: (value: any) => void;
};
type ArgPropType = keyof PlasmicSearchMobile__ArgsType;
export const PlasmicSearchMobile__ArgProps = new Array<ArgPropType>(
  "onClickCity"
);

export type PlasmicSearchMobile__OverridesType = {
  root?: Flex__<"div">;
  selectCityDialog?: Flex__<typeof Dialog>;
  getLocationList?: Flex__<typeof ApiRequest>;
  locationView?: Flex__<typeof LocationView>;
  fragmentPortal?: Flex__<typeof Portal>;
  suggestionApi?: Flex__<typeof ApiRequest>;
  searchContent?: Flex__<typeof SearchContent>;
  dialog?: Flex__<typeof Dialog>;
  overlay?: Flex__<"div">;
};

export interface DefaultSearchMobileProps {
  onClickCity?: (value: any) => void;
  hasOverlay?: SingleBooleanChoiceArg<"hasOverlay">;
  isFocus?: SingleBooleanChoiceArg<"isFocus">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchMobile__RenderFunc(props: {
  variants: PlasmicSearchMobile__VariantsArgs;
  args: PlasmicSearchMobile__ArgsType;
  overrides: PlasmicSearchMobile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selectCityDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "inputValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "suggestionApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "suggestionApi"
      },
      {
        path: "suggestionApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "suggestionApi"
      },
      {
        path: "suggestionApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "suggestionApi"
      },
      {
        path: "getLocationList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getLocationList"
      },
      {
        path: "getLocationList.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getLocationList"
      },
      {
        path: "getLocationList.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "getLocationList"
      },
      {
        path: "hasOverlay",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasOverlay
      },
      {
        path: "isFocus",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFocus
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootisFocus]: hasVariant($state, "isFocus", "isFocus") }
      )}
    >
      <Dialog
        data-plasmic-name={"selectCityDialog"}
        data-plasmic-override={overrides.selectCityDialog}
        body={
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__wax69,
              "no-scroll"
            )}
          >
            <ApiRequest
              data-plasmic-name={"getLocationList"}
              data-plasmic-override={overrides.getLocationList}
              body={(() => {
                try {
                  return (() => {
                    const formData = new globalThis.FormData();
                    formData.append(
                      "table",
                      JSON.stringify(["city", "province"])
                    );
                    return formData;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return { table: ["city", "province"] };
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.getLocationList)}
              errorDisplay={null}
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__ccTvo)}>
                  <Icon14Icon
                    className={classNames(projectcss.all, sty.svg__nhvkC)}
                    role={"img"}
                  />
                </div>
              }
              method={"POST"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getLocationList",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getLocationList",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "getLocationList",
                  "data"
                ]).apply(null, eventArgs);
              }}
              ref={ref => {
                $refs["getLocationList"] = ref;
              }}
              url={"https://www.paziresh24.com/api/getbaseinfo"}
            >
              <LocationView
                data-plasmic-name={"locationView"}
                data-plasmic-override={overrides.locationView}
                className={classNames("__wab_instance", sty.locationView)}
                locations={(() => {
                  try {
                    return $state.getLocationList.data.result;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                onClickAllCities={async () => {
                  const $steps = {};

                  $steps["runOnClickCity"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClickCity"],
                          args: [
                            {
                              id: -1,
                              name: "\u0647\u0645\u0647 \u0634\u0647\u0631 \u0647\u0627",
                              en_slug: "ir"
                            }
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClickCity"] != null &&
                    typeof $steps["runOnClickCity"] === "object" &&
                    typeof $steps["runOnClickCity"].then === "function"
                  ) {
                    $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                  }
                }}
                onClickCity={async value => {
                  const $steps = {};

                  $steps["runOnClickCity"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onClickCity"],
                          args: [
                            (() => {
                              try {
                                return value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnClickCity"] != null &&
                    typeof $steps["runOnClickCity"] === "object" &&
                    typeof $steps["runOnClickCity"].then === "function"
                  ) {
                    $steps["runOnClickCity"] = await $steps["runOnClickCity"];
                  }
                }}
                selectedProvinceId={"-1"}
              />
            </ApiRequest>
          </div>
        }
        className={classNames("__wab_instance", sty.selectCityDialog, {
          [sty.selectCityDialogisFocus]: hasVariant(
            $state,
            "isFocus",
            "isFocus"
          )
        })}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["selectCityDialog", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["selectCityDialog", "open"])}
        title={"\u0627\u0646\u062a\u062e\u0627\u0628 \u0634\u0647\u0631"}
      />

      <SearchInput
        className={classNames("__wab_instance", sty.searchInput__hyRtm, {
          [sty.searchInputisFocus__hyRtMwDhjd]: hasVariant(
            $state,
            "isFocus",
            "isFocus"
          )
        })}
        inputId={"searchInput"}
        inputValue={(() => {
          try {
            return $state.inputValue;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        isFocused={(() => {
          try {
            return !!$state.isFocus;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onChangeInput={async value => {
          const $steps = {};

          $steps["updateInputValue"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["inputValue"]
                  },
                  operation: 0,
                  value: value
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateInputValue"] != null &&
            typeof $steps["updateInputValue"] === "object" &&
            typeof $steps["updateInputValue"].then === "function"
          ) {
            $steps["updateInputValue"] = await $steps["updateInputValue"];
          }
        }}
        onClickCities={async () => {
          const $steps = {};

          $steps["updateSelectCityOpen"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["selectCityDialog", "open"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateSelectCityOpen"] != null &&
            typeof $steps["updateSelectCityOpen"] === "object" &&
            typeof $steps["updateSelectCityOpen"].then === "function"
          ) {
            $steps["updateSelectCityOpen"] = await $steps[
              "updateSelectCityOpen"
            ];
          }
        }}
        onClickSearchIcon={async () => {
          const $steps = {};

          $steps["goToS"] = true
            ? (() => {
                const actionArgs = { destination: "/s" };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToS"] != null &&
            typeof $steps["goToS"] === "object" &&
            typeof $steps["goToS"].then === "function"
          ) {
            $steps["goToS"] = await $steps["goToS"];
          }
        }}
        onFocuse={async value => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return ($state.isFocus = value);
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      <Portal
        data-plasmic-name={"fragmentPortal"}
        data-plasmic-override={overrides.fragmentPortal}
        className={classNames("__wab_instance", sty.fragmentPortal, {
          [sty.fragmentPortalisFocus]: hasVariant($state, "isFocus", "isFocus")
        })}
        container={(() => {
          try {
            return window.document.getElementsByTagName("body")?.[0];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__oi3Dl, {
            [sty.freeBoxisFocus__oi3DlwDhjd]: hasVariant(
              $state,
              "isFocus",
              "isFocus"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__dm6UY, {
              [sty.freeBoxisFocus__dm6UYwDhjd]: hasVariant(
                $state,
                "isFocus",
                "isFocus"
              )
            })}
          >
            <SearchInput
              className={classNames("__wab_instance", sty.searchInput__uZood, {
                [sty.searchInputisFocus__uZoodwDhjd]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
              inputId={"searchInput"}
              inputValue={(() => {
                try {
                  return $state.inputValue;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              isFocused={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return !!$state.isFocus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return !!$state.isFocus;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              onChangeInput={async value => {
                const $steps = {};

                $steps["updateInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["inputValue"]
                        },
                        operation: 0,
                        value: value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInputValue"] != null &&
                  typeof $steps["updateInputValue"] === "object" &&
                  typeof $steps["updateInputValue"].then === "function"
                ) {
                  $steps["updateInputValue"] = await $steps["updateInputValue"];
                }
              }}
              onClickCities={async () => {
                const $steps = {};

                $steps["updateSelectCityOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectCityDialog", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectCityOpen"] != null &&
                  typeof $steps["updateSelectCityOpen"] === "object" &&
                  typeof $steps["updateSelectCityOpen"].then === "function"
                ) {
                  $steps["updateSelectCityOpen"] = await $steps[
                    "updateSelectCityOpen"
                  ];
                }
              }}
              onClickSearchIcon={async () => {
                const $steps = {};

                $steps["goToS"] = true
                  ? (() => {
                      const actionArgs = { destination: "/s" };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToS"] != null &&
                  typeof $steps["goToS"] === "object" &&
                  typeof $steps["goToS"].then === "function"
                ) {
                  $steps["goToS"] = await $steps["goToS"];
                }
              }}
              onFocuse={async value => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.isFocus = value);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            />
          </div>
          {(() => {
            try {
              return !!$state.isFocus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__s3E2L, {
                [sty.freeBoxisFocus__s3E2LwDhjd]: hasVariant(
                  $state,
                  "isFocus",
                  "isFocus"
                )
              })}
              id={"suggestionContent"}
            >
              <ApiRequest
                data-plasmic-name={"suggestionApi"}
                data-plasmic-override={overrides.suggestionApi}
                className={classNames("__wab_instance", sty.suggestionApi)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p7Nlm)}
                  >
                    <Icon14Icon
                      className={classNames(projectcss.all, sty.svg__a5Slx)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "suggestionApi",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "suggestionApi",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "suggestionApi",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                ref={ref => {
                  $refs["suggestionApi"] = ref;
                }}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/seapi/v1/suggestion?q=${$state.inputValue}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <SearchContent
                  data-plasmic-name={"searchContent"}
                  data-plasmic-override={overrides.searchContent}
                  className={classNames("__wab_instance", sty.searchContent, {
                    [sty.searchContentisFocus]: hasVariant(
                      $state,
                      "isFocus",
                      "isFocus"
                    )
                  })}
                  onClick={async value => {
                    const $steps = {};

                    $steps["updateInputValue"] = value.use_suggestion
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["inputValue"]
                            },
                            operation: 0,
                            value: value.name
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateInputValue"] != null &&
                      typeof $steps["updateInputValue"] === "object" &&
                      typeof $steps["updateInputValue"].then === "function"
                    ) {
                      $steps["updateInputValue"] = await $steps[
                        "updateInputValue"
                      ];
                    }

                    $steps["goToPage"] =
                      !value?.use_suggestion && !!value?.url
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return value?.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }

                    $steps["updateIsFocus"] = !value?.use_suggestion
                      ? (() => {
                          const actionArgs = {
                            vgroup: "isFocus",
                            operation: 6
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIsFocus"] != null &&
                      typeof $steps["updateIsFocus"] === "object" &&
                      typeof $steps["updateIsFocus"].then === "function"
                    ) {
                      $steps["updateIsFocus"] = await $steps["updateIsFocus"];
                    }
                  }}
                  searchQuery={(() => {
                    try {
                      return $state.inputValue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  suggestion={(() => {
                    try {
                      return $state.suggestionApi.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <Dialog
                  data-plasmic-name={"dialog"}
                  data-plasmic-override={overrides.dialog}
                  className={classNames("__wab_instance", sty.dialog)}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["dialog", "open"])}
                />
              </ApiRequest>
            </div>
          ) : null}
        </div>
        {(() => {
          try {
            return !!$state.isFocus;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames(projectcss.all, sty.overlay, {
              [sty.overlayhasOverlay]: hasVariant(
                $state,
                "hasOverlay",
                "hasOverlay"
              ),
              [sty.overlayisFocus]: hasVariant($state, "isFocus", "isFocus")
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateIsFocus"] = true
                ? (() => {
                    const actionArgs = { vgroup: "isFocus", operation: 6 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsFocus"] != null &&
                typeof $steps["updateIsFocus"] === "object" &&
                typeof $steps["updateIsFocus"].then === "function"
              ) {
                $steps["updateIsFocus"] = await $steps["updateIsFocus"];
              }
            }}
          />
        ) : null}
      </Portal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "selectCityDialog",
    "getLocationList",
    "locationView",
    "fragmentPortal",
    "suggestionApi",
    "searchContent",
    "dialog",
    "overlay"
  ],
  selectCityDialog: ["selectCityDialog", "getLocationList", "locationView"],
  getLocationList: ["getLocationList", "locationView"],
  locationView: ["locationView"],
  fragmentPortal: [
    "fragmentPortal",
    "suggestionApi",
    "searchContent",
    "dialog",
    "overlay"
  ],
  suggestionApi: ["suggestionApi", "searchContent", "dialog"],
  searchContent: ["searchContent"],
  dialog: ["dialog"],
  overlay: ["overlay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  selectCityDialog: typeof Dialog;
  getLocationList: typeof ApiRequest;
  locationView: typeof LocationView;
  fragmentPortal: typeof Portal;
  suggestionApi: typeof ApiRequest;
  searchContent: typeof SearchContent;
  dialog: typeof Dialog;
  overlay: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchMobile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchMobile__VariantsArgs;
    args?: PlasmicSearchMobile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchMobile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchMobile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchMobile__ArgProps,
          internalVariantPropNames: PlasmicSearchMobile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchMobile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchMobile";
  } else {
    func.displayName = `PlasmicSearchMobile.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchMobile = Object.assign(
  // Top-level PlasmicSearchMobile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    selectCityDialog: makeNodeComponent("selectCityDialog"),
    getLocationList: makeNodeComponent("getLocationList"),
    locationView: makeNodeComponent("locationView"),
    fragmentPortal: makeNodeComponent("fragmentPortal"),
    suggestionApi: makeNodeComponent("suggestionApi"),
    searchContent: makeNodeComponent("searchContent"),
    dialog: makeNodeComponent("dialog"),
    overlay: makeNodeComponent("overlay"),

    // Metadata about props expected for PlasmicSearchMobile
    internalVariantProps: PlasmicSearchMobile__VariantProps,
    internalArgProps: PlasmicSearchMobile__ArgProps
  }
);

export default PlasmicSearchMobile;
/* prettier-ignore-end */
