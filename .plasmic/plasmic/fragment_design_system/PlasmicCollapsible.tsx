// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h9Dbk9ygddw7UVEq1NNhKi
// Component: kYXN54tCkD2S

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import sty from "./PlasmicCollapsible.module.css"; // plasmic-import: kYXN54tCkD2S/css

createPlasmicElementProxy;

export type PlasmicCollapsible__VariantMembers = {};
export type PlasmicCollapsible__VariantsArgs = {};
type VariantPropType = keyof PlasmicCollapsible__VariantsArgs;
export const PlasmicCollapsible__VariantProps = new Array<VariantPropType>();

export type PlasmicCollapsible__ArgsType = {
  defaultMaxHeight?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  color?: string;
};
type ArgPropType = keyof PlasmicCollapsible__ArgsType;
export const PlasmicCollapsible__ArgProps = new Array<ArgPropType>(
  "defaultMaxHeight",
  "children",
  "slot",
  "slot2",
  "color"
);

export type PlasmicCollapsible__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultCollapsibleProps {
  defaultMaxHeight?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  color?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollapsible__RenderFunc(props: {
  variants: PlasmicCollapsible__VariantsArgs;
  args: PlasmicCollapsible__ArgsType;
  overrides: PlasmicCollapsible__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          defaultMaxHeight: "200px",
          color: "#fff"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "openStatus",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___6ZpCy)}
        style={(() => {
          try {
            return (() => {
              if (!$state.openStatus) {
                return { "max-height": $props.defaultMaxHeight };
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wUzNa
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec non est felis. Curabitur nibh velit, vehicula quis orci at, scelerisque malesuada sem. Ut tincidunt nisl nunc. Fusce in mollis enim, sodales porta eros. Sed quis pharetra tortor. Donec pulvinar bibendum ligula ultricies rutrum. Morbi ultricies ipsum vel augue venenatis interdum. Sed sodales cursus lectus, eget congue purus facilisis id. Suspendisse nec vestibulum justo, quis tincidunt justo. Morbi a nibh pharetra, vestibulum orci nec, varius magna. Duis blandit eros urna, sed iaculis tortor consequat non. Donec finibus, diam faucibus sodales condimentum, leo arcu egestas mauris, vitae sollicitudin leo nulla ut nisi.\nNam metus eros, sagittis sed rhoncus vitae, eleifend nec augue. Proin vulputate nulla nec leo ullamcorper scelerisque. Duis id massa sem. Proin hendrerit risus vitae tincidunt viverra. Donec augue risus, condimentum in metus eleifend, luctus hendrerit lacus. Quisque congue nibh a turpis tempor sodales. Aenean pretium non libero non pharetra. Nulla gravida odio metus, non accumsan dolor cursus et. Aenean consequat augue quis felis mattis consequat. Phasellus dapibus mauris in tincidunt tristique. In nec dui vitae sem facilisis egestas. Proin sollicitudin nec enim a mollis. Aenean a odio quis ipsum ultrices condimentum at id massa. Vestibulum eu magna enim. Etiam a mauris rutrum leo posuere consectetur."
              }
            </div>
          ),
          value: args.slot2
        })}
        {(() => {
          try {
            return !$state.openStatus;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__zqpj8)}
            style={(() => {
              try {
                return {
                  "box-shadow": `0px 0px 40px 35px ${$props.color}`
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        ) : null}
      </div>
      {(() => {
        try {
          return !$state.openStatus;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__jl3Hm)}
          onClick={async event => {
            const $steps = {};

            $steps["updateOpenStatus"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["openStatus"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpenStatus"] != null &&
              typeof $steps["updateOpenStatus"] === "object" &&
              typeof $steps["updateOpenStatus"].then === "function"
            ) {
              $steps["updateOpenStatus"] = await $steps["updateOpenStatus"];
            }
          }}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r49Fh
                )}
              >
                {"Show more"}
              </div>
            ),
            value: args.children
          })}
        </div>
      ) : null}
      {(() => {
        try {
          return $state.openStatus;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__yMtF2)}
          onClick={async event => {
            const $steps = {};

            $steps["updateOpenStatus"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["openStatus"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpenStatus"] != null &&
              typeof $steps["updateOpenStatus"] === "object" &&
              typeof $steps["updateOpenStatus"].then === "function"
            ) {
              $steps["updateOpenStatus"] = await $steps["updateOpenStatus"];
            }
          }}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2ExAu
                )}
              >
                {"Show less"}
              </div>
            ),
            value: args.slot
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollapsible__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollapsible__VariantsArgs;
    args?: PlasmicCollapsible__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollapsible__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollapsible__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCollapsible__ArgProps,
          internalVariantPropNames: PlasmicCollapsible__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollapsible__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollapsible";
  } else {
    func.displayName = `PlasmicCollapsible.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapsible = Object.assign(
  // Top-level PlasmicCollapsible renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCollapsible
    internalVariantProps: PlasmicCollapsible__VariantProps,
    internalArgProps: PlasmicCollapsible__ArgProps
  }
);

export default PlasmicCollapsible;
/* prettier-ignore-end */
