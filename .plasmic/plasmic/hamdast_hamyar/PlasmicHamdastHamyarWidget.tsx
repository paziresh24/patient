/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: g8Bqu3xcbG5xgWev5sVtns
// Component: SXuHQqEYBK76

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: g8Bqu3xcbG5xgWev5sVtns/projectcss
import sty from "./PlasmicHamdastHamyarWidget.module.css"; // plasmic-import: SXuHQqEYBK76/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: G5ML7-YMIpVK/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon

createPlasmicElementProxy;

export type PlasmicHamdastHamyarWidget__VariantMembers = {};
export type PlasmicHamdastHamyarWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamdastHamyarWidget__VariantsArgs;
export const PlasmicHamdastHamyarWidget__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamdastHamyarWidget__ArgsType = { profileData?: any };
type ArgPropType = keyof PlasmicHamdastHamyarWidget__ArgsType;
export const PlasmicHamdastHamyarWidget__ArgProps = new Array<ArgPropType>(
  "profileData"
);

export type PlasmicHamdastHamyarWidget__OverridesType = {
  root?: Flex__<"div">;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  svg?: Flex__<"svg">;
};

export interface DefaultHamdastHamyarWidgetProps {
  profileData?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamdastHamyarWidget__RenderFunc(props: {
  variants: PlasmicHamdastHamyarWidget__VariantsArgs;
  args: PlasmicHamdastHamyarWidget__ArgsType;
  overrides: PlasmicHamdastHamyarWidget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Paziresh24Button
        data-plasmic-name={"paziresh24Button"}
        data-plasmic-override={overrides.paziresh24Button}
        children2={
          "\u062a\u0645\u0627\u0633 \u0628\u0627 \u0645\u0646\u0634\u06cc"
        }
        className={classNames("__wab_instance", sty.paziresh24Button)}
        loading={(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()}
        onClick={async event => {
          const $steps = {};

          $steps["invokeGlobalAction"] = !$ctx.auth.isLogin
            ? (() => {
                const actionArgs = { args: [] };
                return $globalActions["AuthGlobalContext.login"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateVariable"] = $ctx.auth.isLogin
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateVariable"] != null &&
            typeof $steps["updateVariable"] === "object" &&
            typeof $steps["updateVariable"].then === "function"
          ) {
            $steps["updateVariable"] = await $steps["updateVariable"];
          }

          $steps["secureCall"] = $ctx.auth.isLogin
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://apigw.paziresh24.com/v1/n8n-nelson/webhook/hamyar/v1/secure-call",
                    undefined,
                    (() => {
                      try {
                        return {
                          provider_user_id: $props.profileData.user_id,
                          user_cell: $ctx.auth.info.cell
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["secureCall"] != null &&
            typeof $steps["secureCall"] === "object" &&
            typeof $steps["secureCall"].then === "function"
          ) {
            $steps["secureCall"] = await $steps["secureCall"];
          }

          $steps["showToast"] = $steps.secureCall?.data?.message
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    (() => {
                      try {
                        return $steps.secureCall?.data?.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    undefined,
                    10000
                  ]
                };
                return $globalActions["Fragment.showToast"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["showToast"] != null &&
            typeof $steps["showToast"] === "object" &&
            typeof $steps["showToast"].then === "function"
          ) {
            $steps["showToast"] = await $steps["showToast"];
          }

          $steps["finishLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["finishLoading"] != null &&
            typeof $steps["finishLoading"] === "object" &&
            typeof $steps["finishLoading"].then === "function"
          ) {
            $steps["finishLoading"] = await $steps["finishLoading"];
          }
        }}
        outline={true}
        showStartIcon={true}
        startIcon={
          <IconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "paziresh24Button", "svg"],
  paziresh24Button: ["paziresh24Button", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24Button: typeof Paziresh24Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamdastHamyarWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamdastHamyarWidget__VariantsArgs;
    args?: PlasmicHamdastHamyarWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamdastHamyarWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamdastHamyarWidget__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamdastHamyarWidget__ArgProps,
          internalVariantPropNames: PlasmicHamdastHamyarWidget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamdastHamyarWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamdastHamyarWidget";
  } else {
    func.displayName = `PlasmicHamdastHamyarWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicHamdastHamyarWidget = Object.assign(
  // Top-level PlasmicHamdastHamyarWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHamdastHamyarWidget
    internalVariantProps: PlasmicHamdastHamyarWidget__VariantProps,
    internalArgProps: PlasmicHamdastHamyarWidget__ArgProps
  }
);

export default PlasmicHamdastHamyarWidget;
/* prettier-ignore-end */
