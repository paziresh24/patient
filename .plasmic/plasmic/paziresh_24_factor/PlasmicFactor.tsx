/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 85GFtqPAFvUkDYJxzFDEYS
// Component: x0UykBoeZWyL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: mET2CFwJSE6X/codeComponent
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import TextInput from "../../TextInput"; // plasmic-import: gwWZcNwcxOfS/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Paziresh24Dialog from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 85GFtqPAFvUkDYJxzFDEYS/projectcss
import sty from "./PlasmicFactor.module.css"; // plasmic-import: x0UykBoeZWyL/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: DAaVIZuoY3lJ/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: KNObQepbuU98/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import WhatsappIcon from "../fragment_icons/icons/PlasmicIcon__Whatsapp"; // plasmic-import: oob3UzcKBsd_/icon
import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import Icons8TelegramSvgIcon from "./icons/PlasmicIcon__Icons8TelegramSvg"; // plasmic-import: vvUuFXXTikkU/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 9YiWVSMsEV_R/icon

createPlasmicElementProxy;

export type PlasmicFactor__VariantMembers = {};
export type PlasmicFactor__VariantsArgs = {};
type VariantPropType = keyof PlasmicFactor__VariantsArgs;
export const PlasmicFactor__VariantProps = new Array<VariantPropType>();

export type PlasmicFactor__ArgsType = {};
type ArgPropType = keyof PlasmicFactor__ArgsType;
export const PlasmicFactor__ArgProps = new Array<ArgPropType>();

export type PlasmicFactor__OverridesType = {
  root?: Flex__<"div">;
  paymentBox?: Flex__<"div">;
  paymentDetaile?: Flex__<"div">;
  priceCalculator?: Flex__<typeof ApiRequest>;
  getWallet?: Flex__<typeof ApiRequest>;
  discountRow?: Flex__<"div">;
  cancellationPolicy?: Flex__<typeof ApiRequest>;
  warning?: Flex__<"div">;
  support?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  txtDiscount?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  doctorInfo?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  dialog2?: Flex__<typeof Paziresh24Dialog>;
  embedHtml?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
  getDoctorInfo?: Flex__<typeof ApiRequest>;
};

export interface DefaultFactorProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFactor__RenderFunc(props: {
  variants: PlasmicFactor__VariantsArgs;
  args: PlasmicFactor__ArgsType;
  overrides: PlasmicFactor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "priceCalculator.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "priceCalculator.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "priceCalculator.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "txtDiscount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "getDoctorInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getDoctorInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getDoctorInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "discountShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "discountButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "serviceCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "vat",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "discount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "discountToken",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "payableCost",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paymentButtonText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a"
      },
      {
        path: "sample",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "getWallet.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getWallet.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getWallet.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "paymentLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isErrorInParams",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cancellationPolicy.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancellationPolicy.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cancellationPolicy.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFactor.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFactor.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFactor.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return (
                !$state.getDoctorInfo.loading &&
                !$state.getDoctorInfo.data.data.is_deleted &&
                !$state.getDoctorInfo.data.data.is_paid
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__mNkXp)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"paymentBox"}
                data-plasmic-override={overrides.paymentBox}
                hasGap={true}
                className={classNames(projectcss.all, sty.paymentBox)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"paymentDetaile"}
                  data-plasmic-override={overrides.paymentDetaile}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.paymentDetaile)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aFoxC
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                  </div>
                  <ApiRequest
                    data-plasmic-name={"priceCalculator"}
                    data-plasmic-override={overrides.priceCalculator}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCalculator
                    )}
                    errorDisplay={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cl9XW
                        )}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__kSr1O)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hyXcs
                          )}
                        >
                          {
                            "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                          }
                        </div>
                      </Stack__>
                    }
                    loadingDisplay={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wt2Fg
                        )}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__igWmn)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ouNz
                          )}
                        >
                          {
                            "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                          }
                        </div>
                      </Stack__>
                    }
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "priceCalculator",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "priceCalculator",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "priceCalculator",
                        "data"
                      ]).apply(null, eventArgs);
                    }}
                    params={(() => {
                      try {
                        return {
                          f_keys: JSON.stringify({
                            center_id: $ctx.query.centerId,
                            user_id:
                              $state.getDoctorInfo.data.data.medical_code,
                            service_id: $ctx.query.serviceId
                          }),
                          calculator_data: JSON.stringify({
                            national_code: $ctx.query.selectedNationalCode
                            // "hospital_id":"4"
                          })
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    url={(() => {
                      try {
                        return `https://apigw.paziresh24.com/v1/book-price?book_id=${$ctx.query.bookId}&center_id=${$ctx.query.centerId}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ncWwE)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ogwmc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oJ8Fv
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vrLa0
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a:"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iFd7Z
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    (
                                      $state.priceCalculator.data.result
                                        .payable_cost / 10
                                    )
                                      .toString()
                                      .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                    " تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f22JD
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2YYt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jlcY
                            )}
                          >
                            {
                              "\u0627\u0639\u062a\u0628\u0627\u0631 \u06a9\u06cc\u0641 \u067e\u0648\u0644:"
                            }
                          </div>
                          <ApiRequest
                            data-plasmic-name={"getWallet"}
                            data-plasmic-override={overrides.getWallet}
                            className={classNames(
                              "__wab_instance",
                              sty.getWallet
                            )}
                            config={(() => {
                              try {
                                return (() => {
                                  const token = globalThis.document.cookie
                                    .split("; ")
                                    .find(row => row.startsWith("token="))
                                    ?.split("=")[1];
                                  const headers = token
                                    ? { Authorization: `Bearer ${token}` }
                                    : {};
                                  return {
                                    headers,
                                    ...$ctx.Fragment.previewApiConfig
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            errorDisplay={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lanQ8
                                )}
                              >
                                {"Error fetching data"}
                              </div>
                            }
                            loadingDisplay={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qw0Bj
                                )}
                              >
                                {"Loading..."}
                              </div>
                            }
                            method={"GET"}
                            onError={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "getWallet",
                                "error"
                              ]).apply(null, eventArgs);
                            }}
                            onLoading={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "getWallet",
                                "loading"
                              ]).apply(null, eventArgs);
                            }}
                            onSuccess={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "getWallet",
                                "data"
                              ]).apply(null, eventArgs);
                            }}
                            url={
                              "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pPhyE
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      ($state.getWallet.data.data.balance / 10)
                                        .toString()
                                        .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                      " تومان"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062e\u0637\u0627\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </ApiRequest>
                        </div>
                      </div>
                      {(() => {
                        try {
                          return $state.discountShow;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"discountRow"}
                          data-plasmic-override={overrides.discountRow}
                          className={classNames(
                            projectcss.all,
                            sty.discountRow
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wxRF
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qiCNd
                              )}
                            >
                              {"\u062a\u062e\u0641\u06cc\u0641:"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cLbeH
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.discount == ""
                                      ? (
                                          $state.priceCalculator.data.result
                                            .vat / 10
                                        )
                                          .toString()
                                          .replace(
                                            /\B(?=(\d{3})+(?!\d))/g,
                                            ","
                                          ) + " تومان"
                                      : $state.discount;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zO0Sq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__p6Ifi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dWsZ
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a: "
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m05Et
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    let payableCost =
                                      $state.priceCalculator.data.result
                                        .payable_cost;
                                    if (
                                      payableCost -
                                        $state.getWallet.data.data.balance >
                                      0
                                    ) {
                                      return (
                                        (
                                          (payableCost -
                                            $state.getWallet.data.data
                                              .balance) /
                                          10
                                        )
                                          .toString()
                                          .replace(
                                            /\B(?=(\d{3})+(?!\d))/g,
                                            ","
                                          ) + " تومان"
                                      );
                                    } else {
                                      return "0 تومان";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </Stack__>
                    {(() => {
                      try {
                        return (
                          !!$state.priceCalculator.data.error &&
                          $state.getDoctorInfo.data.data.centers?.find(
                            center => center.id === $ctx.query.centerId
                          )?.center_type !== 1
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tuiRh
                        )}
                      >
                        <InfoIcon
                          className={classNames(projectcss.all, sty.svg__ejov9)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__paJis
                          )}
                        >
                          {
                            "\u0642\u06cc\u0645\u062a \u0628\u062f\u0648\u0646 \u0628\u06cc\u0645\u0647 \u0645\u062d\u0627\u0633\u0628\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a! \u0633\u0627\u0645\u0627\u0646\u0647 \u0628\u06cc\u0645\u0647 \u0648\u0632\u0627\u0631\u062a \u0628\u0647\u062f\u0627\u0634\u062a \u0642\u0637\u0639 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f."
                          }
                        </div>
                      </Stack__>
                    ) : null}
                  </ApiRequest>
                  {(() => {
                    try {
                      return $ctx.query.centerId == 5532;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__syYqL)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pEAn
                        )}
                      >
                        <svg
                          className={classNames(projectcss.all, sty.svg__ejbmw)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l5Yeu
                          )}
                        >
                          {
                            "\u0636\u0645\u0627\u0646\u062a 100% \u0628\u0627\u0632\u06af\u0634\u062a \u0648\u062c\u0647 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
                          }
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                </Stack__>
                <ApiRequest
                  data-plasmic-name={"cancellationPolicy"}
                  data-plasmic-override={overrides.cancellationPolicy}
                  className={classNames(
                    "__wab_instance",
                    sty.cancellationPolicy
                  )}
                  errorDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zKpdL
                      )}
                    >
                      {"Error fetching data"}
                    </div>
                  }
                  loadingDisplay={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ezBQw
                      )}
                    >
                      {"Loading..."}
                    </div>
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cancellationPolicy",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cancellationPolicy",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cancellationPolicy",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  params={(() => {
                    try {
                      return {
                        doctor_id: $state.getDoctorInfo.data.data.doctor.id,
                        center_id: $state.getDoctorInfo.data.data.center_id
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={
                    "https://apigw.paziresh24.com/payment/v1/cancellation-policy"
                  }
                >
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"warning"}
                      data-plasmic-override={overrides.warning}
                      className={classNames(projectcss.all, sty.warning)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rEoqk
                        )}
                      >
                        <Icon7Icon
                          className={classNames(projectcss.all, sty.svg__xyFuw)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aWv1G
                          )}
                        >
                          {
                            "\u0642\u0648\u0627\u0646\u06cc\u0646 \u0627\u0633\u062a\u0631\u062f\u0627\u062f"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aqjMk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (
                                  !$state.cancellationPolicy.data.refund_active
                                ) {
                                  return "در صورت لغو نوبت\u060C وجه پرداختی شما مسترد نخواهد شد.";
                                }
                                let cancelTime = "";
                                if (
                                  $state.cancellationPolicy.data
                                    .respite_to_refund != 0
                                ) {
                                  cancelTime = `${$state.cancellationPolicy.data.respite_to_refund} ساعت مانده به`;
                                }
                                return `در صورت لغو نوبت تا ${cancelTime} زمان نوبت، وچه پرداختی شما مسترد خواهد شد. در غیر این صورت، وجه پرداختی شما مسترد نخواهد شد.`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062f\u0631 \u0635\u0648\u0631\u062a \u0644\u063a\u0648 \u0646\u0648\u0628\u062a \u062a\u0648\u0633\u0637 \u0628\u06cc\u0645\u0627\u0631\u060c \u0628\u0631\u0627\u06cc \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0628\u0644\u063a \u0628\u0647 \u0645\u0631\u06a9\u0632 \u062f\u0631\u0645\u0627\u0646\u06cc \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                </ApiRequest>
                <Paziresh24Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5T9Fc
                      )}
                    >
                      {
                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a"
                      }
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button___3XDAp
                  )}
                  isDisabled={(() => {
                    try {
                      return (
                        $state.getDoctorInfo.loading ||
                        !$state.getDoctorInfo.data ||
                        $state.getWallet.loading ||
                        !$state.getWallet.data ||
                        $state.priceCalculator.loading ||
                        !$state.priceCalculator.data
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "isDisabled";
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePaymentLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["paymentLoading"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePaymentLoading"] != null &&
                      typeof $steps["updatePaymentLoading"] === "object" &&
                      typeof $steps["updatePaymentLoading"].then === "function"
                    ) {
                      $steps["updatePaymentLoading"] = await $steps[
                        "updatePaymentLoading"
                      ];
                    }

                    $steps["goToPage2"] =
                      $state.getWallet.data.data.balance >=
                      $state.priceCalculator.data.result.payable_cost
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `https://apigw.paziresh24.com/payment/v1/split?book_id=${$ctx.query.bookId}&center_id=${$ctx.query.centerId}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPage2"] != null &&
                      typeof $steps["goToPage2"] === "object" &&
                      typeof $steps["goToPage2"].then === "function"
                    ) {
                      $steps["goToPage2"] = await $steps["goToPage2"];
                    }

                    $steps["createPaymentGatewayLink"] =
                      $state.getWallet.data.data.balance <
                      $state.priceCalculator.data.result.payable_cost
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                (() => {
                                  try {
                                    return {
                                      amount:
                                        $state.priceCalculator.data.result
                                          .payable_cost -
                                        $state.getWallet.data.data.balance,
                                      returnlink: window.btoa(
                                        `https://apigw.paziresh24.com/payment/v1/split?book_id=${$ctx.query.bookId}&center_id=${$ctx.query.centerId}`
                                      ),
                                      title: "افزایش موجودی کیف پول"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return {};
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      const token = globalThis.document.cookie
                                        .split("; ")
                                        .find(row => row.startsWith("token="))
                                        ?.split("=")[1];
                                      const headers = token
                                        ? { Authorization: `Bearer ${token}` }
                                        : {};
                                      return {
                                        headers,
                                        ...$ctx.Fragment.previewApiConfig
                                      };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["createPaymentGatewayLink"] != null &&
                      typeof $steps["createPaymentGatewayLink"] === "object" &&
                      typeof $steps["createPaymentGatewayLink"].then ===
                        "function"
                    ) {
                      $steps["createPaymentGatewayLink"] = await $steps[
                        "createPaymentGatewayLink"
                      ];
                    }

                    $steps["goToPage"] = (() => {
                      console.log($steps.createPaymentGatewayLink);
                      return (
                        $steps.createPaymentGatewayLink?.data?.status === true
                      );
                    })()
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return $steps.createPaymentGatewayLink.data.data
                                  .link;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                />

                <div
                  data-plasmic-name={"support"}
                  data-plasmic-override={overrides.support}
                  className={classNames(projectcss.all, sty.support)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q4Qxb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xIuJo
                      )}
                    >
                      {
                        "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u06cc\u0627 \u06af\u0632\u0627\u0631\u0634 \u0645\u0634\u06a9\u0644 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                      }
                    </div>
                    <InfoIcon
                      className={classNames(projectcss.all, sty.svg___30Wci)}
                      role={"img"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ldCh2)}
                  >
                    <Paziresh24Button
                      children2={
                        "\u06af\u0641\u062a\u06af\u0648 \u062f\u0631 \u0648\u0627\u062a\u0633\u0627\u067e"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__yMoWn
                      )}
                      endIcon={
                        <WhatsappIcon
                          className={classNames(projectcss.all, sty.svg__hZsdS)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["whatsappLink"] = true
                          ? (() => {
                              const actionArgs = {
                                args: ["https://wa.me/989105846685"]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["whatsappLink"] != null &&
                          typeof $steps["whatsappLink"] === "object" &&
                          typeof $steps["whatsappLink"].then === "function"
                        ) {
                          $steps["whatsappLink"] = await $steps["whatsappLink"];
                        }
                      }}
                      outline={true}
                      showEndIcon={true}
                    />

                    <Paziresh24Button
                      children2={
                        "\u06af\u0641\u062a\u06af\u0648 \u062f\u0631 \u0627\u06cc\u062a\u0627"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button___4Rd
                      )}
                      endIcon={
                        <EitaaIcon
                          className={classNames(projectcss.all, sty.svg__twf3W)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["eitaaLink"] = true
                          ? (() => {
                              const actionArgs = {
                                args: ["https://eitaa.com/moshirv"]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["eitaaLink"] != null &&
                          typeof $steps["eitaaLink"] === "object" &&
                          typeof $steps["eitaaLink"].then === "function"
                        ) {
                          $steps["eitaaLink"] = await $steps["eitaaLink"];
                        }
                      }}
                      outline={true}
                      showEndIcon={true}
                    />

                    <Paziresh24Button
                      children2={
                        "\u06af\u0641\u062a\u06af\u0648 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645"
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__f5Reu
                      )}
                      endIcon={
                        <Icons8TelegramSvgIcon
                          className={classNames(projectcss.all, sty.svg__kbtub)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["tgLink"] = true
                          ? (() => {
                              const actionArgs = {
                                args: ["https://t.me/moshirv"]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["tgLink"] != null &&
                          typeof $steps["tgLink"] === "object" &&
                          typeof $steps["tgLink"].then === "function"
                        ) {
                          $steps["tgLink"] = await $steps["tgLink"];
                        }
                      }}
                      outline={true}
                      showEndIcon={true}
                    />
                  </Stack__>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__ymeW)}
                  dir={"rtl"}
                >
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "accordion",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames("__wab_instance", sty.accordion),
                      destroyInactivePanel: false,
                      expandIconPosition: "end",
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__gBgfB
                            )}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__njD7
                                )}
                              >
                                {"\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jF7LZ
                              )}
                            >
                              <TextInput
                                data-plasmic-name={"txtDiscount"}
                                data-plasmic-override={overrides.txtDiscount}
                                className={classNames(
                                  "__wab_instance",
                                  sty.txtDiscount
                                )}
                                isDisabled={(() => {
                                  try {
                                    return !$state.discountButton;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "txtDiscount",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                }}
                                placeholder={
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ..."
                                }
                                startIcon={
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__qbXSn
                                    )}
                                    role={"img"}
                                  />
                                }
                                value={
                                  generateStateValueProp($state, [
                                    "txtDiscount",
                                    "value"
                                  ]) ?? ""
                                }
                              />

                              <Button
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__pDuVt
                                    )}
                                  >
                                    {"\u0627\u0639\u0645\u0627\u0644"}
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button
                                )}
                                isDisabled={(() => {
                                  try {
                                    return !$state.discountButton;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["showMessage"] =
                                    $state.txtDiscount.value == ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u0626\u06cc\u062f",
                                              "top-left"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showMessage"] != null &&
                                    typeof $steps["showMessage"] === "object" &&
                                    typeof $steps["showMessage"].then ===
                                      "function"
                                  ) {
                                    $steps["showMessage"] = await $steps[
                                      "showMessage"
                                    ];
                                  }

                                  $steps["inquiryDiscount"] =
                                    $state.txtDiscount.value != ""
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              undefined,
                                              (() => {
                                                try {
                                                  return (
                                                    "https://www.paziresh24.com/api/discount/v1/inquiry?book_id=" +
                                                    $state.getDoctorInfo.data
                                                      .result[0].book_id +
                                                    "&code=" +
                                                    $state.txtDiscount.value
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              undefined,
                                              undefined
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["inquiryDiscount"] != null &&
                                    typeof $steps["inquiryDiscount"] ===
                                      "object" &&
                                    typeof $steps["inquiryDiscount"].then ===
                                      "function"
                                  ) {
                                    $steps["inquiryDiscount"] = await $steps[
                                      "inquiryDiscount"
                                    ];
                                  }

                                  $steps["updateServiceCost"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["serviceCost"]
                                            },
                                            operation: 0,
                                            value:
                                              (
                                                $steps.inquiryDiscount.data
                                                  .result.service_price / 10
                                              )
                                                .toString()
                                                .replace(
                                                  /\B(?=(\d{3})+(?!\d))/g,
                                                  ","
                                                ) + " تومان"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateServiceCost"] != null &&
                                    typeof $steps["updateServiceCost"] ===
                                      "object" &&
                                    typeof $steps["updateServiceCost"].then ===
                                      "function"
                                  ) {
                                    $steps["updateServiceCost"] = await $steps[
                                      "updateServiceCost"
                                    ];
                                  }

                                  $steps["updateVat"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["vat"]
                                            },
                                            operation: 0,
                                            value:
                                              (
                                                $steps.inquiryDiscount.data
                                                  .result.vat / 10
                                              )
                                                .toString()
                                                .replace(
                                                  /\B(?=(\d{3})+(?!\d))/g,
                                                  ","
                                                ) + " تومان"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateVat"] != null &&
                                    typeof $steps["updateVat"] === "object" &&
                                    typeof $steps["updateVat"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVat"] = await $steps[
                                      "updateVat"
                                    ];
                                  }

                                  $steps["updateDiscount"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discount"]
                                            },
                                            operation: 0,
                                            value:
                                              (
                                                $steps.inquiryDiscount.data
                                                  .result.discount_price / 10
                                              )
                                                .toString()
                                                .replace(
                                                  /\B(?=(\d{3})+(?!\d))/g,
                                                  ","
                                                ) + " تومان"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateDiscount"] != null &&
                                    typeof $steps["updateDiscount"] ===
                                      "object" &&
                                    typeof $steps["updateDiscount"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDiscount"] = await $steps[
                                      "updateDiscount"
                                    ];
                                  }

                                  $steps["updatePayableCost"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["payableCost"]
                                            },
                                            operation: 0,
                                            value:
                                              (
                                                $steps.inquiryDiscount.data
                                                  .result.payable_cost / 10
                                              )
                                                .toString()
                                                .replace(
                                                  /\B(?=(\d{3})+(?!\d))/g,
                                                  ","
                                                ) + " تومان"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updatePayableCost"] != null &&
                                    typeof $steps["updatePayableCost"] ===
                                      "object" &&
                                    typeof $steps["updatePayableCost"].then ===
                                      "function"
                                  ) {
                                    $steps["updatePayableCost"] = await $steps[
                                      "updatePayableCost"
                                    ];
                                  }

                                  $steps["updateDiscountToken"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountToken"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.inquiryDiscount.data.result
                                                .token
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateDiscountToken"] != null &&
                                    typeof $steps["updateDiscountToken"] ===
                                      "object" &&
                                    typeof $steps["updateDiscountToken"]
                                      .then === "function"
                                  ) {
                                    $steps["updateDiscountToken"] =
                                      await $steps["updateDiscountToken"];
                                  }

                                  $steps["showDiscount"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountShow"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["showDiscount"] != null &&
                                    typeof $steps["showDiscount"] ===
                                      "object" &&
                                    typeof $steps["showDiscount"].then ===
                                      "function"
                                  ) {
                                    $steps["showDiscount"] = await $steps[
                                      "showDiscount"
                                    ];
                                  }

                                  $steps["disableDiscountButton"] =
                                    $steps.inquiryDiscount.data.result !=
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountButton"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["disableDiscountButton"] != null &&
                                    typeof $steps["disableDiscountButton"] ===
                                      "object" &&
                                    typeof $steps["disableDiscountButton"]
                                      .then === "function"
                                  ) {
                                    $steps["disableDiscountButton"] =
                                      await $steps["disableDiscountButton"];
                                  }

                                  $steps["hideDiscount"] =
                                    $steps.inquiryDiscount.data.result ==
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountShow"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["hideDiscount"] != null &&
                                    typeof $steps["hideDiscount"] ===
                                      "object" &&
                                    typeof $steps["hideDiscount"].then ===
                                      "function"
                                  ) {
                                    $steps["hideDiscount"] = await $steps[
                                      "hideDiscount"
                                    ];
                                  }

                                  $steps["discountNotFound"] =
                                    $steps.inquiryDiscount.data.result ==
                                    undefined
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0627\u0634\u062a\u0628\u0627\u0647 \u0645\u06cc \u0628\u0627\u0634\u062f!",
                                              "top-left"
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["discountNotFound"] != null &&
                                    typeof $steps["discountNotFound"] ===
                                      "object" &&
                                    typeof $steps["discountNotFound"].then ===
                                      "function"
                                  ) {
                                    $steps["discountNotFound"] = await $steps[
                                      "discountNotFound"
                                    ];
                                  }

                                  $steps["updatePaymentButtonText"] =
                                    $steps.inquiryDiscount.data.result
                                      .payable_cost == "0"
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "paymentButtonText"
                                              ]
                                            },
                                            operation: 0,
                                            value: "آغاز گفتگو با پزشک"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updatePaymentButtonText"] != null &&
                                    typeof $steps["updatePaymentButtonText"] ===
                                      "object" &&
                                    typeof $steps["updatePaymentButtonText"]
                                      .then === "function"
                                  ) {
                                    $steps["updatePaymentButtonText"] =
                                      await $steps["updatePaymentButtonText"];
                                  }
                                }}
                              />
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            className={classNames(
                              "__wab_instance",
                              sty.accordionItem__oSqFf
                            )}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__aWdQx
                                )}
                              >
                                {"Second Item"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wwRmS
                              )}
                            >
                              {"Second Children"}
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "activePanelId",
                          ["accordion", "activePanelId"],
                          AntdAccordion_Helpers
                        ).apply(null, eventArgs);
                      },
                      size: "large"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "accordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"accordion"}
                        data-plasmic-override={overrides.accordion}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Ebui)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ujLFa)}
                    >
                      <Icon7Icon
                        className={classNames(projectcss.all, sty.svg__pdsDr)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uPnQe
                        )}
                      >
                        {
                          "\u0644\u0637\u0641\u0627 \u062f\u0642\u062a \u06a9\u0646\u06cc\u062f!"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mN0Fw
                      )}
                    >
                      {""}
                    </div>
                  </div>
                </div>
              </Stack__>
              <div
                data-plasmic-name={"doctorInfo"}
                data-plasmic-override={overrides.doctorInfo}
                className={classNames(projectcss.all, sty.doctorInfo)}
              >
                {(() => {
                  try {
                    return !!$state.getDoctorInfo.error;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___987RA)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___7Ahy)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eHWe
                      )}
                    >
                      {
                        "\u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0634\u062f!"
                      }
                    </div>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return $state.getDoctorInfo.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__foIVq)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___7E4So)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hHkoG
                      )}
                    >
                      {
                        "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a ..."
                      }
                    </div>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return !!$state.getDoctorInfo.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eETs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kh453)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"70px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"70px"}
                        height={``}
                        loading={"lazy"}
                        src={(() => {
                          try {
                            return `https://cdn.paziresh24.com/${$state.getDoctorInfo.data.data.doctor.image}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://cdn.paziresh24.com/getImage/p24/search-women/noimage.png";
                            }
                            throw e;
                          }
                        })()}
                        width={``}
                      />

                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ygsCp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___69M9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tyZg6
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.getDoctorInfo.data.data.doctor
                                    .display_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xryCe
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if ($ctx.query.centerId == "5532") {
                                      return "ویزیت آنلاین";
                                    } else {
                                      return "ویزیت حضوری";
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0648\u06cc\u0632\u06cc\u062a \u062d\u0636\u0648\u0631\u06cc";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gfxve
                          )}
                          style={{
                            display: "-webkit-inline-box",
                            WebkitBoxOrient: "vertical",
                            WebkitLineClamp: 2,
                            overflow: "hidden",
                            textOverflow: "ellipsis"
                          }}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.getDoctorInfo.data.data.doctor
                                  .display_expertise;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "-";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </div>
                    {(() => {
                      try {
                        return $ctx.query.centerId != 5532;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3Ayuk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qsxQ5
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xg1T
                          )}
                        >
                          {"\u0646\u0627\u0645 \u0645\u0631\u06a9\u0632"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__toX81
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.getDoctorInfo.data.data.center
                                  .name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u06af\u0648\u062f\u0631\u0632";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $ctx.query.centerId != 5532;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i9ZNu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fPkN
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4Pacc
                          )}
                        >
                          {"\u0622\u062f\u0631\u0633"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s6VN
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.getDoctorInfo.data.data.center
                                  .address;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0628\u06cc\u0645\u0627\u0631\u0633\u062a\u0627\u0646 \u06af\u0648\u062f\u0631\u0632";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bpZr8)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__y3SmG
                        )}
                      >
                        {"\u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sLfeT
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const bookFromTimestamp =
                                  $state.getDoctorInfo.data.data.book_time *
                                  1000;
                                const dateTimeFormatter =
                                  new Intl.DateTimeFormat("fa-IR-u-nu-latn", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric"
                                  });
                                let dateFormat =
                                  dateTimeFormatter.format(bookFromTimestamp);
                                const timeFormatter = new Intl.DateTimeFormat(
                                  "fa-IR-u-nu-latn",
                                  {
                                    hour: "2-digit",
                                    minute: "2-digit",
                                    hour12: false
                                  }
                                );
                                const time =
                                  timeFormatter.format(bookFromTimestamp);
                                const at = `${dateFormat} ساعت ${time}`;
                                if ($ctx.query.centerId == "5532") {
                                  return `سلام. من ${
                                    $state.getDoctorInfo.data.data.display_name
                                  } هستم.پس از نهایی شدن نوبت، ${at}، از طریق ${
                                    $ctx.query.platform == "eitaa"
                                      ? "ایتا"
                                      : "واتساپ"
                                  } شما را ویزیت خواهم کرد.`;
                                } else {
                                  return at;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06cc\u0627\u0641\u062a \u0646\u0634\u062f";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}
          <Paziresh24Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            body={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__weGzs
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "نوبت مورد نظر یافت نشد. لطفا مجددا اقدام به دریافت نوبت نمایید.";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Paziresh24Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ewidj
                      )}
                    >
                      {
                        "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u0646\u0648\u0628\u062a"
                      }
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__muSOe
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToProfile"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return `/dr/${$state.getDoctorInfo.data.data.doctor.slug}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToProfile"] != null &&
                      typeof $steps["goToProfile"] === "object" &&
                      typeof $steps["goToProfile"].then === "function"
                    ) {
                      $steps["goToProfile"] = await $steps["goToProfile"];
                    }
                  }}
                />
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.dialog2)}
            noTrigger={true}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            title={
              <React.Fragment>
                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg___2SyUu)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lZrZg
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a"
                  }
                </div>
              </React.Fragment>
            }
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "olg10k4yi3");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            deps={(() => {
              try {
                return [$state.getDoctorInfo.data];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["updateDialog2Open"] =
                !$state.getDoctorInfo.loading &&
                $state.getDoctorInfo.data.data.is_deleted
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog2", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateDialog2Open"] != null &&
                typeof $steps["updateDialog2Open"] === "object" &&
                typeof $steps["updateDialog2Open"].then === "function"
              ) {
                $steps["updateDialog2Open"] = await $steps["updateDialog2Open"];
              }

              $steps["goToPage"] =
                !$state.getDoctorInfo.loading &&
                !$state.getDoctorInfo.data.data.is_deleted &&
                $state.getDoctorInfo.data.data.is_paid
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return `/receipt/${$ctx.query.centerId}/${$ctx.query.bookId}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToPage"] != null &&
                typeof $steps["goToPage"] === "object" &&
                typeof $steps["goToPage"].then === "function"
              ) {
                $steps["goToPage"] = await $steps["goToPage"];
              }
            }}
          />

          <ApiRequest
            data-plasmic-name={"getDoctorInfo"}
            data-plasmic-override={overrides.getDoctorInfo}
            body={(() => {
              try {
                return {
                  book_id: $ctx.params.book_id,
                  type: "factor"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            children={null}
            className={classNames("__wab_instance", sty.getDoctorInfo)}
            config={(() => {
              try {
                return (() => {
                  const token = globalThis.document.cookie
                    .split("; ")
                    .find(row => row.startsWith("token="))
                    ?.split("=")[1];
                  const headers = token
                    ? { Authorization: `Bearer ${token}` }
                    : {};
                  return {
                    headers,
                    ...$ctx.Fragment.previewApiConfig
                  };
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getDoctorInfo",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getDoctorInfo",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getDoctorInfo",
                "data"
              ]).apply(null, eventArgs);
            }}
            url={`https://api.paziresh24.com/user/v1/book/${$ctx.query.centerId}/${$ctx.query.bookId}`}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "paymentBox",
    "paymentDetaile",
    "priceCalculator",
    "getWallet",
    "discountRow",
    "cancellationPolicy",
    "warning",
    "support",
    "accordion",
    "txtDiscount",
    "button",
    "doctorInfo",
    "img",
    "dialog2",
    "embedHtml",
    "sideEffect",
    "getDoctorInfo"
  ],
  paymentBox: [
    "paymentBox",
    "paymentDetaile",
    "priceCalculator",
    "getWallet",
    "discountRow",
    "cancellationPolicy",
    "warning",
    "support",
    "accordion",
    "txtDiscount",
    "button"
  ],
  paymentDetaile: [
    "paymentDetaile",
    "priceCalculator",
    "getWallet",
    "discountRow"
  ],
  priceCalculator: ["priceCalculator", "getWallet", "discountRow"],
  getWallet: ["getWallet"],
  discountRow: ["discountRow"],
  cancellationPolicy: ["cancellationPolicy", "warning"],
  warning: ["warning"],
  support: ["support"],
  accordion: ["accordion", "txtDiscount", "button"],
  txtDiscount: ["txtDiscount"],
  button: ["button"],
  doctorInfo: ["doctorInfo", "img"],
  img: ["img"],
  dialog2: ["dialog2"],
  embedHtml: ["embedHtml"],
  sideEffect: ["sideEffect"],
  getDoctorInfo: ["getDoctorInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paymentBox: "div";
  paymentDetaile: "div";
  priceCalculator: typeof ApiRequest;
  getWallet: typeof ApiRequest;
  discountRow: "div";
  cancellationPolicy: typeof ApiRequest;
  warning: "div";
  support: "div";
  accordion: typeof AntdAccordion;
  txtDiscount: typeof TextInput;
  button: typeof Button;
  doctorInfo: "div";
  img: typeof PlasmicImg__;
  dialog2: typeof Paziresh24Dialog;
  embedHtml: typeof Embed;
  sideEffect: typeof SideEffect;
  getDoctorInfo: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFactor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFactor__VariantsArgs;
    args?: PlasmicFactor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFactor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFactor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFactor__ArgProps,
          internalVariantPropNames: PlasmicFactor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFactor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFactor";
  } else {
    func.displayName = `PlasmicFactor.${nodeName}`;
  }
  return func;
}

export const PlasmicFactor = Object.assign(
  // Top-level PlasmicFactor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paymentBox: makeNodeComponent("paymentBox"),
    paymentDetaile: makeNodeComponent("paymentDetaile"),
    priceCalculator: makeNodeComponent("priceCalculator"),
    getWallet: makeNodeComponent("getWallet"),
    discountRow: makeNodeComponent("discountRow"),
    cancellationPolicy: makeNodeComponent("cancellationPolicy"),
    warning: makeNodeComponent("warning"),
    support: makeNodeComponent("support"),
    accordion: makeNodeComponent("accordion"),
    txtDiscount: makeNodeComponent("txtDiscount"),
    button: makeNodeComponent("button"),
    doctorInfo: makeNodeComponent("doctorInfo"),
    img: makeNodeComponent("img"),
    dialog2: makeNodeComponent("dialog2"),
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffect: makeNodeComponent("sideEffect"),
    getDoctorInfo: makeNodeComponent("getDoctorInfo"),

    // Metadata about props expected for PlasmicFactor
    internalVariantProps: PlasmicFactor__VariantProps,
    internalArgProps: PlasmicFactor__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "فاکتور نوبت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFactor;
/* prettier-ignore-end */
