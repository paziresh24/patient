/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bN5uNsAhTefwW3S14VjvMG
// Component: KinPlL1Jj1j3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: 5YXxEG3fsnYe/codeComponent
import Alert from "../../Alert"; // plasmic-import: LunkQEBG4_Uv/component
import HamdastUtilsOpenLink from "../../HamdastUtilsOpenLink"; // plasmic-import: RRKFlqCHeJfP/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bN5uNsAhTefwW3S14VjvMG/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: KinPlL1Jj1j3/css

import Icon2Icon from "../paziresh_24_design_system/icons/PlasmicIcon__Icon2"; // plasmic-import: rwy2JSXIoIh2/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: ed6cHGzaBU3L/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  getGaData?: Flex__<typeof ApiRequest>;
  span?: Flex__<"span">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getGaData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getGaData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getGaData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return !!$ctx.query.slug;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              sty.root
            )}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lmLR)}>
              <ApiRequest
                data-plasmic-name={"apiRequest"}
                data-plasmic-override={overrides.apiRequest}
                className={classNames("__wab_instance", sty.apiRequest)}
                errorDisplay={
                  <React.Fragment>
                    <Alert
                      className={classNames("__wab_instance", sty.alert__ix2YO)}
                      message={(() => {
                        try {
                          return `درحال حاضر نوبت جدیدی برای ${$state.apiRequest.data.data.display_name} تعریف نشده است.`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <HamdastUtilsOpenLink
                      className={classNames(
                        "__wab_instance",
                        sty.hamdastUtilsOpenLink___5D71G
                      )}
                      destination={(() => {
                        try {
                          return `https://www.paziresh24.com/s/?turn_type=consult&text=${$state.apiRequest.data.data.expertises[0].expertise.name}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <Paziresh24Button
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rtQ4S
                            )}
                          >
                            {
                              "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u0627\u0632 \u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.paziresh24Button___28FSk
                        )}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dgiYo
                            )}
                            role={"img"}
                          />
                        }
                        link={undefined}
                        onClick={async event => {
                          const $steps = {};

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return `https://sanje.paziresh24.com/interstitial_page/?provide=page&display_name=${$state.getGaData.data.data.fullName}&uri=${$state.getGaData.data.data.destination.url}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                      />
                    </HamdastUtilsOpenLink>
                  </React.Fragment>
                }
                loadingDisplay={
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__jVbZ7)}
                    role={"img"}
                  />
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/v1/full-profile/${$ctx.query.slug}/`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <ApiRequest
                  data-plasmic-name={"getGaData"}
                  data-plasmic-override={overrides.getGaData}
                  className={classNames("__wab_instance", sty.getGaData)}
                  errorDisplay={
                    <React.Fragment>
                      <Alert
                        className={classNames(
                          "__wab_instance",
                          sty.alert__xPlSw
                        )}
                        message={(() => {
                          try {
                            return `درحال حاضر نوبت جدیدی برای ${$state.apiRequest.data.data.display_name} تعریف نشده است.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />

                      <HamdastUtilsOpenLink
                        className={classNames(
                          "__wab_instance",
                          sty.hamdastUtilsOpenLink__fehu7
                        )}
                        destination={(() => {
                          try {
                            return `https://www.paziresh24.com/s/${$state.apiRequest.data.data.centers[0].city_en_slug}/?turn_type=consult&text=${$state.apiRequest.data.data.expertises[0].expertise.name}`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Paziresh24Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xjAv
                              )}
                            >
                              {
                                "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u0627\u0632 \u067e\u0632\u0634\u06a9 \u062c\u0627\u06cc\u06af\u0632\u06cc\u0646"
                              }
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button___8VHws
                          )}
                          endIcon={
                            <ChevronLeftIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jiR9Y
                              )}
                              role={"img"}
                            />
                          }
                          link={undefined}
                          onClick={async event => {
                            const $steps = {};

                            $steps["goToPage"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return `https://sanje.paziresh24.com/interstitial_page/?provide=page&display_name=${$state.getGaData.data.data.fullName}&uri=${$state.getGaData.data.data.destination.url}`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }
                          }}
                        />
                      </HamdastUtilsOpenLink>
                    </React.Fragment>
                  }
                  loadingDisplay={
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__jln9R)}
                      role={"img"}
                    />
                  }
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getGaData",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getGaData",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getGaData",
                      "data"
                    ]).apply(null, eventArgs);
                  }}
                  params={(() => {
                    try {
                      return {
                        doctor_id: $ctx.query.doctor_id
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {};
                      }
                      throw e;
                    }
                  })()}
                  url={"https://apigw.paziresh24.com/v1/risman/doctors/"}
                >
                  {(() => {
                    try {
                      return !$state.getGaData?.data?.data?.doctorId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___6J0N)}
                      role={"img"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return !!$state.getGaData?.data?.data?.doctorId;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mz7Co)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uTupI
                        )}
                      >
                        <Icon6Icon
                          className={classNames(projectcss.all, sty.svg__wczMg)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xgYlr
                          )}
                        >
                          {
                            "\u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0648 \u0645\u0631\u0627\u062c\u0639\u0647 \u062d\u0636\u0648\u0631\u06cc"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l2Vri
                        )}
                      >
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__tX4B
                          )}
                          destination={(() => {
                            try {
                              return `https://sanje.paziresh24.com/interstitial_page/?source=profile&provide=page&display_name=${$state.getGaData?.data?.data?.fullName}&uri=${$state.getGaData?.data?.data?.destination?.url}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          openInNewTab={true}
                        >
                          <Paziresh24Button
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oWbWq
                                )}
                              >
                                <React.Fragment>
                                  <React.Fragment>
                                    {
                                      "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u062f\u0631 "
                                    }
                                  </React.Fragment>
                                  {
                                    <span
                                      data-plasmic-name={"span"}
                                      data-plasmic-override={overrides.span}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.span,
                                        projectcss.__wab_text,
                                        projectcss.plasmic_default__inline,
                                        sty.span
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.getGaData.data.data
                                              .destination.platform;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u062f\u06a9\u062a\u0631 \u062f\u06a9\u062a\u0631";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </span>
                                  }
                                  <React.Fragment>{""}</React.Fragment>
                                </React.Fragment>
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__wW0Tt
                            )}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__exgej
                                )}
                                role={"img"}
                              />
                            }
                            showEndIcon={true}
                            space={true}
                          />
                        </HamdastUtilsOpenLink>
                      </div>
                    </div>
                  ) : null}
                </ApiRequest>
              </ApiRequest>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "getGaData", "span"],
  apiRequest: ["apiRequest", "getGaData", "span"],
  getGaData: ["getGaData", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  getGaData: typeof ApiRequest;
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    getGaData: makeNodeComponent("getGaData"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
