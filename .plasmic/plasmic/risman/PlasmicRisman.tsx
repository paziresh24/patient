/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bN5uNsAhTefwW3S14VjvMG
// Component: KinPlL1Jj1j3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: bN5uNsAhTefwW3S14VjvMG/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bN5uNsAhTefwW3S14VjvMG/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../hamdast_risman/plasmic.module.css"; // plasmic-import: bN5uNsAhTefwW3S14VjvMG/projectcss
import sty from "./PlasmicRisman.module.css"; // plasmic-import: KinPlL1Jj1j3/css

import Icon6Icon from "../hamdast_risman/icons/PlasmicIcon__Icon6"; // plasmic-import: ed6cHGzaBU3L/icon
import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../hamdast_risman/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: 82FgHzvCu1qc/icon

createPlasmicElementProxy;

export type PlasmicRisman__VariantMembers = {};
export type PlasmicRisman__VariantsArgs = {};
type VariantPropType = keyof PlasmicRisman__VariantsArgs;
export const PlasmicRisman__VariantProps = new Array<VariantPropType>();

export type PlasmicRisman__ArgsType = { data?: any };
type ArgPropType = keyof PlasmicRisman__ArgsType;
export const PlasmicRisman__ArgProps = new Array<ArgPropType>("data");

export type PlasmicRisman__OverridesType = {
  root?: Flex__<"div">;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  span?: Flex__<"span">;
};

export interface DefaultRismanProps {
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRisman__RenderFunc(props: {
  variants: PlasmicRisman__VariantsArgs;
  args: PlasmicRisman__ArgsType;
  overrides: PlasmicRisman__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uTupI)}>
        <Icon6Icon
          className={classNames(projectcss.all, sty.svg__wczMg)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xgYlr
          )}
        >
          {
            "\u0646\u0648\u0628\u062a \u0627\u06cc\u0646\u062a\u0631\u0646\u062a\u06cc \u0648 \u0645\u0631\u0627\u062c\u0639\u0647 \u062d\u0636\u0648\u0631\u06cc"
          }
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__l2Vri)}>
        <Paziresh24Button
          data-plasmic-name={"paziresh24Button"}
          data-plasmic-override={overrides.paziresh24Button}
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oWbWq
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0648\u0628\u062a \u062f\u0631 "
                  }
                </React.Fragment>
                {
                  <span
                    data-plasmic-name={"span"}
                    data-plasmic-override={overrides.span}
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.span
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.data.data.destination.platform;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "-";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </span>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          className={classNames("__wab_instance", sty.paziresh24Button)}
          endIcon={
            <ChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__exgej)}
              role={"img"}
            />
          }
          link={(() => {
            try {
              return `https://sanje.paziresh24.com/interstitial_page/?source=profile&provide=page&display_name=${$props.data?.data?.fullName}&uri=${$props.data.data?.destination?.url}$platform=${$props.data.data?.destination?.platform}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
          showEndIcon={true}
          space={true}
          target={true}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "paziresh24Button", "span"],
  paziresh24Button: ["paziresh24Button", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24Button: typeof Paziresh24Button;
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRisman__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRisman__VariantsArgs;
    args?: PlasmicRisman__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRisman__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRisman__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRisman__ArgProps,
          internalVariantPropNames: PlasmicRisman__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRisman__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRisman";
  } else {
    func.displayName = `PlasmicRisman.${nodeName}`;
  }
  return func;
}

export const PlasmicRisman = Object.assign(
  // Top-level PlasmicRisman renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicRisman
    internalVariantProps: PlasmicRisman__VariantProps,
    internalArgProps: PlasmicRisman__ArgProps
  }
);

export default PlasmicRisman;
/* prettier-ignore-end */
