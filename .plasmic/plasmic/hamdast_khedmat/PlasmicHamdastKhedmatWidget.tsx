/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 666TdydnqTmUJpihDvjWrt
// Component: M0Hes2jXBIMM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/projectcss
import sty from "./PlasmicHamdastKhedmatWidget.module.css"; // plasmic-import: M0Hes2jXBIMM/css

import ChevronRightIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronRight"; // plasmic-import: 0359howWu0cr/icon
import ChevronLeftIcon from "../paziresh_24_design_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: jS0YlkKPLO7U/icon
import Icon2Icon from "../paziresh_24_design_system/icons/PlasmicIcon__Icon2"; // plasmic-import: rwy2JSXIoIh2/icon

createPlasmicElementProxy;

export type PlasmicHamdastKhedmatWidget__VariantMembers = {};
export type PlasmicHamdastKhedmatWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamdastKhedmatWidget__VariantsArgs;
export const PlasmicHamdastKhedmatWidget__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHamdastKhedmatWidget__ArgsType = { profileData?: any };
type ArgPropType = keyof PlasmicHamdastKhedmatWidget__ArgsType;
export const PlasmicHamdastKhedmatWidget__ArgProps = new Array<ArgPropType>(
  "profileData"
);

export type PlasmicHamdastKhedmatWidget__OverridesType = {
  root?: Flex__<"div">;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  modal?: Flex__<typeof Paziresh24Modal>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  svg?: Flex__<"svg">;
};

export interface DefaultHamdastKhedmatWidgetProps {
  profileData?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamdastKhedmatWidget__RenderFunc(props: {
  variants: PlasmicHamdastKhedmatWidget__VariantsArgs;
  args: PlasmicHamdastKhedmatWidget__ArgsType;
  overrides: PlasmicHamdastKhedmatWidget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__w2Kv8)}>
        <Paziresh24Button
          data-plasmic-name={"paziresh24Button"}
          data-plasmic-override={overrides.paziresh24Button}
          children2={
            "\u0645\u0634\u0627\u0647\u062f\u0647 \u062e\u062f\u0645\u0627\u062a \u0648 \u062a\u0639\u0631\u0641\u0647\u200c\u0647\u0627"
          }
          className={classNames("__wab_instance", sty.paziresh24Button)}
          onClick={async event => {
            const $steps = {};

            $steps["updateModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal", "open"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalOpen"] != null &&
              typeof $steps["updateModalOpen"] === "object" &&
              typeof $steps["updateModalOpen"].then === "function"
            ) {
              $steps["updateModalOpen"] = await $steps["updateModalOpen"];
            }

            $steps["updateModalNotiff"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      (() => {
                        try {
                          return {
                            event_group: "khedmat_click_button",
                            doctor_user_id: $props.profileData.user_id,
                            doctor_slug: $props.profileData.seo.slug
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      "https://splunk-ravi-hec.paziresh24.com",
                      "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d"
                    ]
                  };
                  return $globalActions["Splunk.sendLog"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["updateModalNotiff"] != null &&
              typeof $steps["updateModalNotiff"] === "object" &&
              typeof $steps["updateModalNotiff"].then === "function"
            ) {
              $steps["updateModalNotiff"] = await $steps["updateModalNotiff"];
            }
          }}
          outline={true}
        />
      </div>
      <Paziresh24Modal
        data-plasmic-name={"modal"}
        data-plasmic-override={overrides.modal}
        body={
          <DataFetcher
            data-plasmic-name={"httpRestApiFetcher"}
            data-plasmic-override={overrides.httpRestApiFetcher}
            className={classNames("__wab_instance", sty.httpRestApiFetcher)}
            dataName={"fetchedData"}
            errorDisplay={null}
            errorName={"fetchError"}
            loadingDisplay={
              <DataCtxReader__>
                {$ctx => (
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                )}
              </DataCtxReader__>
            }
            method={"GET"}
            noLayout={false}
            previewSpinner={false}
            url={(() => {
              try {
                return (
                  "https://mahya-n8n.darkube.app/webhook/servises?user_id=" +
                  $props.profileData.user_id
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <DataCtxReader__>
              {$ctx => (
                <div className={classNames(projectcss.all, sty.freeBox__lk2Ps)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.fetchedData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fGg6M
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bpIu
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bo6S4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__y1Y7J
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1EujM
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentIndex + 1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "2";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l8Ykl
                              )}
                            >
                              {"\u062a\u0648\u0645\u0627\u0646"}
                            </div>
                            {(() => {
                              try {
                                return true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oiOQf
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return null ==
                                        $ctx.fetchedData[currentIndex].price_max
                                        ? Number(
                                            $ctx.fetchedData[currentIndex]
                                              .price_min
                                          ).toLocaleString("en-US")
                                        : $ctx.fetchedData[currentIndex]
                                            .price_max == null ||
                                          $ctx.fetchedData[currentIndex]
                                            .price_max === ""
                                        ? Number(
                                            $ctx.fetchedData[currentIndex]
                                              .price_min
                                          ).toLocaleString("en-US")
                                        : Number(
                                            $ctx.fetchedData[currentIndex]
                                              .price_min
                                          ).toLocaleString("en-US") +
                                          " تا " +
                                          Number(
                                            $ctx.fetchedData[currentIndex]
                                              .price_max
                                          ).toLocaleString("en-US");
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jhxxi
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchedData[currentIndex]
                                      .service;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(() => {
                            try {
                              return $ctx.fetchedData.length > currentIndex + 1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__q7ADd
                              )}
                            />
                          ) : null}
                        </div>
                      </div>
                    );
                  })}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q61L5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "آخرین بروزرسانی: " +
                            $ctx.fetchedData[0]["last-update"]
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0622\u062e\u0631\u06cc\u0646 \u0628\u0631\u0648\u0632\u0631\u0633\u0627\u0646\u06cc:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              )}
            </DataCtxReader__>
          </DataFetcher>
        }
        className={classNames("__wab_instance", sty.modal)}
        noTrigger={true}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xv2Zs
            )}
          >
            {
              "\u062e\u062f\u0645\u0627\u062a \u0648 \u062a\u0639\u0631\u0641\u0647"
            }
          </div>
        }
        trigger={null}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "paziresh24Button", "modal", "httpRestApiFetcher", "svg"],
  paziresh24Button: ["paziresh24Button"],
  modal: ["modal", "httpRestApiFetcher", "svg"],
  httpRestApiFetcher: ["httpRestApiFetcher", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24Button: typeof Paziresh24Button;
  modal: typeof Paziresh24Modal;
  httpRestApiFetcher: typeof DataFetcher;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamdastKhedmatWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamdastKhedmatWidget__VariantsArgs;
    args?: PlasmicHamdastKhedmatWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamdastKhedmatWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHamdastKhedmatWidget__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamdastKhedmatWidget__ArgProps,
          internalVariantPropNames: PlasmicHamdastKhedmatWidget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamdastKhedmatWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamdastKhedmatWidget";
  } else {
    func.displayName = `PlasmicHamdastKhedmatWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicHamdastKhedmatWidget = Object.assign(
  // Top-level PlasmicHamdastKhedmatWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    modal: makeNodeComponent("modal"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicHamdastKhedmatWidget
    internalVariantProps: PlasmicHamdastKhedmatWidget__VariantProps,
    internalArgProps: PlasmicHamdastKhedmatWidget__ArgProps
  }
);

export default PlasmicHamdastKhedmatWidget;
/* prettier-ignore-end */
