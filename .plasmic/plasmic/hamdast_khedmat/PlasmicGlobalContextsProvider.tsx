/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 666TdydnqTmUJpihDvjWrt

import * as React from "react";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/projectModule
import { AuthGlobalContext } from "@/common/fragment/authGlobalContext"; // plasmic-import: f8xOKlZJQe4I/codeComponent
import { Fragment } from "@/common/fragment/designSystemGlobalContext"; // plasmic-import: VPG5rrtqHoHq/codeComponent
import { GrowthbookGlobalContext } from "@/common/fragment/growthbookGlobalContext"; // plasmic-import: CRFp3U6cPsFQ/codeComponent
import { Splunk } from "@/common/fragment/splunk"; // plasmic-import: jNN22FdvcBn5/codeComponent
import { PWA } from "@/common/fragment/pwa"; // plasmic-import: iG-Bfevlrm_u/codeComponent
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  authGlobalContextProps?: Partial<
    Omit<React.ComponentProps<typeof AuthGlobalContext>, "children">
  >;
  fragmentProps?: Partial<
    Omit<React.ComponentProps<typeof Fragment>, "children">
  >;
  growthbookGlobalContextProps?: Partial<
    Omit<React.ComponentProps<typeof GrowthbookGlobalContext>, "children">
  >;
  splunkProps?: Partial<Omit<React.ComponentProps<typeof Splunk>, "children">>;
  pwaProps?: Partial<Omit<React.ComponentProps<typeof PWA>, "children">>;
  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    authGlobalContextProps,
    fragmentProps,
    growthbookGlobalContextProps,
    splunkProps,
    pwaProps,
    antdConfigProviderProps
  } = props;

  return (
    <AuthGlobalContext
      {...authGlobalContextProps}
      previewToken={
        authGlobalContextProps && "previewToken" in authGlobalContextProps
          ? authGlobalContextProps.previewToken!
          : undefined
      }
    >
      <Fragment
        {...fragmentProps}
        apiConfig={
          fragmentProps && "apiConfig" in fragmentProps
            ? fragmentProps.apiConfig!
            : undefined
        }
        previewApiConfig={
          fragmentProps && "previewApiConfig" in fragmentProps
            ? fragmentProps.previewApiConfig!
            : undefined
        }
      >
        <GrowthbookGlobalContext
          {...growthbookGlobalContextProps}
          apiHost={
            growthbookGlobalContextProps &&
            "apiHost" in growthbookGlobalContextProps
              ? growthbookGlobalContextProps.apiHost!
              : undefined
          }
          clientKey={
            growthbookGlobalContextProps &&
            "clientKey" in growthbookGlobalContextProps
              ? growthbookGlobalContextProps.clientKey!
              : undefined
          }
          previewAttributes={
            growthbookGlobalContextProps &&
            "previewAttributes" in growthbookGlobalContextProps
              ? growthbookGlobalContextProps.previewAttributes!
              : undefined
          }
        >
          <Splunk
            {...splunkProps}
            defaultApiHost={
              splunkProps && "defaultApiHost" in splunkProps
                ? splunkProps.defaultApiHost!
                : undefined
            }
            defaultApiKey={
              splunkProps && "defaultApiKey" in splunkProps
                ? splunkProps.defaultApiKey!
                : undefined
            }
          >
            <PWA {...pwaProps}>
              <AntdConfigProvider
                {...antdConfigProviderProps}
                borderRadius={
                  antdConfigProviderProps &&
                  "borderRadius" in antdConfigProviderProps
                    ? antdConfigProviderProps.borderRadius!
                    : 6
                }
                colorBgBase={
                  antdConfigProviderProps &&
                  "colorBgBase" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorBgBase!
                    : "#ffffff"
                }
                colorError={
                  antdConfigProviderProps &&
                  "colorError" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorError!
                    : "#ff4d4f"
                }
                colorInfo={
                  antdConfigProviderProps &&
                  "colorInfo" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorInfo!
                    : "#1677ff"
                }
                colorPrimary={
                  antdConfigProviderProps &&
                  "colorPrimary" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorPrimary!
                    : "#1677ff"
                }
                colorSuccess={
                  antdConfigProviderProps &&
                  "colorSuccess" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorSuccess!
                    : "#52c41a"
                }
                colorWarning={
                  antdConfigProviderProps &&
                  "colorWarning" in antdConfigProviderProps
                    ? antdConfigProviderProps.colorWarning!
                    : "#faad14"
                }
                controlHeight={
                  antdConfigProviderProps &&
                  "controlHeight" in antdConfigProviderProps
                    ? antdConfigProviderProps.controlHeight!
                    : 32
                }
                defaultDark={
                  antdConfigProviderProps &&
                  "defaultDark" in antdConfigProviderProps
                    ? antdConfigProviderProps.defaultDark!
                    : false
                }
                lineWidth={
                  antdConfigProviderProps &&
                  "lineWidth" in antdConfigProviderProps
                    ? antdConfigProviderProps.lineWidth!
                    : 1
                }
                loadingText={
                  antdConfigProviderProps &&
                  "loadingText" in antdConfigProviderProps
                    ? antdConfigProviderProps.loadingText!
                    : undefined
                }
                removeLoading={
                  antdConfigProviderProps &&
                  "removeLoading" in antdConfigProviderProps
                    ? antdConfigProviderProps.removeLoading!
                    : undefined
                }
                sizeStep={
                  antdConfigProviderProps &&
                  "sizeStep" in antdConfigProviderProps
                    ? antdConfigProviderProps.sizeStep!
                    : 4
                }
                sizeUnit={
                  antdConfigProviderProps &&
                  "sizeUnit" in antdConfigProviderProps
                    ? antdConfigProviderProps.sizeUnit!
                    : 4
                }
                themeStyles={
                  antdConfigProviderProps &&
                  "themeStyles" in antdConfigProviderProps
                    ? antdConfigProviderProps.themeStyles!
                    : true
                    ? {
                        fontFamily: "Inter",
                        fontSize: "16px",
                        fontWeight: "400",
                        lineHeight: "1.5",
                        color: "#535353",
                        letterSpacing: "normal"
                      }
                    : undefined
                }
                wireframe={
                  antdConfigProviderProps &&
                  "wireframe" in antdConfigProviderProps
                    ? antdConfigProviderProps.wireframe!
                    : false
                }
              >
                {children}
              </AntdConfigProvider>
            </PWA>
          </Splunk>
        </GrowthbookGlobalContext>
      </Fragment>
    </AuthGlobalContext>
  );
}
