/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 666TdydnqTmUJpihDvjWrt
// Component: 0_fSLKeEbjkl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 666TdydnqTmUJpihDvjWrt/projectcss
import sty from "./PlasmicServiceRow.module.css"; // plasmic-import: 0_fSLKeEbjkl/css

createPlasmicElementProxy;

export type PlasmicServiceRow__VariantMembers = {};
export type PlasmicServiceRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicServiceRow__VariantsArgs;
export const PlasmicServiceRow__VariantProps = new Array<VariantPropType>();

export type PlasmicServiceRow__ArgsType = {
  children?: React.ReactNode;
  serviceName?: React.ReactNode;
  price?: React.ReactNode;
};
type ArgPropType = keyof PlasmicServiceRow__ArgsType;
export const PlasmicServiceRow__ArgProps = new Array<ArgPropType>(
  "children",
  "serviceName",
  "price"
);

export type PlasmicServiceRow__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultServiceRowProps {
  children?: React.ReactNode;
  serviceName?: React.ReactNode;
  price?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicServiceRow__RenderFunc(props: {
  variants: PlasmicServiceRow__VariantsArgs;
  args: PlasmicServiceRow__ArgsType;
  overrides: PlasmicServiceRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_paziresh_24_design_system,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__u4Qgf)}>
        <div className={classNames(projectcss.all, sty.freeBox__mtdJ0)}>
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Kuz3
                )}
              >
                {"1"}
              </div>
            ),
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
        {renderPlasmicSlot({
          defaultContents: "\u0648\u06cc\u0632\u06cc\u062a",
          value: args.serviceName,
          className: classNames(sty.slotTargetServiceName)
        })}
      </div>
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vi6H
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#3861FB" }}
              >
                {
                  "\u06f1\u06f5\u06f0,\u06f0\u06f0\u06f0\u062a\u0648\u0645\u0627\u0646"
                }
              </span>
            </React.Fragment>
          </div>
        ),
        value: args.price
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServiceRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServiceRow__VariantsArgs;
    args?: PlasmicServiceRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicServiceRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServiceRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicServiceRow__ArgProps,
          internalVariantPropNames: PlasmicServiceRow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicServiceRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServiceRow";
  } else {
    func.displayName = `PlasmicServiceRow.${nodeName}`;
  }
  return func;
}

export const PlasmicServiceRow = Object.assign(
  // Top-level PlasmicServiceRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicServiceRow
    internalVariantProps: PlasmicServiceRow__VariantProps,
    internalArgProps: PlasmicServiceRow__ArgProps
  }
);

export default PlasmicServiceRow;
/* prettier-ignore-end */
