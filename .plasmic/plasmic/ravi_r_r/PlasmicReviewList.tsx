// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: Bx6gxTOoja9k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Summery from "../../Summery"; // plasmic-import: JoYR24nI9z66/component
import RateDetail from "../../RateDetail"; // plasmic-import: 5Lu5manJiJCz/component
import SetNweReview from "../../SetNweReview"; // plasmic-import: ZewL2B_Ktxrj/component
import Select from "../../Select"; // plasmic-import: zIWWWwAA3-2B/component
import TextInput from "../../TextInput"; // plasmic-import: iKLtt-X_YZoa/component
import ReviewCard from "../../ReviewCard"; // plasmic-import: hjUuvN6lhrZV/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewList.module.css"; // plasmic-import: Bx6gxTOoja9k/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: W3TLlIDrGJdy/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: NWCYMTObqr7D/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 2W2cvQbPPcOu/icon

import __fn_splunkEvent from "@/common/services/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

createPlasmicElementProxy;

export type PlasmicReviewList__VariantMembers = {};
export type PlasmicReviewList__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewList__VariantsArgs;
export const PlasmicReviewList__VariantProps = new Array<VariantPropType>();

export type PlasmicReviewList__ArgsType = {
  reviewResponse?: any;
  nextPageTrigger?: (page: number) => void;
  paginationLoadingStatus?: boolean;
  centers?: any;
  onSearch?: (value: string) => void;
  onFilter?: (value: string) => void;
  onSort?: (value: string) => void;
  information?: any;
  seo?: any;
  expertises?: any;
  pageInfo?: any;
  hideRates?: boolean;
};
type ArgPropType = keyof PlasmicReviewList__ArgsType;
export const PlasmicReviewList__ArgProps = new Array<ArgPropType>(
  "reviewResponse",
  "nextPageTrigger",
  "paginationLoadingStatus",
  "centers",
  "onSearch",
  "onFilter",
  "onSort",
  "information",
  "seo",
  "expertises",
  "pageInfo",
  "hideRates"
);

export type PlasmicReviewList__OverridesType = {
  root?: Flex__<"div">;
  summery?: Flex__<typeof Summery>;
  rateDetail?: Flex__<typeof RateDetail>;
  setNweReview?: Flex__<typeof SetNweReview>;
  filterInput?: Flex__<typeof Select>;
  sortInput?: Flex__<typeof Select>;
  searchInput?: Flex__<typeof TextInput>;
  cardLine?: Flex__<"div">;
  reviewCard?: Flex__<typeof ReviewCard>;
  button?: Flex__<typeof Button>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultReviewListProps {
  reviewResponse?: any;
  nextPageTrigger?: (page: number) => void;
  paginationLoadingStatus?: boolean;
  centers?: any;
  onSearch?: (value: string) => void;
  onFilter?: (value: string) => void;
  onSort?: (value: string) => void;
  information?: any;
  seo?: any;
  expertises?: any;
  pageInfo?: any;
  hideRates?: boolean;
  className?: string;
}

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewList__RenderFunc(props: {
  variants: PlasmicReviewList__VariantsArgs;
  args: PlasmicReviewList__ArgsType;
  overrides: PlasmicReviewList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          paginationLoadingStatus: false,
          hideRates: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "filterInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "sortInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "default_order"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return !$props.hideRates;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox___0QvL)}>
          {(() => {
            try {
              return $ctx.Growthbook.features["ravi-exp-fro-drakam"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Summery
              data-plasmic-name={"summery"}
              data-plasmic-override={overrides.summery}
              className={classNames("__wab_instance", sty.summery)}
              onClickSummery={async summery => {
                const $steps = {};

                $steps["updateSearchInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["searchInput", "value"]
                        },
                        operation: 0,
                        value: summery
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSearchInputValue"] != null &&
                  typeof $steps["updateSearchInputValue"] === "object" &&
                  typeof $steps["updateSearchInputValue"].then === "function"
                ) {
                  $steps["updateSearchInputValue"] = await $steps[
                    "updateSearchInputValue"
                  ];
                }

                $steps["updateSearchInputValue2"] = true
                  ? (() => {
                      const actionArgs = {
                        eventRef: $props["onSearch"],
                        args: [
                          (() => {
                            try {
                              return summery;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSearchInputValue2"] != null &&
                  typeof $steps["updateSearchInputValue2"] === "object" &&
                  typeof $steps["updateSearchInputValue2"].then === "function"
                ) {
                  $steps["updateSearchInputValue2"] = await $steps[
                    "updateSearchInputValue2"
                  ];
                }

                $steps["sendEvent"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $$.splunkEvent({
                            group: "feedback",
                            data: {
                              doctor_id: $props.information.id,
                              summery: summery
                            },
                            type: "selecy_summery",
                            token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                          });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["sendEvent"] != null &&
                  typeof $steps["sendEvent"] === "object" &&
                  typeof $steps["sendEvent"].then === "function"
                ) {
                  $steps["sendEvent"] = await $steps["sendEvent"];
                }
              }}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__onbte)} />

          {(() => {
            try {
              return (
                $ctx.Growthbook.features["show-centers-rate-for-doctor"] &&
                $props.seo.slug === $ctx.auth?.info?.provider?.slug
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__xkVkB)}>
              <RateDetail
                data-plasmic-name={"rateDetail"}
                data-plasmic-override={overrides.rateDetail}
                centers={(() => {
                  try {
                    return $props.centers;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.rateDetail)}
                slug={(() => {
                  try {
                    return $props.seo.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div className={classNames(projectcss.all, sty.freeBox__zqtUq)} />
            </div>
          ) : null}
          <SetNweReview
            data-plasmic-name={"setNweReview"}
            data-plasmic-override={overrides.setNweReview}
            addCommentPage={(() => {
              try {
                return (() => {
                  const doctor = {
                    id: $props.information?.id,
                    name: $props.information?.display_name,
                    image: $props.information?.image,
                    group_expertises:
                      $props.expertises.group_expertises?.[0]?.name ?? "سایر",
                    group_expertises_slug:
                      $props.expertises.group_expertises?.[0]?.en_slug ??
                      "other",
                    expertise: $props.expertises?.expertises?.[0]?.alias_title,
                    slug: $props.seo.slug,
                    city: $props.centers?.map(center => center.city),
                    server_id: $props.information?.server_id
                  };
                  return `/comment/?doctorName=${doctor.name}&image=${doctor.image}&group_expertises=${doctor.group_expertises}&group_expertises_slug=${doctor.group_expertises_slug}&expertise=${doctor.expertise}&doctor_id=${doctor.id}&server_id=${doctor.server_id}&doctor_city=${doctor.city[0]}&doctor_slug=${doctor.slug}`;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.setNweReview)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___6RwG3)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__alcob)}
            >
              <Select
                data-plasmic-name={"filterInput"}
                data-plasmic-override={overrides.filterInput}
                className={classNames("__wab_instance", sty.filterInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["filterInput", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);
                  (async value => {
                    const $steps = {};

                    $steps["runOnFilter"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onFilter"],
                            args: [
                              (() => {
                                try {
                                  return $state.filterInput.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnFilter"] != null &&
                      typeof $steps["runOnFilter"] === "object" &&
                      typeof $steps["runOnFilter"].then === "function"
                    ) {
                      $steps["runOnFilter"] = await $steps["runOnFilter"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  filter: $state.filterInput.value
                                },
                                type: "selected_filter",
                                token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }).apply(null, eventArgs);
                }}
                options={(() => {
                  try {
                    return [
                      {
                        value: "all",
                        label: "همه نظرات"
                      },
                      ...($ctx.auth.isLogin
                        ? [
                            {
                              value: "my_feedbacks",
                              label: "نظرات من"
                            }
                          ]
                        : []),
                      {
                        value: "not_recommended",
                        label: "نظرات منفی"
                      },
                      {
                        value: "visited",
                        label: "بیماران دارای نوبت"
                      },
                      ...$props.centers.map(center => ({
                        value: center.id,
                        label: center.name
                      }))
                    ];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, ["filterInput", "value"])}
              />

              <Select
                data-plasmic-name={"sortInput"}
                data-plasmic-override={overrides.sortInput}
                className={classNames("__wab_instance", sty.sortInput)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["sortInput", "value"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);
                  (async value => {
                    const $steps = {};

                    $steps["runOnSort"] = true
                      ? (() => {
                          const actionArgs = {
                            eventRef: $props["onSort"],
                            args: [
                              (() => {
                                try {
                                  return $state.sortInput.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnSort"] != null &&
                      typeof $steps["runOnSort"] === "object" &&
                      typeof $steps["runOnSort"].then === "function"
                    ) {
                      $steps["runOnSort"] = await $steps["runOnSort"];
                    }

                    $steps["splunk"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.information.id,
                                  sort: $state.sortInput.value
                                },
                                type: "sort_comment",
                                token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["splunk"] != null &&
                      typeof $steps["splunk"] === "object" &&
                      typeof $steps["splunk"].then === "function"
                    ) {
                      $steps["splunk"] = await $steps["splunk"];
                    }
                  }).apply(null, eventArgs);
                }}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { label: null, value: null },
                    { label: null, value: null }
                  ];
                  __composite["0"]["value"] = "default_order";
                  __composite["0"]["label"] =
                    "\u0645\u0631\u062a\u0628\u0637 \u062a\u0631\u06cc\u0646";
                  __composite["1"]["label"] =
                    "\u0645\u062d\u0628\u0648\u0628 \u062a\u0631\u06cc\u0646";
                  __composite["1"]["value"] = "count_like";
                  __composite["2"]["label"] =
                    "\u062c\u062f\u06cc\u062f \u062a\u0631\u06cc\u0646";
                  __composite["2"]["value"] = "created_at";
                  return __composite;
                })()}
                value={generateStateValueProp($state, ["sortInput", "value"])}
              />
            </Stack__>
            <TextInput
              data-plasmic-name={"searchInput"}
              data-plasmic-override={overrides.searchInput}
              className={classNames("__wab_instance", sty.searchInput)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["searchInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};

                  $steps["runOnSearch"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["onSearch"],
                          args: [
                            (() => {
                              try {
                                return $state.searchInput.value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnSearch"] != null &&
                    typeof $steps["runOnSearch"] === "object" &&
                    typeof $steps["runOnSearch"].then === "function"
                  ) {
                    $steps["runOnSearch"] = await $steps["runOnSearch"];
                  }

                  $steps["splunk"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $$.splunkEvent({
                              group: "feedback",
                              data: {
                                doctor_id: $props.information.id,
                                search_text: $state.searchInput.value
                              },
                              type: "search_in_comment",
                              token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                            });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }).apply(null, eventArgs);
              }}
              placeholder={
                "\u062c\u0633\u062a\u062c\u0648\u06cc \u0646\u0627\u0645 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0648... \u062f\u0631 \u0646\u0638\u0631\u0627\u062a"
              }
              value={
                generateStateValueProp($state, ["searchInput", "value"]) ?? ""
              }
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__juWhk)} />

          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $props.reviewResponse;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                data-plasmic-name={"cardLine"}
                data-plasmic-override={overrides.cardLine}
                hasGap={true}
                className={classNames(projectcss.all, sty.cardLine)}
                key={currentIndex}
              >
                <ReviewCard
                  data-plasmic-name={"reviewCard"}
                  data-plasmic-override={overrides.reviewCard}
                  className={classNames("__wab_instance", sty.reviewCard)}
                  commentText={(() => {
                    try {
                      return currentItem.description.replace(
                        new RegExp($state.searchInput.value, "g"),
                        `<mark style="background-color: yellow;">$&</mark>`
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  docCenter={(() => {
                    try {
                      return currentItem.center_name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  doctorEncounter={(() => {
                    try {
                      return currentItem.doctor_encounter;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  doctorSlug={(() => {
                    try {
                      return (() => {
                        if (typeof window != "undefined")
                          return window.encodeURI(currentItem.doctor_slug);
                        else return "";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  explanationOfIssue={(() => {
                    try {
                      return currentItem.explanation_of_issue;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  feedbackId={(() => {
                    try {
                      return currentItem.Id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  like={(() => {
                    try {
                      return currentItem.count_like;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  qualityOfTreatment={(() => {
                    try {
                      return currentItem.quality_of_treatment;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  raviExpFroDrakam={(() => {
                    try {
                      return $ctx.Growthbook.features["ravi-exp-fro-drakam"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  recommendRange={(() => {
                    try {
                      return currentItem.recommend_range;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  recommended={(() => {
                    try {
                      return currentItem.recommend_range
                        ? currentItem.recommend_range >= 3
                        : currentItem.recommended;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  replyToFeedbackId={(() => {
                    try {
                      return currentItem.Id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  setTime={(() => {
                    try {
                      return (() => {
                        const createdDate = new Date(currentItem.created_at);
                        const currentDate = new Date();
                        const timeDiff = Math.abs(currentDate - createdDate);
                        const daysDiff = Math.ceil(
                          timeDiff / (1000 * 60 * 60 * 24)
                        );

                        const numbers = [
                          "صفر",
                          "یک",
                          "دو",
                          "سه",
                          "چهار",
                          "پنج",
                          "شش",
                          "هفت",
                          "هشت",
                          "نه",
                          "ده"
                        ];

                        const numToPersian = num => {
                          const units = [
                            "",
                            "یک",
                            "دو",
                            "سه",
                            "چهار",
                            "پنج",
                            "شش",
                            "هفت",
                            "هشت",
                            "نه"
                          ];
                          const tens = [
                            "",
                            "ده",
                            "بیست",
                            "سی",
                            "چهل",
                            "پنجاه",
                            "شصت",
                            "هفتاد",
                            "هشتاد",
                            "نود"
                          ];
                          if (num < 10) return units[num];
                          if (num < 20) return `ده${units[num - 10]}`;
                          if (num < 100) {
                            const ten = Math.floor(num / 10);
                            const unit = num % 10;
                            return `${tens[ten]}${
                              unit > 0 ? ` و ${units[unit]}` : ""
                            }`;
                          }
                          if (num < 1000) {
                            const hundred = Math.floor(num / 100);
                            const remainder = num % 100;
                            return `${units[hundred]}صد${
                              remainder > 0
                                ? ` و ${numToPersian(remainder)}`
                                : ""
                            }`;
                          }
                        };

                        if (daysDiff === 0) {
                          return "امروز";
                        } else if (daysDiff === 1) {
                          return "دیروز";
                        } else if (daysDiff < 7) {
                          return `${numbers[daysDiff]} روز پیش`;
                        } else if (daysDiff < 30) {
                          const weeksDiff = Math.floor(daysDiff / 7);
                          if (weeksDiff === 1) {
                            return "یک هفته پیش";
                          }
                          return `${numbers[weeksDiff]} هفته پیش`;
                        } else if (daysDiff < 365) {
                          const monthsDiff = Math.floor(daysDiff / 30);
                          if (monthsDiff === 1) {
                            return "یک ماه پیش";
                          }
                          return `${numToPersian(monthsDiff)} ماه پیش`;
                        } else {
                          const yearsDiff = Math.floor(daysDiff / 365);
                          if (yearsDiff === 1) {
                            return "یک سال پیش";
                          } else if (yearsDiff === 2) {
                            return "دو سال پیش";
                          } else {
                            return `${numToPersian(yearsDiff)} سال پیش`;
                          }
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  userId={(() => {
                    try {
                      return currentItem.user_id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  userName={(() => {
                    try {
                      return currentItem.user_display_name || "کاربر بی نام";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  visitedTag={(() => {
                    try {
                      return currentItem.visit_status === "visited";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__q1VhB)}
                />
              </Stack__>
            );
          })}
          {(() => {
            try {
              return $props.reviewResponse.length === 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__kwRs)}>
              <div className={classNames(projectcss.all, sty.freeBox__pnl53)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x0PVy
                  )}
                >
                  {
                    "\u0645\u0648\u0631\u062f\u06cc \u06cc\u0627\u0641\u062a \u0646\u0634\u062f!"
                  }
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $props.paginationLoadingStatus || !$props.pageInfo.isLastPage
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__imJd)}>
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4XpEt
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0647\u062f\u0647  \u0628\u06cc\u0634\u062a\u0631"
                    }
                  </div>
                }
                className={classNames("__wab_instance", sty.button)}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__xJg3B)}
                    role={"img"}
                  />
                }
                link={undefined}
                loading={(() => {
                  try {
                    return $props.paginationLoadingStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["runNextPageTrigger"] = true
                    ? (() => {
                        const actionArgs = {
                          eventRef: $props["nextPageTrigger"],
                          args: [
                            (() => {
                              try {
                                return $props.pageInfo.page + 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runNextPageTrigger"] != null &&
                    typeof $steps["runNextPageTrigger"] === "object" &&
                    typeof $steps["runNextPageTrigger"].then === "function"
                  ) {
                    $steps["runNextPageTrigger"] = await $steps[
                      "runNextPageTrigger"
                    ];
                  }

                  $steps["splunk"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $$.splunkEvent({
                              group: "feedback",
                              data: {
                                doctor_id: $props.information.id,
                                page: $props.pageInfo.page + 1
                              },
                              type: "show_more_button",
                              token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                            });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }}
                outline={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__vo0Bm)}
                    role={"img"}
                  />
                }
              />
            </div>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            deps={(() => {
              try {
                return [$ctx.Growthbook.isReady];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = $ctx.Growthbook.isReady
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return {
                              slug: $props.seo.slug
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions[
                      "GrowthbookGlobalContext.setAttributes"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />
        </div>
      ) : null}
      {(() => {
        try {
          return $props.hideRates;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__amJbf)}>
          <div className={classNames(projectcss.all, sty.freeBox__v9OXb)}>
            <Icon11Icon
              className={classNames(projectcss.all, sty.svg__tIAe)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cnqVh
              )}
            >
              {
                "\u0628\u0647 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u067e\u0632\u0634\u06a9\u060c \u0645\u0634\u0627\u0647\u062f\u0647 \u0628\u062e\u0634 \u0646\u0638\u0631\u0627\u062a \u0627\u0645\u06a9\u0627\u0646 \u067e\u0630\u06cc\u0631 \u0646\u0645\u06cc \u0628\u0627\u0634\u062f."
              }
            </div>
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "summery",
    "rateDetail",
    "setNweReview",
    "filterInput",
    "sortInput",
    "searchInput",
    "cardLine",
    "reviewCard",
    "button",
    "sideEffect"
  ],
  summery: ["summery"],
  rateDetail: ["rateDetail"],
  setNweReview: ["setNweReview"],
  filterInput: ["filterInput"],
  sortInput: ["sortInput"],
  searchInput: ["searchInput"],
  cardLine: ["cardLine", "reviewCard"],
  reviewCard: ["reviewCard"],
  button: ["button"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  summery: typeof Summery;
  rateDetail: typeof RateDetail;
  setNweReview: typeof SetNweReview;
  filterInput: typeof Select;
  sortInput: typeof Select;
  searchInput: typeof TextInput;
  cardLine: "div";
  reviewCard: typeof ReviewCard;
  button: typeof Button;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewList__VariantsArgs;
    args?: PlasmicReviewList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewList__ArgProps,
          internalVariantPropNames: PlasmicReviewList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReviewList";
  } else {
    func.displayName = `PlasmicReviewList.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewList = Object.assign(
  // Top-level PlasmicReviewList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    summery: makeNodeComponent("summery"),
    rateDetail: makeNodeComponent("rateDetail"),
    setNweReview: makeNodeComponent("setNweReview"),
    filterInput: makeNodeComponent("filterInput"),
    sortInput: makeNodeComponent("sortInput"),
    searchInput: makeNodeComponent("searchInput"),
    cardLine: makeNodeComponent("cardLine"),
    reviewCard: makeNodeComponent("reviewCard"),
    button: makeNodeComponent("button"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicReviewList
    internalVariantProps: PlasmicReviewList__VariantProps,
    internalArgProps: PlasmicReviewList__ArgProps
  }
);

export default PlasmicReviewList;
/* prettier-ignore-end */
