// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: 48DkFQMlhcuA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicEditAndReport.module.css"; // plasmic-import: 48DkFQMlhcuA/css

import MenuIcon from "../fragment_icons/icons/PlasmicIcon__Menu"; // plasmic-import: dmfb3Ga2IoVt/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: moTm-5qth65g/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: OcnxMK5rW620/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon

import __fn_splunkEvent from "@/common/services/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

createPlasmicElementProxy;

export type PlasmicEditAndReport__VariantMembers = {
  raviExpFroDrakam: "raviExpFroDrakam";
};
export type PlasmicEditAndReport__VariantsArgs = {
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
};
type VariantPropType = keyof PlasmicEditAndReport__VariantsArgs;
export const PlasmicEditAndReport__VariantProps = new Array<VariantPropType>(
  "raviExpFroDrakam"
);

export type PlasmicEditAndReport__ArgsType = {
  commentText?: string;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  recommendRange?: string;
  doctorUserId?: string;
  isReply?: boolean;
};
type ArgPropType = keyof PlasmicEditAndReport__ArgsType;
export const PlasmicEditAndReport__ArgProps = new Array<ArgPropType>(
  "commentText",
  "feedbackId",
  "userId",
  "explanationOfIssue",
  "doctorEncounter",
  "qualityOfTreatment",
  "doctorSlug",
  "recommendRange",
  "doctorUserId",
  "isReply"
);

export type PlasmicEditAndReport__OverridesType = {
  editAndReportStack?: Flex__<"div">;
  threeDots?: Flex__<typeof Popover>;
  dialog3?: Flex__<typeof Dialog>;
  edditTextBox?: Flex__<"textarea">;
  dialog4?: Flex__<typeof Dialog>;
  dialog5?: Flex__<typeof Dialog>;
  reportText2?: Flex__<"textarea">;
};

export interface DefaultEditAndReportProps {
  commentText?: string;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  recommendRange?: string;
  doctorUserId?: string;
  isReply?: boolean;
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
  className?: string;
}

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditAndReport__RenderFunc(props: {
  variants: PlasmicEditAndReport__VariantsArgs;
  args: PlasmicEditAndReport__ArgsType;
  overrides: PlasmicEditAndReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isReply: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "threeDots.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return false;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).some(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )
                  : false;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reportLoadinButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "edditTextBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportText2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "raviExpFroDrakam",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.raviExpFroDrakam
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"editAndReportStack"}
      data-plasmic-override={overrides.editAndReportStack}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.editAndReportStack,
        {
          [sty.editAndReportStackraviExpFroDrakam]: hasVariant(
            $state,
            "raviExpFroDrakam",
            "raviExpFroDrakam"
          )
        }
      )}
      dir={"rtl"}
    >
      <Popover
        data-plasmic-name={"threeDots"}
        data-plasmic-override={overrides.threeDots}
        align={"center"}
        className={classNames("__wab_instance", sty.threeDots, {
          [sty.threeDotsraviExpFroDrakam]: hasVariant(
            $state,
            "raviExpFroDrakam",
            "raviExpFroDrakam"
          )
        })}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["threeDots", "open"]).apply(
            null,
            eventArgs
          );

          if (eventArgs.length > 1 && eventArgs[1]) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["threeDots", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__uHoTc)}>
            {(() => {
              try {
                return $ctx.auth.isLogin && $ctx.auth.info.id == $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Dialog
                data-plasmic-name={"dialog3"}
                data-plasmic-override={overrides.dialog3}
                body={
                  <React.Fragment>
                    <textarea
                      data-plasmic-name={"edditTextBox"}
                      data-plasmic-override={overrides.edditTextBox}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.edditTextBox
                      )}
                      onChange={async (...eventArgs: any) => {
                        (e => {
                          generateStateOnChangeProp($state, [
                            "edditTextBox",
                            "value"
                          ])(e.target.value);
                        }).apply(null, eventArgs);
                      }}
                      placeholder={``}
                      ref={ref => {
                        $refs["edditTextBox"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, [
                          "edditTextBox",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <Button
                      children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__ba57N
                      )}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__q1H46)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.editLoadingButton;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["loading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editLoadingButton"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["loading"] != null &&
                          typeof $steps["loading"] === "object" &&
                          typeof $steps["loading"].then === "function"
                        ) {
                          $steps["loading"] = await $steps["loading"];
                        }

                        $steps["request"] =
                          $state.edditTextBox.value.length >= 10
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return fetch(
                                      "https://apigw.paziresh24.com/ravi/v2/feedbacks?id=" +
                                        $props.feedbackId,
                                      {
                                        headers: {
                                          "Content-Type": "application/json"
                                        },
                                        method: "PATCH",
                                        body: JSON.stringify({
                                          description: $state.edditTextBox.value
                                        }),
                                        credentials: "include"
                                      }
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["request"] != null &&
                          typeof $steps["request"] === "object" &&
                          typeof $steps["request"].then === "function"
                        ) {
                          $steps["request"] = await $steps["request"];
                        }

                        $steps["offLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editLoadingButton"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["offLoading"] != null &&
                          typeof $steps["offLoading"] === "object" &&
                          typeof $steps["offLoading"].then === "function"
                        ) {
                          $steps["offLoading"] = await $steps["offLoading"];
                        }

                        $steps["toast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0639\u062f \u0627\u0632 \u0628\u0631\u0631\u0633\u06cc \u062a\u0648\u0633\u0637 \u067e\u0630\u06cc\u0631\u063424\u060c \u062f\u0631 \u0635\u0648\u0631\u062a \u0627\u0645\u06a9\u0627\u0646 \u0645\u0646\u062a\u0634\u0631 \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
                                  "top-right",
                                  4999
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["toast"] != null &&
                          typeof $steps["toast"] === "object" &&
                          typeof $steps["toast"].then === "function"
                        ) {
                          $steps["toast"] = await $steps["toast"];
                        }

                        $steps["close"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog3", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["close"] != null &&
                          typeof $steps["close"] === "object" &&
                          typeof $steps["close"].then === "function"
                        ) {
                          $steps["close"] = await $steps["close"];
                        }

                        $steps["splunk"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $$.splunkEvent({
                                    group: "feedback",
                                    data: {
                                      doctor_id: $props.doctorUserId,
                                      comment_id: $props.feedbackId,
                                      edit_text: $state.edditTextBox.value
                                    },
                                    type: "edit_comment",
                                    token:
                                      "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["splunk"] != null &&
                          typeof $steps["splunk"] === "object" &&
                          typeof $steps["splunk"].then === "function"
                        ) {
                          $steps["splunk"] = await $steps["splunk"];
                        }
                      }}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg___976R)}
                          role={"img"}
                        />
                      }
                    />
                  </React.Fragment>
                }
                className={classNames("__wab_instance", sty.dialog3)}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["dialog3", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["dialog3", "open"])}
                title={
                  "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0646\u0638\u0631"
                }
                trigger={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dv97B)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__eEYpx)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__duig4
                      )}
                    >
                      {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                    </div>
                  </Stack__>
                }
              />
            ) : null}
            {(() => {
              try {
                return $ctx.auth.isLogin && $ctx.auth.info.id == $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Dialog
                data-plasmic-name={"dialog4"}
                data-plasmic-override={overrides.dialog4}
                body={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jYq71)}
                  >
                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gDLeS
                          )}
                        >
                          {"\u062d\u0630\u0641"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__eZc84
                      )}
                      color={"red"}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__r90Lj)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.deleteLoadingButton;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["loading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["deleteLoadingButton"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["loading"] != null &&
                          typeof $steps["loading"] === "object" &&
                          typeof $steps["loading"].then === "function"
                        ) {
                          $steps["loading"] = await $steps["loading"];
                        }

                        $steps["request"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return fetch(
                                    "https://apigw.paziresh24.com/ravi/v1/feedbacks/delete/",
                                    {
                                      method: "DELETE",
                                      credentials: "include",
                                      headers: {
                                        "Content-Type": "application/json"
                                      },
                                      body: JSON.stringify({
                                        Id: $props.feedbackId
                                      })
                                    }
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["request"] != null &&
                          typeof $steps["request"] === "object" &&
                          typeof $steps["request"].then === "function"
                        ) {
                          $steps["request"] = await $steps["request"];
                        }

                        $steps["updateDeleteLoadingButton"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["deleteLoadingButton"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDeleteLoadingButton"] != null &&
                          typeof $steps["updateDeleteLoadingButton"] ===
                            "object" &&
                          typeof $steps["updateDeleteLoadingButton"].then ===
                            "function"
                        ) {
                          $steps["updateDeleteLoadingButton"] = await $steps[
                            "updateDeleteLoadingButton"
                          ];
                        }

                        $steps["toast"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062d\u0630\u0641 \u0634\u062f.",
                                  "top-right",
                                  5000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["toast"] != null &&
                          typeof $steps["toast"] === "object" &&
                          typeof $steps["toast"].then === "function"
                        ) {
                          $steps["toast"] = await $steps["toast"];
                        }

                        $steps["close"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog4", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["close"] != null &&
                          typeof $steps["close"] === "object" &&
                          typeof $steps["close"].then === "function"
                        ) {
                          $steps["close"] = await $steps["close"];
                        }

                        $steps["splunk"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $$.splunkEvent({
                                    group: "feedback",
                                    data: {
                                      doctor_id: $props.doctorUserId,
                                      comment_id: $props.feedbackId
                                    },
                                    type: "delete_comment",
                                    token:
                                      "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["splunk"] != null &&
                          typeof $steps["splunk"] === "object" &&
                          typeof $steps["splunk"].then === "function"
                        ) {
                          $steps["splunk"] = await $steps["splunk"];
                        }
                      }}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__wCjw7)}
                          role={"img"}
                        />
                      }
                    />

                    <Button
                      children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__lSAmw
                      )}
                      color={"red"}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__nohY5)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["close"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog4", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["close"] != null &&
                          typeof $steps["close"] === "object" &&
                          typeof $steps["close"].then === "function"
                        ) {
                          $steps["close"] = await $steps["close"];
                        }
                      }}
                      outline={true}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__rDkdp)}
                          role={"img"}
                        />
                      }
                    />
                  </Stack__>
                }
                className={classNames("__wab_instance", sty.dialog4)}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["dialog4", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["dialog4", "open"])}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t6Lu6
                    )}
                  >
                    {
                      "\u0622\u06cc\u0627 \u0627\u0632 \u062d\u0630\u0641 \u0646\u0638\u0631 \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
                    }
                  </div>
                }
                trigger={
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yHVaz)}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__ra3Wa)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Bp8Q
                      )}
                    >
                      {"\u062d\u0630\u0641"}
                    </div>
                  </Stack__>
                }
              />
            ) : null}
            <Dialog
              data-plasmic-name={"dialog5"}
              data-plasmic-override={overrides.dialog5}
              body={
                <React.Fragment>
                  <textarea
                    data-plasmic-name={"reportText2"}
                    data-plasmic-override={overrides.reportText2}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.reportText2
                    )}
                    onChange={async (...eventArgs: any) => {
                      (e => {
                        generateStateOnChangeProp($state, [
                          "reportText2",
                          "value"
                        ])(e.target.value);
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0648 \u0634\u0631\u062d \u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631 \u0627\u06cc\u0646 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u062a\u06cc\u0645 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u0630\u06cc\u0631\u063424 \u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u0645\u0627\u060c \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0645\u062c\u062f\u062f\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u062f."
                    }
                    ref={ref => {
                      $refs["reportText2"] = ref;
                    }}
                    value={
                      generateStateValueProp($state, [
                        "reportText2",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <Button
                    children2={
                      "\u0627\u0631\u0633\u0627\u0644 \u06af\u0632\u0627\u0631\u0634"
                    }
                    className={classNames("__wab_instance", sty.button___0Tfvz)}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__zs6Sc)}
                        role={"img"}
                      />
                    }
                    loading={(() => {
                      try {
                        return $state.reportLoadinButton;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["login"] =
                        $ctx.auth.isLogin == false
                          ? (() => {
                              const actionArgs = { args: [] };
                              return $globalActions[
                                "AuthGlobalContext.login"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["login"] != null &&
                        typeof $steps["login"] === "object" &&
                        typeof $steps["login"].then === "function"
                      ) {
                        $steps["login"] = await $steps["login"];
                      }

                      $steps["loading"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["reportLoadinButton"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["loading"] != null &&
                        typeof $steps["loading"] === "object" &&
                        typeof $steps["loading"].then === "function"
                      ) {
                        $steps["loading"] = await $steps["loading"];
                      }

                      $steps["if10Caracter"] =
                        $ctx.auth.isLogin && $state.reportText2.value <= 10
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u062a\u0639\u062f\u0627\u062f \u062d\u0631\u0648\u0641 \u0628\u0627\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 10 \u062d\u0631\u0641 \u0628\u0627\u0634\u062f.",
                                  undefined,
                                  5000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["if10Caracter"] != null &&
                        typeof $steps["if10Caracter"] === "object" &&
                        typeof $steps["if10Caracter"].then === "function"
                      ) {
                        $steps["if10Caracter"] = await $steps["if10Caracter"];
                      }

                      $steps["request"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return fetch(
                                    "https://apigw.paziresh24.com/ravi/v1/feedbacks/report?id= " +
                                      $props.feedbackId,
                                    {
                                      headers: {
                                        "content-type": "application/json"
                                      },
                                      body: JSON.stringify({
                                        feedback_id: $props.feedbackId,
                                        report_text: $state.reportText2.value
                                      }),
                                      method: "POST",
                                      credentials: "include"
                                    }
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["request"] != null &&
                        typeof $steps["request"] === "object" &&
                        typeof $steps["request"].then === "function"
                      ) {
                        $steps["request"] = await $steps["request"];
                      }

                      $steps["n8N"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return fetch(
                                    "https://apigw.paziresh24.com/ravi/v1/report-webhook?id= " +
                                      $props.feedbackId,
                                    {
                                      headers: {
                                        "content-type": "application/json"
                                      },
                                      body: JSON.stringify({
                                        feedback_id: $props.feedbackId,
                                        report_text: $state.reportText2.value,
                                        comment_text: $props.commentText,
                                        doctor_slug: $props.doctorSlug
                                      }),
                                      method: "POST",
                                      credentials: "include"
                                    }
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["n8N"] != null &&
                        typeof $steps["n8N"] === "object" &&
                        typeof $steps["n8N"].then === "function"
                      ) {
                        $steps["n8N"] = await $steps["n8N"];
                      }

                      $steps["closeDialog"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog5", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["closeDialog"] != null &&
                        typeof $steps["closeDialog"] === "object" &&
                        typeof $steps["closeDialog"].then === "function"
                      ) {
                        $steps["closeDialog"] = await $steps["closeDialog"];
                      }

                      $steps["offLoading"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["reportLoadinButton"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["offLoading"] != null &&
                        typeof $steps["offLoading"] === "object" &&
                        typeof $steps["offLoading"].then === "function"
                      ) {
                        $steps["offLoading"] = await $steps["offLoading"];
                      }

                      $steps["toast"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0631\u0631\u0633\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
                                  undefined,
                                  4989
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["toast"] != null &&
                        typeof $steps["toast"] === "object" &&
                        typeof $steps["toast"].then === "function"
                      ) {
                        $steps["toast"] = await $steps["toast"];
                      }

                      $steps["splunk"] =
                        $state.reportText2.value.length >= 10 &&
                        $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $$.splunkEvent({
                                    group: "feedback",
                                    data: {
                                      doctor_id: $props.doctorUserId,
                                      comment_id: $props.feedbackId,
                                      report_text: $state.reportText2.value
                                    },
                                    type: "report_comment",
                                    token:
                                      "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d",
                                    api_host:
                                      "https://splunk-ravi-hec.paziresh24.com"
                                  });
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["splunk"] != null &&
                        typeof $steps["splunk"] === "object" &&
                        typeof $steps["splunk"].then === "function"
                      ) {
                        $steps["splunk"] = await $steps["splunk"];
                      }
                    }}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__qqcUz)}
                        role={"img"}
                      />
                    }
                  />
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.dialog5, {
                [sty.dialog5raviExpFroDrakam]: hasVariant(
                  $state,
                  "raviExpFroDrakam",
                  "raviExpFroDrakam"
                )
              })}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["dialog5", "open"]).apply(
                  null,
                  eventArgs
                );

                if (eventArgs.length > 1 && eventArgs[1]) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["dialog5", "open"])}
              title={"\u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631"}
              trigger={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bKaQl, {
                    [sty.freeBoxraviExpFroDrakam__bKaQlAslZi]: hasVariant(
                      $state,
                      "raviExpFroDrakam",
                      "raviExpFroDrakam"
                    )
                  })}
                >
                  <InfoIcon
                    className={classNames(projectcss.all, sty.svg__svgT)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jseG
                    )}
                  >
                    {"\u06af\u0632\u0627\u0631\u0634"}
                  </div>
                </Stack__>
              }
            />
          </div>
        }
        side={"bottom"}
        slideIn={true}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens,
          plasmic_ravi_design_system_css.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__lVzH8)}>
          <MenuIcon
            className={classNames(projectcss.all, sty.svg__doEqo)}
            role={"img"}
          />
        </div>
      </Popover>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  editAndReportStack: [
    "editAndReportStack",
    "threeDots",
    "dialog3",
    "edditTextBox",
    "dialog4",
    "dialog5",
    "reportText2"
  ],
  threeDots: [
    "threeDots",
    "dialog3",
    "edditTextBox",
    "dialog4",
    "dialog5",
    "reportText2"
  ],
  dialog3: ["dialog3", "edditTextBox"],
  edditTextBox: ["edditTextBox"],
  dialog4: ["dialog4"],
  dialog5: ["dialog5", "reportText2"],
  reportText2: ["reportText2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  editAndReportStack: "div";
  threeDots: typeof Popover;
  dialog3: typeof Dialog;
  edditTextBox: "textarea";
  dialog4: typeof Dialog;
  dialog5: typeof Dialog;
  reportText2: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditAndReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditAndReport__VariantsArgs;
    args?: PlasmicEditAndReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditAndReport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditAndReport__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditAndReport__ArgProps,
          internalVariantPropNames: PlasmicEditAndReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditAndReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "editAndReportStack") {
    func.displayName = "PlasmicEditAndReport";
  } else {
    func.displayName = `PlasmicEditAndReport.${nodeName}`;
  }
  return func;
}

export const PlasmicEditAndReport = Object.assign(
  // Top-level PlasmicEditAndReport renders the root element
  makeNodeComponent("editAndReportStack"),
  {
    // Helper components rendering sub-elements
    threeDots: makeNodeComponent("threeDots"),
    dialog3: makeNodeComponent("dialog3"),
    edditTextBox: makeNodeComponent("edditTextBox"),
    dialog4: makeNodeComponent("dialog4"),
    dialog5: makeNodeComponent("dialog5"),
    reportText2: makeNodeComponent("reportText2"),

    // Metadata about props expected for PlasmicEditAndReport
    internalVariantProps: PlasmicEditAndReport__VariantProps,
    internalArgProps: PlasmicEditAndReport__ArgProps
  }
);

export default PlasmicEditAndReport;
/* prettier-ignore-end */
