// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: fh6BVdoIxXpv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: rQxw_Usvf1CS/codeComponent
import RaviReviewCard from "../../RaviReviewCard"; // plasmic-import: mdyuGePDb8Fy/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewCard2.module.css"; // plasmic-import: fh6BVdoIxXpv/css

createPlasmicElementProxy;

export type PlasmicReviewCard2__VariantMembers = {
  raviExpFroDrakam: "raviExpFroDrakam";
};
export type PlasmicReviewCard2__VariantsArgs = {
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
};
type VariantPropType = keyof PlasmicReviewCard2__VariantsArgs;
export const PlasmicReviewCard2__VariantProps = new Array<VariantPropType>(
  "raviExpFroDrakam"
);

export type PlasmicReviewCard2__ArgsType = {
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
  recommendRange?: string;
  doctorUserId?: string;
  isShowReplyInput?: boolean;
  avgRateValue?: number;
};
type ArgPropType = keyof PlasmicReviewCard2__ArgsType;
export const PlasmicReviewCard2__ArgProps = new Array<ArgPropType>(
  "visitedTag",
  "setTime",
  "docCenter",
  "recommended",
  "commentText",
  "like",
  "feedbackId",
  "userId",
  "explanationOfIssue",
  "doctorEncounter",
  "qualityOfTreatment",
  "doctorSlug",
  "replyToFeedbackId",
  "recommendRange",
  "doctorUserId",
  "isShowReplyInput",
  "avgRateValue"
);

export type PlasmicReviewCard2__OverridesType = {
  verticalStack?: Flex__<"div">;
  userApi?: Flex__<typeof ApiRequest>;
  text?: Flex__<"div">;
  repliesApi?: Flex__<typeof ApiRequest>;
  card?: Flex__<typeof RaviReviewCard>;
};

export interface DefaultReviewCard2Props {
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
  recommendRange?: string;
  doctorUserId?: string;
  isShowReplyInput?: boolean;
  avgRateValue?: number;
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewCard2__RenderFunc(props: {
  variants: PlasmicReviewCard2__VariantsArgs;
  args: PlasmicReviewCard2__ArgsType;
  overrides: PlasmicReviewCard2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          visitedTag: false,
          recommended: false,
          isShowReplyInput: false,
          avgRateValue: 2
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return false;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).some(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )
                  : false;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reportLoadinButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "raviExpFroDrakam",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.raviExpFroDrakam
      },
      {
        path: "likeRate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return 0;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).find(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )?.rate
                  : 0;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "card.liked",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.likeRate;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "userApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLoadingSendReport",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"verticalStack"}
      data-plasmic-override={overrides.verticalStack}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.verticalStack,
        {
          [sty.verticalStackraviExpFroDrakam]: hasVariant(
            $state,
            "raviExpFroDrakam",
            "raviExpFroDrakam"
          )
        }
      )}
      dir={"rtl"}
    >
      <ApiRequest
        data-plasmic-name={"userApi"}
        data-plasmic-override={overrides.userApi}
        className={classNames("__wab_instance", sty.userApi)}
        errorDisplay={
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "\u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a."
            }
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={generateStateOnChangeProp($state, ["userApi", "error"])}
        onLoading={generateStateOnChangeProp($state, ["userApi", "loading"])}
        onSuccess={generateStateOnChangeProp($state, ["userApi", "data"])}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/v1/users/${$props.userId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <ApiRequest
          data-plasmic-name={"repliesApi"}
          data-plasmic-override={overrides.repliesApi}
          className={classNames("__wab_instance", sty.repliesApi)}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={generateStateOnChangeProp($state, ["repliesApi", "error"])}
          onLoading={generateStateOnChangeProp($state, [
            "repliesApi",
            "loading"
          ])}
          onSuccess={generateStateOnChangeProp($state, ["repliesApi", "data"])}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/ravi/v1/ravi_get_reply?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.feedbackId})~and(show,eq,1)~and(delete,eq,0)~and(description,isnot,null)&limit=1&offset=0&sort=-created_at`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <RaviReviewCard
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            avatarUrl={(() => {
              try {
                return $state.userApi.data.users[0].image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            avgRateValue={(() => {
              try {
                return $props.avgRateValue;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.card)}
            commentText={(() => {
              try {
                return $props.commentText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            date={(() => {
              try {
                return $props.setTime;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            feedBackId={(() => {
              try {
                return $props.feedbackId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isLoadingSendReport={(() => {
              try {
                return $state.isLoadingSendReport;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            isVisited={(() => {
              try {
                return $props.visitedTag;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            likeCount={(() => {
              try {
                return $state.isLike ? Number($props.like) + 1 : $props.like;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            liked={generateStateValueProp($state, ["card", "liked"])}
            onClickLike={async value => {
              const $steps = {};

              $steps["login"] = !$ctx.auth.isLogin
                ? (() => {
                    const actionArgs = { args: [] };
                    return $globalActions["AuthGlobalContext.login"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["login"] != null &&
                typeof $steps["login"] === "object" &&
                typeof $steps["login"].then === "function"
              ) {
                $steps["login"] = await $steps["login"];
              }

              $steps["updateCardLiked"] = !$ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["card", "liked"]
                      },
                      operation: 0,
                      value: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCardLiked"] != null &&
                typeof $steps["updateCardLiked"] === "object" &&
                typeof $steps["updateCardLiked"].then === "function"
              ) {
                $steps["updateCardLiked"] = await $steps["updateCardLiked"];
              }

              $steps["updateIsLike"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLike"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsLike"] != null &&
                typeof $steps["updateIsLike"] === "object" &&
                typeof $steps["updateIsLike"].then === "function"
              ) {
                $steps["updateIsLike"] = await $steps["updateIsLike"];
              }

              $steps["localStorage"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.isLike) {
                            const likedComment = {
                              user_id: $ctx.auth.info.id,
                              id: $props.feedbackId,
                              rate: $state.likeRate
                            };
                            const likedCommentsList =
                              JSON.parse(
                                localStorage.getItem("likedComments")
                              ) || [];
                            likedCommentsList.push(likedComment);
                            localStorage.setItem(
                              "likedComments",
                              JSON.stringify(likedCommentsList)
                            );
                          }
                          if (!$state.isLike) {
                            const likedCommentsList =
                              JSON.parse(
                                localStorage.getItem("likedComments")
                              ) || [];
                            const index = likedCommentsList.findIndex(
                              comment =>
                                comment.id === $props.feedbackId &&
                                comment.user_id === $ctx.auth.info.id
                            );
                            if (index !== -1) {
                              likedCommentsList.splice(index, 1);
                              return localStorage.setItem(
                                "likedComments",
                                JSON.stringify(likedCommentsList)
                              );
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["localStorage"] != null &&
                typeof $steps["localStorage"] === "object" &&
                typeof $steps["localStorage"].then === "function"
              ) {
                $steps["localStorage"] = await $steps["localStorage"];
              }

              $steps["request"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://ir-ravi-n8n.darkube.app/webhook/like_rate",
                        undefined,
                        (() => {
                          try {
                            return {
                              feedback_id: id,
                              rate: value,
                              user_id: $ctx.auth.info.id
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["request"] != null &&
                typeof $steps["request"] === "object" &&
                typeof $steps["request"].then === "function"
              ) {
                $steps["request"] = await $steps["request"];
              }
            }}
            onLikedChange2={generateStateOnChangeProp($state, [
              "card",
              "liked"
            ])}
            onSendReport={async (value, id) => {
              const $steps = {};

              $steps["login"] =
                $ctx.auth.isLogin == false
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["AuthGlobalContext.login"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["login"] != null &&
                typeof $steps["login"] === "object" &&
                typeof $steps["login"].then === "function"
              ) {
                $steps["login"] = await $steps["login"];
              }

              $steps["updateIsLoadingSendReport"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoadingSendReport"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsLoadingSendReport"] != null &&
                typeof $steps["updateIsLoadingSendReport"] === "object" &&
                typeof $steps["updateIsLoadingSendReport"].then === "function"
              ) {
                $steps["updateIsLoadingSendReport"] = await $steps[
                  "updateIsLoadingSendReport"
                ];
              }

              $steps["fi10Character"] =
                $ctx.auth.isLogin && value <= 10
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u062a\u0639\u062f\u0627\u062f \u062d\u0631\u0648\u0641 \u0628\u0627\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 10 \u062d\u0631\u0641 \u0628\u0627\u0634\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["fi10Character"] != null &&
                typeof $steps["fi10Character"] === "object" &&
                typeof $steps["fi10Character"].then === "function"
              ) {
                $steps["fi10Character"] = await $steps["fi10Character"];
              }

              $steps["request"] =
                value.length >= 10 && $ctx.auth.isLogin
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          (() => {
                            try {
                              return `https://apigw.paziresh24.com/ravi/v1/feedbacks/report?id=${$props.feedbackId}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                feedback_id: $props.feedbackId,
                                report_text: value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["request"] != null &&
                typeof $steps["request"] === "object" &&
                typeof $steps["request"].then === "function"
              ) {
                $steps["request"] = await $steps["request"];
              }

              $steps["n8N"] =
                value.length >= 10 && $ctx.auth.isLogin
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          (() => {
                            try {
                              return `https://apigw.paziresh24.com/ravi/v1/report-webhook?id=${$props.feedbackId}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                feedback_id: $props.feedbackId,
                                report_text: value,
                                comment_text: $props.commentText,
                                doctor_slug: $props.doctorSlug
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["n8N"] != null &&
                typeof $steps["n8N"] === "object" &&
                typeof $steps["n8N"].then === "function"
              ) {
                $steps["n8N"] = await $steps["n8N"];
              }

              $steps["updateIsLoadingSendReport2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoadingSendReport"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateIsLoadingSendReport2"] != null &&
                typeof $steps["updateIsLoadingSendReport2"] === "object" &&
                typeof $steps["updateIsLoadingSendReport2"].then === "function"
              ) {
                $steps["updateIsLoadingSendReport2"] = await $steps[
                  "updateIsLoadingSendReport2"
                ];
              }

              $steps["toast"] =
                value.length >= 10 && $ctx.auth.isLogin
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0631\u0631\u0633\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["toast"] != null &&
                typeof $steps["toast"] === "object" &&
                typeof $steps["toast"].then === "function"
              ) {
                $steps["toast"] = await $steps["toast"];
              }

              $steps["splunk"] =
                value.length >= 10 && $ctx.auth.isLogin
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return {
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorUserId,
                                  comment_id: $props.feedbackId,
                                  report_text: $state.reportText2.value
                                },
                                type: "report_comment"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return "https://splunk-ravi-hec.paziresh24.com";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          (() => {
                            try {
                              return "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Splunk.sendLog"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["splunk"] != null &&
                typeof $steps["splunk"] === "object" &&
                typeof $steps["splunk"].then === "function"
              ) {
                $steps["splunk"] = await $steps["splunk"];
              }
            }}
            onlyDoctor={(() => {
              try {
                return (
                  $props.avgRateValue <= 3.5 && $props.avgRateValue !== null
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            replies={(() => {
              try {
                return $state.repliesApi.data.list;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            subTitle={(() => {
              try {
                return $props.docCenter;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userId={(() => {
              try {
                return $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userName={(() => {
              try {
                return $state.userApi.data.users[0].name || "کاربر بی نام";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </ApiRequest>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  verticalStack: ["verticalStack", "userApi", "text", "repliesApi", "card"],
  userApi: ["userApi", "text", "repliesApi", "card"],
  text: ["text"],
  repliesApi: ["repliesApi", "card"],
  card: ["card"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  verticalStack: "div";
  userApi: typeof ApiRequest;
  text: "div";
  repliesApi: typeof ApiRequest;
  card: typeof RaviReviewCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewCard2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewCard2__VariantsArgs;
    args?: PlasmicReviewCard2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewCard2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewCard2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewCard2__ArgProps,
          internalVariantPropNames: PlasmicReviewCard2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewCard2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "verticalStack") {
    func.displayName = "PlasmicReviewCard2";
  } else {
    func.displayName = `PlasmicReviewCard2.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewCard2 = Object.assign(
  // Top-level PlasmicReviewCard2 renders the root element
  makeNodeComponent("verticalStack"),
  {
    // Helper components rendering sub-elements
    userApi: makeNodeComponent("userApi"),
    text: makeNodeComponent("text"),
    repliesApi: makeNodeComponent("repliesApi"),
    card: makeNodeComponent("card"),

    // Metadata about props expected for PlasmicReviewCard2
    internalVariantProps: PlasmicReviewCard2__VariantProps,
    internalArgProps: PlasmicReviewCard2__ArgProps
  }
);

export default PlasmicReviewCard2;
/* prettier-ignore-end */
