// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: fh6BVdoIxXpv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: rQxw_Usvf1CS/codeComponent
import RaviReviewCard from "../../RaviReviewCard"; // plasmic-import: mdyuGePDb8Fy/component
import ReviewOptions from "../../ReviewOptions"; // plasmic-import: NKhK0RyiR4qB/component
import ReviewReply from "../../ReviewReply"; // plasmic-import: lIT823qV81pb/component
import RaviShare from "../../RaviShare"; // plasmic-import: TkOtksyueyFt/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewCard2.module.css"; // plasmic-import: fh6BVdoIxXpv/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: 70OAewzCU8kD/icon

createPlasmicElementProxy;

export type PlasmicReviewCard2__VariantMembers = {
  raviExpFroDrakam: "raviExpFroDrakam";
};
export type PlasmicReviewCard2__VariantsArgs = {
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
};
type VariantPropType = keyof PlasmicReviewCard2__VariantsArgs;
export const PlasmicReviewCard2__VariantProps = new Array<VariantPropType>(
  "raviExpFroDrakam"
);

export type PlasmicReviewCard2__ArgsType = {
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  doctorSlug?: string;
  doctorId?: string;
  isShowReplyInput?: boolean;
  avgRateValue?: number;
  searchTerm?: string;
  isDoctor?: boolean;
};
type ArgPropType = keyof PlasmicReviewCard2__ArgsType;
export const PlasmicReviewCard2__ArgProps = new Array<ArgPropType>(
  "visitedTag",
  "setTime",
  "docCenter",
  "commentText",
  "like",
  "feedbackId",
  "userId",
  "doctorSlug",
  "doctorId",
  "isShowReplyInput",
  "avgRateValue",
  "searchTerm",
  "isDoctor"
);

export type PlasmicReviewCard2__OverridesType = {
  verticalStack?: Flex__<"div">;
  userApi?: Flex__<typeof ApiRequest>;
  repliesApi?: Flex__<typeof ApiRequest>;
  avatarApi?: Flex__<typeof ApiRequest>;
  card?: Flex__<typeof RaviReviewCard>;
  reviewOptions?: Flex__<typeof ReviewOptions>;
  shareApi?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
  raviShare?: Flex__<typeof RaviShare>;
};

export interface DefaultReviewCard2Props {
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  doctorSlug?: string;
  doctorId?: string;
  isShowReplyInput?: boolean;
  avgRateValue?: number;
  searchTerm?: string;
  isDoctor?: boolean;
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewCard2__RenderFunc(props: {
  variants: PlasmicReviewCard2__VariantsArgs;
  args: PlasmicReviewCard2__ArgsType;
  overrides: PlasmicReviewCard2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          visitedTag: false,
          isShowReplyInput: false,
          avgRateValue: 2,
          isDoctor: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return false;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).some(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )
                  : false;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reportLoadinButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "raviExpFroDrakam",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.raviExpFroDrakam
      },
      {
        path: "userApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "repliesApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isLoadingSendReport",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shareApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shareApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shareApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "card.rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window !== "undefined") {
                  const likedCommentsList =
                    JSON.parse(localStorage.getItem("likedComments")) || [];
                  const commentRate = likedCommentsList.find(
                    comment =>
                      comment.id === $props.feedbackId &&
                      comment.user_id === $ctx.auth.info.id
                  );
                  return commentRate?.rate ?? 0;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "avatarApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "avatarApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "avatarApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"verticalStack"}
      data-plasmic-override={overrides.verticalStack}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.verticalStack,
        {
          [sty.verticalStackraviExpFroDrakam]: hasVariant(
            $state,
            "raviExpFroDrakam",
            "raviExpFroDrakam"
          )
        }
      )}
      dir={"rtl"}
    >
      <ApiRequest
        data-plasmic-name={"userApi"}
        data-plasmic-override={overrides.userApi}
        className={classNames("__wab_instance", sty.userApi)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__i3DGb
            )}
          >
            {
              "\u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a."
            }
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/v1/users/${$props.userId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <ApiRequest
          data-plasmic-name={"repliesApi"}
          data-plasmic-override={overrides.repliesApi}
          className={classNames("__wab_instance", sty.repliesApi)}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["repliesApi", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["repliesApi", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["repliesApi", "data"]).apply(
              null,
              eventArgs
            );
          }}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/ravi/v1/ravi_get_reply?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.feedbackId})~and(show,eq,1)~and(delete,eq,0)~and(description,isnot,null)&limit=1&offset=0&sort=-created_at`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <ApiRequest
            data-plasmic-name={"avatarApi"}
            data-plasmic-override={overrides.avatarApi}
            className={classNames("__wab_instance", sty.avatarApi)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["avatarApi", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["avatarApi", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["avatarApi", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={(() => {
              try {
                return `https://apigw.paziresh24.com/v1/users/image?user_id=${$props.userId}`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {(() => {
              const child$Props = {
                avatarUrl: (() => {
                  try {
                    return $state.avatarApi.data.data.image_url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                avgRateValue: (() => {
                  try {
                    return $props.avgRateValue;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                className: classNames("__wab_instance", sty.card),
                commentText: (() => {
                  try {
                    return (() => {
                      function getHighlightedText(text, highlight) {
                        if (!highlight || !highlight.trim()) {
                          return text;
                        }
                        const escapedHighlight = highlight.replace(
                          /[.*+?^${}()|[\]\\]/g,
                          "\\$&"
                        );
                        const regex = new RegExp(`(${escapedHighlight})`, "gi");
                        return text
                          .split(regex)
                          .map((part, index) =>
                            regex.test(part)
                              ? `<span key={${index}} style="color:#3861FB;border-radius:2px;margin-left:1px;font-weight:bold;">
        ${part}
      </span>`
                              : part
                          )
                          .join("");
                      }
                      const highlightedText = getHighlightedText(
                        $props.commentText,
                        $props.searchTerm
                      );
                      return highlightedText;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                date: (() => {
                  try {
                    return $props.setTime;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                isDoctor: (() => {
                  try {
                    return $props.isDoctor;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })(),
                isLoadingSendReport: (() => {
                  try {
                    return $state.isLoadingSendReport;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })(),
                isVisited: (() => {
                  try {
                    return $props.visitedTag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })(),
                likeCount: (() => {
                  try {
                    return $state.card.rate
                      ? Number($props.like) + 1
                      : $props.like;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                onRate: async value => {
                  const $steps = {};

                  $steps["login"] = !$ctx.auth.isLogin
                    ? (() => {
                        const actionArgs = { args: [] };
                        return $globalActions["AuthGlobalContext.login"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["login"] != null &&
                    typeof $steps["login"] === "object" &&
                    typeof $steps["login"].then === "function"
                  ) {
                    $steps["login"] = await $steps["login"];
                  }

                  $steps["request"] = $ctx.auth.isLogin
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://apigw.paziresh24.com/ravi/v1/like_rate",
                            undefined,
                            (() => {
                              try {
                                return {
                                  feedback_id: $props.feedbackId,
                                  rate: value,
                                  user_id: $ctx.auth.info.id
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["request"] != null &&
                    typeof $steps["request"] === "object" &&
                    typeof $steps["request"].then === "function"
                  ) {
                    $steps["request"] = await $steps["request"];
                  }

                  $steps["localStorage"] =
                    $steps.request?.status == 200
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const likedComment = {
                                  user_id: $ctx.auth.info.id,
                                  id: $props.feedbackId,
                                  rate: value
                                };
                                const likedCommentsList =
                                  JSON.parse(
                                    localStorage.getItem("likedComments")
                                  ) || [];
                                const prevComment = likedCommentsList.find(
                                  comment =>
                                    comment.id === $props.feedbackId &&
                                    comment.user_id === $ctx.auth.info.id
                                );
                                if (prevComment) {
                                  localStorage.setItem(
                                    "likedComments",
                                    JSON.stringify(
                                      likedCommentsList.map(item =>
                                        item.id === prevComment.id
                                          ? likedComment
                                          : item
                                      )
                                    )
                                  );
                                  return true;
                                }
                                likedCommentsList.push(likedComment);
                                localStorage.setItem(
                                  "likedComments",
                                  JSON.stringify(likedCommentsList)
                                );
                                return true;
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["localStorage"] != null &&
                    typeof $steps["localStorage"] === "object" &&
                    typeof $steps["localStorage"].then === "function"
                  ) {
                    $steps["localStorage"] = await $steps["localStorage"];
                  }

                  $steps["updateCardRate"] =
                    $steps.request?.status == 200
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["card", "rate"]
                            },
                            operation: 0,
                            value: value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateCardRate"] != null &&
                    typeof $steps["updateCardRate"] === "object" &&
                    typeof $steps["updateCardRate"].then === "function"
                  ) {
                    $steps["updateCardRate"] = await $steps["updateCardRate"];
                  }
                },
                onRateChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["card", "rate"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                onReplySend: async value => {
                  const $steps = {};

                  $steps["sendMutation"] =
                    value.length > 5
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              (() => {
                                try {
                                  return (
                                    "https://apigw.paziresh24.com/ravi/v1/feedbacks/reply?id=" +
                                    $props.feedbackId
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined,
                              (() => {
                                try {
                                  return {
                                    feedback_id: $props.feedbackId,
                                    description: value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["sendMutation"] != null &&
                    typeof $steps["sendMutation"] === "object" &&
                    typeof $steps["sendMutation"].then === "function"
                  ) {
                    $steps["sendMutation"] = await $steps["sendMutation"];
                  }

                  $steps["n8N"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            (() => {
                              try {
                                return (
                                  "https://apigw.paziresh24.com/ravi/v1/reply-webhook?id=" +
                                  $props.feedbackId
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            (() => {
                              try {
                                return {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId,
                                  reply_text: value
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["n8N"] != null &&
                    typeof $steps["n8N"] === "object" &&
                    typeof $steps["n8N"].then === "function"
                  ) {
                    $steps["n8N"] = await $steps["n8N"];
                  }

                  $steps["toast"] =
                    $steps.sendMutation.status == 200
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f. \u067e\u0633 \u0627\u0632 \u062a\u0627\u0626\u06cc\u062f \u062a\u0648\u0633\u0637 \u067e\u0630\u06cc\u0631\u063424\u060c \u0642\u0627\u0628\u0644 \u0646\u0645\u0627\u06cc\u0634 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f."
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["toast"] != null &&
                    typeof $steps["toast"] === "object" &&
                    typeof $steps["toast"].then === "function"
                  ) {
                    $steps["toast"] = await $steps["toast"];
                  }

                  $steps["splunk"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return {
                                  group: "feedback",
                                  data: {
                                    doctor_id: $props.doctorId,
                                    comment_id: $props.feedbackId,
                                    reply_text: value
                                  },
                                  type: "reply_comment"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Splunk.sendLog"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                },
                onlyDoctor: (() => {
                  try {
                    return (
                      $props.avgRateValue <= 3.5 && $props.avgRateValue !== null
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })(),
                options: (
                  <ReviewOptions
                    data-plasmic-name={"reviewOptions"}
                    data-plasmic-override={overrides.reviewOptions}
                    className={classNames("__wab_instance", sty.reviewOptions)}
                    commentText={(() => {
                      try {
                        return $props.commentText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    doctorSlug={(() => {
                      try {
                        return $props.doctorSlug;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    doctorUserId={(() => {
                      try {
                        return $props.doctorId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    feedbackId={(() => {
                      try {
                        return $props.feedbackId;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    isUserComment={(() => {
                      try {
                        return (
                          $ctx.auth.isLogin &&
                          $ctx.auth.info.id == $props.userId
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                  />
                ),

                rate: generateStateValueProp($state, ["card", "rate"]),
                replies: (() => {
                  try {
                    return $state.repliesApi.data.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                replies2: (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qg4Xk)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.repliesApi.data.list;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <ReviewReply
                          className={classNames(
                            "__wab_instance",
                            sty.reviewReply__agS
                          )}
                          commentText={(() => {
                            try {
                              return currentItem.description || "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          doctorId={(() => {
                            try {
                              return $props.doctorId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          doctorSlug={(() => {
                            try {
                              return currentItem.doctor_slug;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          userId={(() => {
                            try {
                              return currentItem.user_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      );
                    })}
                  </Stack__>
                ),
                replyCard: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jOxz)}
                  >
                    {(() => {
                      try {
                        return $state.repliesApi.data.list.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <ReviewReply
                        className={classNames(
                          "__wab_instance",
                          sty.reviewReply__ploLv
                        )}
                        commentText={(() => {
                          try {
                            return (
                              $state.repliesApi.data.list[0].description || ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        doctorId={(() => {
                          try {
                            return $props.doctorId;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        doctorSlug={(() => {
                          try {
                            return $props.doctorSlug;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        feedbackId={(() => {
                          try {
                            return $state.repliesApi.data.list[0].Id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        userId={(() => {
                          try {
                            return $state.repliesApi.data.list[0].user_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    ) : null}
                  </div>
                ),
                share: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7Yq6T)}
                  >
                    <ApiRequest
                      data-plasmic-name={"shareApi"}
                      data-plasmic-override={overrides.shareApi}
                      className={classNames("__wab_instance", sty.shareApi)}
                      errorDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kwhxf
                          )}
                        >
                          {"Error fetching data"}
                        </div>
                      }
                      loadingDisplay={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fLps9
                          )}
                        >
                          <Icon34Icon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        </div>
                      }
                      method={"GET"}
                      onError={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "shareApi",
                          "error"
                        ]).apply(null, eventArgs);
                      }}
                      onLoading={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "shareApi",
                          "loading"
                        ]).apply(null, eventArgs);
                      }}
                      onSuccess={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "shareApi",
                          "data"
                        ]).apply(null, eventArgs);
                      }}
                      url={(() => {
                        try {
                          return `https://apigw.paziresh24.com/ravi/v1/share_comment?slug=${$props.doctorSlug}&id=${$props.feedbackId}`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <RaviShare
                        data-plasmic-name={"raviShare"}
                        data-plasmic-override={overrides.raviShare}
                        className={classNames("__wab_instance", sty.raviShare)}
                        onClickCopy={async () => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return navigator.share({
                                      url: $state.shareApi.data.url,
                                      text: "این نظر رو در پذیرش24 ببین \uD83D\uDC47"
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-copy"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }
                        }}
                        onClickEitaa={async () => {
                          const $steps = {};

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-eeta"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return `https://eitaa.com/share/url?url=${$state.shareApi.data.url}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onClickTelegram={async () => {
                          const $steps = {};

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-telegram"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return `https://telegram.me/share/url?url=${$state.shareApi.data.url}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onClickTwitter={async () => {
                          const $steps = {};

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-tweeter"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return `https://twitter.com/intent/tweet/?url=${$state.shareApi.data.url}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        onClickWhatsup={async () => {
                          const $steps = {};

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    (() => {
                                      try {
                                        return {
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-whatsapp"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions["Splunk.sendLog"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }

                          $steps["goToPage"] = true
                            ? (() => {
                                const actionArgs = {
                                  destination: (() => {
                                    try {
                                      return `https://wa.me/?text=${$state.shareApi.data.url}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }
                        }}
                        shareUrl={(() => {
                          try {
                            return $state.shareApi.data.url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </ApiRequest>
                  </div>
                ),
                showReplies: (() => {
                  try {
                    return $state.repliesApi.data.list.length > 1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })(),
                subTitle: (() => {
                  try {
                    return $props.docCenter;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                userId: (() => {
                  try {
                    return $props.userId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                userName: (() => {
                  try {
                    return $state.userApi.data.users[0].name || "کاربر بی نام";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "card.rate",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return (() => {
                            if (typeof window !== "undefined") {
                              const likedCommentsList =
                                JSON.parse(
                                  localStorage.getItem("likedComments")
                                ) || [];
                              const commentRate = likedCommentsList.find(
                                comment =>
                                  comment.id === $props.feedbackId &&
                                  comment.user_id === $ctx.auth.info.id
                              );
                              return commentRate?.rate ?? 0;
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                []
              );
              return (
                <RaviReviewCard
                  data-plasmic-name={"card"}
                  data-plasmic-override={overrides.card}
                  {...child$Props}
                />
              );
            })()}
          </ApiRequest>
        </ApiRequest>
      </ApiRequest>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  verticalStack: [
    "verticalStack",
    "userApi",
    "repliesApi",
    "avatarApi",
    "card",
    "reviewOptions",
    "shareApi",
    "svg",
    "raviShare"
  ],
  userApi: [
    "userApi",
    "repliesApi",
    "avatarApi",
    "card",
    "reviewOptions",
    "shareApi",
    "svg",
    "raviShare"
  ],
  repliesApi: [
    "repliesApi",
    "avatarApi",
    "card",
    "reviewOptions",
    "shareApi",
    "svg",
    "raviShare"
  ],
  avatarApi: [
    "avatarApi",
    "card",
    "reviewOptions",
    "shareApi",
    "svg",
    "raviShare"
  ],
  card: ["card", "reviewOptions", "shareApi", "svg", "raviShare"],
  reviewOptions: ["reviewOptions"],
  shareApi: ["shareApi", "svg", "raviShare"],
  svg: ["svg"],
  raviShare: ["raviShare"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  verticalStack: "div";
  userApi: typeof ApiRequest;
  repliesApi: typeof ApiRequest;
  avatarApi: typeof ApiRequest;
  card: typeof RaviReviewCard;
  reviewOptions: typeof ReviewOptions;
  shareApi: typeof ApiRequest;
  svg: "svg";
  raviShare: typeof RaviShare;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewCard2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewCard2__VariantsArgs;
    args?: PlasmicReviewCard2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewCard2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewCard2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewCard2__ArgProps,
          internalVariantPropNames: PlasmicReviewCard2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewCard2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "verticalStack") {
    func.displayName = "PlasmicReviewCard2";
  } else {
    func.displayName = `PlasmicReviewCard2.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewCard2 = Object.assign(
  // Top-level PlasmicReviewCard2 renders the root element
  makeNodeComponent("verticalStack"),
  {
    // Helper components rendering sub-elements
    userApi: makeNodeComponent("userApi"),
    repliesApi: makeNodeComponent("repliesApi"),
    avatarApi: makeNodeComponent("avatarApi"),
    card: makeNodeComponent("card"),
    reviewOptions: makeNodeComponent("reviewOptions"),
    shareApi: makeNodeComponent("shareApi"),
    svg: makeNodeComponent("svg"),
    raviShare: makeNodeComponent("raviShare"),

    // Metadata about props expected for PlasmicReviewCard2
    internalVariantProps: PlasmicReviewCard2__VariantProps,
    internalArgProps: PlasmicReviewCard2__ArgProps
  }
);

export default PlasmicReviewCard2;
/* prettier-ignore-end */
