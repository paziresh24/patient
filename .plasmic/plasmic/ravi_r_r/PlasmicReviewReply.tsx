/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: lIT823qV81pb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/common/fragment/components/api-request"; // plasmic-import: rQxw_Usvf1CS/codeComponent
import RaviReviewReply from "../../RaviReviewReply"; // plasmic-import: ztZnhXmFcIt0/component
import ReviewOptions from "../../ReviewOptions"; // plasmic-import: NKhK0RyiR4qB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewReply.module.css"; // plasmic-import: lIT823qV81pb/css

createPlasmicElementProxy;

export type PlasmicReviewReply__VariantMembers = {};
export type PlasmicReviewReply__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewReply__VariantsArgs;
export const PlasmicReviewReply__VariantProps = new Array<VariantPropType>();

export type PlasmicReviewReply__ArgsType = {
  userId?: string;
  commentText?: string;
  doctorSlug?: string;
  doctorId?: string;
  feedbackId?: string;
};
type ArgPropType = keyof PlasmicReviewReply__ArgsType;
export const PlasmicReviewReply__ArgProps = new Array<ArgPropType>(
  "userId",
  "commentText",
  "doctorSlug",
  "doctorId",
  "feedbackId"
);

export type PlasmicReviewReply__OverridesType = {
  root?: Flex__<"div">;
  userApi?: Flex__<typeof ApiRequest>;
  avatarApi?: Flex__<typeof ApiRequest>;
  raviReviewReply?: Flex__<typeof RaviReviewReply>;
  reviewOptions?: Flex__<typeof ReviewOptions>;
};

export interface DefaultReviewReplyProps {
  userId?: string;
  commentText?: string;
  doctorSlug?: string;
  doctorId?: string;
  feedbackId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewReply__RenderFunc(props: {
  variants: PlasmicReviewReply__VariantsArgs;
  args: PlasmicReviewReply__ArgsType;
  overrides: PlasmicReviewReply__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "avatarApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "avatarApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "avatarApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"userApi"}
        data-plasmic-override={overrides.userApi}
        className={classNames("__wab_instance", sty.userApi)}
        errorDisplay={null}
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["userApi", "data"]).apply(
            null,
            eventArgs
          );
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/v1/users/${$props.userId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <ApiRequest
          data-plasmic-name={"avatarApi"}
          data-plasmic-override={overrides.avatarApi}
          className={classNames("__wab_instance", sty.avatarApi)}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["avatarApi", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["avatarApi", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["avatarApi", "data"]).apply(
              null,
              eventArgs
            );
          }}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/v1/users/image?user_id=${$props.userId}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <RaviReviewReply
            data-plasmic-name={"raviReviewReply"}
            data-plasmic-override={overrides.raviReviewReply}
            avatarUrl={(() => {
              try {
                return $state.avatarApi.data.data.image_url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.raviReviewReply)}
            commentText={(() => {
              try {
                return $props.commentText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isDoctor={(() => {
              try {
                return $props.userId == $props.doctorId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()}
            userName={(() => {
              try {
                return (() => {
                  if ($props.userId == $props.doctorId) {
                    return `${$state.userApi.data.users[0].name} ${$state.userApi.data.users[0].family}`;
                  }
                  return $state.userApi.data.users[0].name || "کاربر بدون نام";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <ReviewOptions
              data-plasmic-name={"reviewOptions"}
              data-plasmic-override={overrides.reviewOptions}
              className={classNames("__wab_instance", sty.reviewOptions)}
              commentText={(() => {
                try {
                  return $props.commentText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              doctorSlug={(() => {
                try {
                  return $props.doctorSlug;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              doctorUserId={(() => {
                try {
                  return $props.doctorId;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              feedbackId={(() => {
                try {
                  return $props.feedbackId;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              isUserComment={(() => {
                try {
                  return (
                    $ctx.auth.isLogin && $ctx.auth.info.id == $props.userId
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
            />
          </RaviReviewReply>
        </ApiRequest>
      </ApiRequest>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "userApi", "avatarApi", "raviReviewReply", "reviewOptions"],
  userApi: ["userApi", "avatarApi", "raviReviewReply", "reviewOptions"],
  avatarApi: ["avatarApi", "raviReviewReply", "reviewOptions"],
  raviReviewReply: ["raviReviewReply", "reviewOptions"],
  reviewOptions: ["reviewOptions"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  userApi: typeof ApiRequest;
  avatarApi: typeof ApiRequest;
  raviReviewReply: typeof RaviReviewReply;
  reviewOptions: typeof ReviewOptions;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewReply__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewReply__VariantsArgs;
    args?: PlasmicReviewReply__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewReply__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReviewReply__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewReply__ArgProps,
          internalVariantPropNames: PlasmicReviewReply__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewReply__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReviewReply";
  } else {
    func.displayName = `PlasmicReviewReply.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewReply = Object.assign(
  // Top-level PlasmicReviewReply renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    userApi: makeNodeComponent("userApi"),
    avatarApi: makeNodeComponent("avatarApi"),
    raviReviewReply: makeNodeComponent("raviReviewReply"),
    reviewOptions: makeNodeComponent("reviewOptions"),

    // Metadata about props expected for PlasmicReviewReply
    internalVariantProps: PlasmicReviewReply__VariantProps,
    internalArgProps: PlasmicReviewReply__ArgProps
  }
);

export default PlasmicReviewReply;
/* prettier-ignore-end */
