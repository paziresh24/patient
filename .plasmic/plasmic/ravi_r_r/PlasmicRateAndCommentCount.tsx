// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: u3Jgb_UfiULc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicRateAndCommentCount.module.css"; // plasmic-import: u3Jgb_UfiULc/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: SNOnlPCvguG2/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: nlR9y6ohoS5X/icon

createPlasmicElementProxy;

export type PlasmicRateAndCommentCount__VariantMembers = {};
export type PlasmicRateAndCommentCount__VariantsArgs = {};
type VariantPropType = keyof PlasmicRateAndCommentCount__VariantsArgs;
export const PlasmicRateAndCommentCount__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRateAndCommentCount__ArgsType = {
  rateCount?: string;
  rate?: number;
};
type ArgPropType = keyof PlasmicRateAndCommentCount__ArgsType;
export const PlasmicRateAndCommentCount__ArgProps = new Array<ArgPropType>(
  "rateCount",
  "rate"
);

export type PlasmicRateAndCommentCount__OverridesType = {
  root?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
};

export interface DefaultRateAndCommentCountProps {
  rateCount?: string;
  rate?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRateAndCommentCount__RenderFunc(props: {
  variants: PlasmicRateAndCommentCount__VariantsArgs;
  args: PlasmicRateAndCommentCount__ArgsType;
  overrides: PlasmicRateAndCommentCount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__aawEq)}
      >
        <Icon2Icon
          className={classNames(projectcss.all, sty.svg__yhwpm)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eMUo
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.rate;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "%80 ";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pYuZ
          )}
        >
          {"\u0627\u0632 \u06f5"}
        </div>
      </Stack__>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ePvxi
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return `رضایت (${$props.rateCount} نظر)`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u0631\u0636\u0627\u06cc\u062a (1737 \u0646\u0638\u0631)";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Popover
        data-plasmic-name={"popoverCore"}
        data-plasmic-override={overrides.popoverCore}
        className={classNames("__wab_instance", sty.popoverCore)}
        onOpenChange={generateStateOnChangeProp($state, [
          "popoverCore",
          "open"
        ])}
        open={generateStateValueProp($state, ["popoverCore", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__grWqQ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qOs7Z
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    '\u062f\u0631\u0635\u062f \u0631\u0636\u0627\u06cc\u062a\u060c \u062d\u0627\u0635\u0644 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0633\u0647 \u067e\u0627\u0631\u0627\u0645\u062a\u0631 "'
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u0628\u0631\u062e\u0648\u0631\u062f"}
                </span>
                <React.Fragment>{'"\u060c "'}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u062a\u0648\u0636\u06cc\u062d"}
                </span>
                <React.Fragment>{'" \u0648 "'}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u0645\u0647\u0627\u0631\u062a \u0648 \u062a\u062e\u0635\u0635"
                  }
                </span>
                <React.Fragment>
                  {
                    '" \u067e\u0632\u0634\u06a9 \u0645\u06cc \u0628\u0627\u0634\u062f \u06a9\u0647 \u0647\u0645\u06af\u06cc \u062a\u0648\u0633\u0637 \u0628\u06cc\u0645\u0627\u0631\u0627\u0646 \u0627\u0639\u0644\u0627\u0645 \u06af\u0631\u062f\u06cc\u062f\u0647 \u0627\u0646\u062f.'
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>
        }
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens
        )}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ref8W)}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return event.stopPropagation();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <Icon5Icon
            className={classNames(projectcss.all, sty.svg___6Itud)}
            role={"img"}
          />
        </div>
      </Popover>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "popoverCore"],
  popoverCore: ["popoverCore"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popoverCore: typeof Popover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRateAndCommentCount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRateAndCommentCount__VariantsArgs;
    args?: PlasmicRateAndCommentCount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRateAndCommentCount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRateAndCommentCount__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRateAndCommentCount__ArgProps,
          internalVariantPropNames: PlasmicRateAndCommentCount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRateAndCommentCount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRateAndCommentCount";
  } else {
    func.displayName = `PlasmicRateAndCommentCount.${nodeName}`;
  }
  return func;
}

export const PlasmicRateAndCommentCount = Object.assign(
  // Top-level PlasmicRateAndCommentCount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popoverCore: makeNodeComponent("popoverCore"),

    // Metadata about props expected for PlasmicRateAndCommentCount
    internalVariantProps: PlasmicRateAndCommentCount__VariantProps,
    internalArgProps: PlasmicRateAndCommentCount__ArgProps
  }
);

export default PlasmicRateAndCommentCount;
/* prettier-ignore-end */
