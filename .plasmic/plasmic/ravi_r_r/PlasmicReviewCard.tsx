// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: hjUuvN6lhrZV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import Chip from "../../Chip"; // plasmic-import: 1bFBcAoH0lNN/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import ReplyCard from "../../ReplyCard"; // plasmic-import: qY29Y1sogsUa/component
import MultilineTextInput from "../../MultilineTextInput"; // plasmic-import: CZBpNouNw7Ui/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewCard.module.css"; // plasmic-import: hjUuvN6lhrZV/css

import MenuIcon from "../fragment_icons/icons/PlasmicIcon__Menu"; // plasmic-import: dmfb3Ga2IoVt/icon
import ShareIcon from "../fragment_icons/icons/PlasmicIcon__Share"; // plasmic-import: NSxX1Iy4jDVL/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: moTm-5qth65g/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: OcnxMK5rW620/icon
import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: SNOnlPCvguG2/icon
import ThumbDownIcon from "../fragment_icons/icons/PlasmicIcon__ThumbDown"; // plasmic-import: jHvDymIOvRnf/icon
import ThumbUpIcon from "../fragment_icons/icons/PlasmicIcon__ThumbUp"; // plasmic-import: GRY2zHJ6uxOn/icon
import RepliesIcon from "../fragment_icons/icons/PlasmicIcon__Replies"; // plasmic-import: BamIPHX72k5k/icon
import HeartIcon from "../fragment_icons/icons/PlasmicIcon__Heart"; // plasmic-import: WTtCf_1I-uMv/icon
import BoldheartIcon from "../fragment_icons/icons/PlasmicIcon__Boldheart"; // plasmic-import: eZfYsLpdWQA_/icon

import __fn_splunkEvent from "@/common/services/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

createPlasmicElementProxy;

export type PlasmicReviewCard__VariantMembers = {};
export type PlasmicReviewCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewCard__VariantsArgs;
export const PlasmicReviewCard__VariantProps = new Array<VariantPropType>();

export type PlasmicReviewCard__ArgsType = {
  userName?: string;
  visitedTag?: boolean;
  userProfile?: string;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
};
type ArgPropType = keyof PlasmicReviewCard__ArgsType;
export const PlasmicReviewCard__ArgProps = new Array<ArgPropType>(
  "userName",
  "visitedTag",
  "userProfile",
  "setTime",
  "docCenter",
  "recommended",
  "commentText",
  "like",
  "feedbackId",
  "userId",
  "explanationOfIssue",
  "doctorEncounter",
  "qualityOfTreatment",
  "doctorSlug",
  "replyToFeedbackId"
);

export type PlasmicReviewCard__OverridesType = {
  اردنماشنظر?: Flex__<"div">;
  سهنقطه?: Flex__<typeof Popover>;
  dialog3?: Flex__<typeof Dialog>;
  edditTextBox?: Flex__<"textarea">;
  dialog4?: Flex__<typeof Dialog>;
  نامتتارخ?: Flex__<"div">;
  userAvatar?: Flex__<typeof Avatar>;
  chip?: Flex__<typeof Chip>;
  متننظر?: Flex__<"div">;
  dialog2?: Flex__<typeof Dialog>;
  نظربشتراز1?: Flex__<"div">;
  لارورت?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  reportText?: Flex__<"textarea">;
  رلا?: Flex__<"div">;
  replyText?: Flex__<"textarea">;
  multilineTextInput?: Flex__<typeof MultilineTextInput>;
};

export interface DefaultReviewCardProps {
  userName?: string;
  visitedTag?: boolean;
  userProfile?: string;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
  className?: string;
}

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewCard__RenderFunc(props: {
  variants: PlasmicReviewCard__VariantsArgs;
  args: PlasmicReviewCard__ArgsType;
  overrides: PlasmicReviewCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          visitedTag: false,
          recommended: false
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "سهنقطه.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "replyText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "isLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return false;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).some(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )
                  : false;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportLoadinButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "multilineTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "edditTextBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "editLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={
        "\u0627\u0631\u062f\u0646\u0645\u0627\u0634\u0646\u0638\u0631"
      }
      data-plasmic-override={overrides.اردنماشنظر}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.اردنماشنظر
      )}
      dir={"rtl"}
    >
      <Popover
        data-plasmic-name={"\u0633\u0647\u0646\u0642\u0637\u0647"}
        data-plasmic-override={overrides.سهنقطه}
        className={classNames("__wab_instance", sty.سهنقطه)}
        onOpenChange={generateStateOnChangeProp($state, ["سهنقطه", "open"])}
        open={generateStateValueProp($state, ["سهنقطه", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__mf64S)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vwR23)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return navigator.share({
                            url:
                              window.location.href +
                              `#comment-${$props.feedbackId}`
                          });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["splunk"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $$.splunkEvent({
                            group: "feedback",
                            data: {
                              doctor_id: $props.doctorId,
                              comment_id: $props.feedbackId
                            },
                            type: "share_comment",
                            token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                          });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["splunk"] != null &&
                  typeof $steps["splunk"] === "object" &&
                  typeof $steps["splunk"].then === "function"
                ) {
                  $steps["splunk"] = await $steps["splunk"];
                }
              }}
            >
              <ShareIcon
                className={classNames(projectcss.all, sty.svg__ycTkd)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cuUPa
                )}
              >
                {
                  "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__khS3Q)}
            >
              {(() => {
                try {
                  return (
                    $ctx.auth.isLogin && $ctx.auth.info.id == $props.userId
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Dialog
                  data-plasmic-name={"dialog3"}
                  data-plasmic-override={overrides.dialog3}
                  body={
                    <React.Fragment>
                      <textarea
                        data-plasmic-name={"edditTextBox"}
                        data-plasmic-override={overrides.edditTextBox}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.edditTextBox
                        )}
                        onChange={e => {
                          generateStateOnChangeProp($state, [
                            "edditTextBox",
                            "value"
                          ])(e.target.value);
                        }}
                        placeholder={``}
                        ref={ref => {
                          $refs["edditTextBox"] = ref;
                        }}
                        value={
                          generateStateValueProp($state, [
                            "edditTextBox",
                            "value"
                          ]) ?? ""
                        }
                      />

                      <Button
                        children2={"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                        className={classNames(
                          "__wab_instance",
                          sty.button__nsoe4
                        )}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mTUf0
                            )}
                            role={"img"}
                          />
                        }
                        loading={(() => {
                          try {
                            return $state.editLoadingButton;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["loading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editLoadingButton"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["loading"] != null &&
                            typeof $steps["loading"] === "object" &&
                            typeof $steps["loading"].then === "function"
                          ) {
                            $steps["loading"] = await $steps["loading"];
                          }

                          $steps["request"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return fetch(
                                      "https://apigw.paziresh24.com/v1/feedbacks/" +
                                        $props.feedbackId +
                                        "/",
                                      {
                                        headers: {
                                          "Content-Type": "application/json"
                                        },
                                        method: "PATCH",
                                        body: JSON.stringify({
                                          description:
                                            $state.edditTextBox.value,
                                          like: $props.recommended
                                        }),
                                        credentials: "include"
                                      }
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["request"] != null &&
                            typeof $steps["request"] === "object" &&
                            typeof $steps["request"].then === "function"
                          ) {
                            $steps["request"] = await $steps["request"];
                          }

                          $steps["offLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editLoadingButton"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["offLoading"] != null &&
                            typeof $steps["offLoading"] === "object" &&
                            typeof $steps["offLoading"].then === "function"
                          ) {
                            $steps["offLoading"] = await $steps["offLoading"];
                          }

                          $steps["toast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0639\u062f \u0627\u0632 \u0628\u0631\u0631\u0633\u06cc \u062a\u0648\u0633\u0637 \u067e\u0630\u06cc\u0631\u063424\u060c \u062f\u0631 \u0635\u0648\u0631\u062a \u0627\u0645\u06a9\u0627\u0646 \u0645\u0646\u062a\u0634\u0631 \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
                                    "top-right",
                                    4999
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["toast"] != null &&
                            typeof $steps["toast"] === "object" &&
                            typeof $steps["toast"].then === "function"
                          ) {
                            $steps["toast"] = await $steps["toast"];
                          }

                          $steps["close"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog3", "open"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["close"] != null &&
                            typeof $steps["close"] === "object" &&
                            typeof $steps["close"].then === "function"
                          ) {
                            $steps["close"] = await $steps["close"];
                          }

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $$.splunkEvent({
                                      group: "feedback",
                                      data: {
                                        doctor_id: $props.doctorId,
                                        comment_id: $props.feedbackId,
                                        edit_text: $state.edditTextBox.value
                                      },
                                      type: "edit_comment",
                                      token:
                                        "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }
                        }}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__p4Ytw
                            )}
                            role={"img"}
                          />
                        }
                      />
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.dialog3)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "dialog3",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["dialog3", "open"])}
                  title={
                    "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0646\u0638\u0631"
                  }
                  trigger={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gt7U)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg___8ZJpu)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ttly5
                        )}
                      >
                        {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                      </div>
                    </Stack__>
                  }
                />
              ) : null}
            </Stack__>
            {(() => {
              try {
                return $ctx.auth.isLogin && $ctx.auth.info.id == $props.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lNuZw)}
              >
                <Dialog
                  data-plasmic-name={"dialog4"}
                  data-plasmic-override={overrides.dialog4}
                  body={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uRzBu)}
                    >
                      <Button
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rfy6D
                            )}
                          >
                            {"\u062d\u0630\u0641"}
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__fD6
                        )}
                        color={"red"}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oBkZj
                            )}
                            role={"img"}
                          />
                        }
                        loading={(() => {
                          try {
                            return $state.deleteLoadingButton;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["loading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["deleteLoadingButton"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["loading"] != null &&
                            typeof $steps["loading"] === "object" &&
                            typeof $steps["loading"].then === "function"
                          ) {
                            $steps["loading"] = await $steps["loading"];
                          }

                          $steps["request"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return fetch(
                                      "https://apigw.paziresh24.com/v1/feedbacks/" +
                                        $props.feedbackId +
                                        "/",
                                      {
                                        method: "DELETE",
                                        credentials: "include"
                                      }
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["request"] != null &&
                            typeof $steps["request"] === "object" &&
                            typeof $steps["request"].then === "function"
                          ) {
                            $steps["request"] = await $steps["request"];
                          }

                          $steps["updateDeleteLoadingButton"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["deleteLoadingButton"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDeleteLoadingButton"] != null &&
                            typeof $steps["updateDeleteLoadingButton"] ===
                              "object" &&
                            typeof $steps["updateDeleteLoadingButton"].then ===
                              "function"
                          ) {
                            $steps["updateDeleteLoadingButton"] = await $steps[
                              "updateDeleteLoadingButton"
                            ];
                          }

                          $steps["toast"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062d\u0630\u0641 \u0634\u062f.",
                                    "top-right",
                                    5000
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["toast"] != null &&
                            typeof $steps["toast"] === "object" &&
                            typeof $steps["toast"].then === "function"
                          ) {
                            $steps["toast"] = await $steps["toast"];
                          }

                          $steps["close"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog4", "open"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["close"] != null &&
                            typeof $steps["close"] === "object" &&
                            typeof $steps["close"].then === "function"
                          ) {
                            $steps["close"] = await $steps["close"];
                          }

                          $steps["splunk"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $$.splunkEvent({
                                      group: "feedback",
                                      data: {
                                        doctor_id: $props.doctorId,
                                        comment_id: $props.feedbackId
                                      },
                                      type: "delete_comment",
                                      token:
                                        "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["splunk"] != null &&
                            typeof $steps["splunk"] === "object" &&
                            typeof $steps["splunk"].then === "function"
                          ) {
                            $steps["splunk"] = await $steps["splunk"];
                          }
                        }}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ezf8
                            )}
                            role={"img"}
                          />
                        }
                      />

                      <Button
                        children2={"\u0627\u0646\u0635\u0631\u0627\u0641"}
                        className={classNames(
                          "__wab_instance",
                          sty.button__rEncW
                        )}
                        color={"red"}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__re2O6
                            )}
                            role={"img"}
                          />
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["close"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog4", "open"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["close"] != null &&
                            typeof $steps["close"] === "object" &&
                            typeof $steps["close"].then === "function"
                          ) {
                            $steps["close"] = await $steps["close"];
                          }
                        }}
                        outline={true}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__chO6C
                            )}
                            role={"img"}
                          />
                        }
                      />
                    </Stack__>
                  }
                  className={classNames("__wab_instance", sty.dialog4)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "dialog4",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["dialog4", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Re7R
                      )}
                    >
                      {
                        "\u0622\u06cc\u0627 \u0627\u0632 \u062d\u0630\u0641 \u0646\u0638\u0631 \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0647\u0633\u062a\u06cc\u062f\u061f"
                      }
                    </div>
                  }
                  trigger={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hRt2)}
                    >
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__lcvor)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ur5Y3
                        )}
                      >
                        {"\u062d\u0630\u0641"}
                      </div>
                    </Stack__>
                  }
                />
              </Stack__>
            ) : null}
          </div>
        }
        side={"bottom"}
        slideIn={true}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__a8AOx)}>
          <MenuIcon
            className={classNames(projectcss.all, sty.svg__ahbGw)}
            role={"img"}
          />
        </div>
      </Popover>
      <div
        data-plasmic-name={"\u0646\u0627\u0645\u062a\u062a\u0627\u0631\u062e"}
        data-plasmic-override={overrides.نامتتارخ}
        className={classNames(projectcss.all, sty.نامتتارخ)}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__n7A1U)}
          onClick={async event => {
            const $steps = {};

            $steps["goToPage"] = true
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return "/ravi/" + $props.userId + "/";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        >
          <Avatar
            data-plasmic-name={"userAvatar"}
            data-plasmic-override={overrides.userAvatar}
            className={classNames("__wab_instance", sty.userAvatar)}
            name={(() => {
              try {
                return $props.userName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            src={(() => {
              try {
                return $props.userProfile;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hJuBl)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mTvMh)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2VaV1
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.userName;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0622\u0646\u0627\u0647\u06cc\u062a\u0627 \u0645\u0646\u0635\u0648\u0631\u06cc";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return $props.visitedTag;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Chip
                data-plasmic-name={"chip"}
                data-plasmic-override={overrides.chip}
                className={classNames("__wab_instance", sty.chip)}
                color={"gray"}
                content={"\u0648\u06cc\u0632\u06cc\u062a \u0634\u062f\u0647"}
                rounded={true}
                size={"small"}
                slot={
                  <InfoIcon
                    className={classNames(projectcss.all, sty.svg__h3Tzz)}
                    role={"img"}
                  />
                }
              >
                <SmileIcon
                  className={classNames(projectcss.all, sty.svg__lsXDn)}
                  role={"img"}
                />
              </Chip>
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vdK60)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aF3Jg
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.setTime;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u062f\u06cc\u0631\u0648\u0632";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return !!$props.docCenter;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yTb2M
                )}
              >
                {"|"}
              </div>
            ) : null}
            {(() => {
              try {
                return $props.docCenter !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pm0Q5
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.docCenter;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0645\u0637\u0628 \u062f\u06a9\u062a\u0631 \u0628\u0627\u0628\u06a9 \u0632\u0645\u0627\u0646\u06cc";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
          </Stack__>
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"\u0645\u062a\u0646\u0646\u0638\u0631"}
        data-plasmic-override={overrides.متننظر}
        hasGap={true}
        className={classNames(projectcss.all, sty.متننظر)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___53H3H)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cAdEv)}
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg__cvunB)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rnD7L
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      (+$props.qualityOfTreatment +
                        +$props.doctorEncounter +
                        +$props.explanationOfIssue) /
                      3
                    ).toFixed(1);
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "%80 ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          {(() => {
            try {
              return !$props.recommended;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zoUnv)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wZ5Sn
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u0631\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0646\u0645\u06cc \u06a9\u0646\u0645"
                }
              </div>
              <ThumbDownIcon
                className={classNames(projectcss.all, sty.svg__ecNXv)}
                role={"img"}
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $props.recommended;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zLXc8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___62Bj
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u0631\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0645\u06cc\u06a9\u0646\u0645"
                }
              </div>
              <ThumbUpIcon
                className={classNames(projectcss.all, sty.svg__a8Ad)}
                role={"img"}
              />
            </Stack__>
          ) : null}
        </Stack__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__le3Kw
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $props.commentText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u06a9\u0627\u0645\u0644\u0627 \u0627\u0632 \u0628\u0631\u062e\u0648\u0631\u062f \u062e\u0627\u0646\u0645 \u062f\u06a9\u062a\u0631 \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u0645 \u062e\u06cc\u0644\u06cc \u0648\u0642\u062a \u06af\u0630\u0627\u0634\u062a\u0646 \u0648 \u0635\u0628\u0648\u0631\u06cc \u06a9\u0631\u062f\u0646 \u062a\u0627 \u0628\u06cc\u0645\u0627\u0631\u06cc\u0645 \u0631\u0648 \u062a\u0634\u062e\u06cc\u0635 \u0628\u062f\u0646 \u062f\u0631\u0645\u0627\u0646\u0645 \u0631\u0648 \u062a\u0627\u0632\u0647 \u0634\u0631\u0648\u0639 \u06a9\u0631\u062f\u0645 \u0628\u0647 \u06a9\u0645\u06a9\u0634\u0648\u0646 \u0648 \u0645\u0637\u0645\u0639\u0646\u0645 \u06a9\u0647 \u062c\u0648\u0627\u0628 \u0645\u06cc\u06af\u06cc\u0631\u0645 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u06a9\u0646\u0645 \u0627\u06af\u0631 \u0645\u0634\u06a9\u0644\u06cc \u062f\u0627\u0631\u06cc\u0646 \u0627\u0632 \u0627\u06cc\u0634\u0648\u0646 \u06a9\u0645\u06a9 \u0628\u06af\u06cc\u0631\u06cc\u0646";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
      </Stack__>
      <DataFetcher
        className={classNames("__wab_instance", sty.httpRestApiFetcher__dvNua)}
        dataName={"fetchedData"}
        errorDisplay={null}
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={null}
        method={"GET"}
        noLayout={false}
        previewSpinner={false}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/ravi/v1/feedbacks?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.replyToFeedbackId})&offset=0&sort=-created_at`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <Dialog
              data-plasmic-name={"dialog2"}
              data-plasmic-override={overrides.dialog2}
              body={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x126B)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $ctx.fetchedData.list;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <ReplyCard
                        className={classNames(
                          "__wab_instance",
                          sty.replyCard__sQuYr
                        )}
                        key={currentIndex}
                        replyText={(() => {
                          try {
                            return currentItem.description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        userName={(() => {
                          try {
                            return (
                              currentItem.user_display_name || "کاربر بدون نام"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        userProfile={(() => {
                          try {
                            return currentItem.user_image;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
              }
              className={classNames("__wab_instance", sty.dialog2)}
              onOpenChange={generateStateOnChangeProp($state, [
                "dialog2",
                "open"
              ])}
              open={generateStateValueProp($state, ["dialog2", "open"])}
              title={"\u067e\u0627\u0633\u062e \u0647\u0627 "}
              trigger={
                (() => {
                  try {
                    return $ctx.fetchedData.list.length > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={
                      "\u0646\u0638\u0631\u0628\u0634\u062a\u0631\u0627\u06321"
                    }
                    data-plasmic-override={overrides.نظربشتراز1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.نظربشتراز1)}
                  >
                    <RepliesIcon
                      className={classNames(projectcss.all, sty.svg___34YvM)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fw275
                      )}
                    >
                      {
                        "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                      }
                    </div>
                  </Stack__>
                ) : null
              }
            />
          )}
        </DataCtxReader__>
      </DataFetcher>
      <Stack__
        as={"div"}
        data-plasmic-name={"\u0644\u0627\u0631\u0648\u0631\u062a"}
        data-plasmic-override={overrides.لارورت}
        hasGap={true}
        className={classNames(projectcss.all, sty.لارورت)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qhLa0)}
          onClick={async event => {
            const $steps = {};

            $steps["updateIsLike"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isLike"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsLike"] != null &&
              typeof $steps["updateIsLike"] === "object" &&
              typeof $steps["updateIsLike"].then === "function"
            ) {
              $steps["updateIsLike"] = await $steps["updateIsLike"];
            }

            $steps["runCode"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const formData = new FormData();
                        formData.append("feedback_id", $props.feedbackId);
                        return fetch(
                          "https://www.paziresh24.com/api/likeOrDislikeFeedback/",
                          {
                            method: "POST",
                            body: formData,
                            credentials: "include"
                          }
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["saveInLocalStoreg"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if ($state.isLike) {
                          const likedComment = {
                            user_id: $ctx.auth.info.id,
                            id: $props.feedbackId
                          };
                          const likedCommentsList =
                            JSON.parse(localStorage.getItem("likedComments")) ||
                            [];
                          likedCommentsList.push(likedComment);
                          localStorage.setItem(
                            "likedComments",
                            JSON.stringify(likedCommentsList)
                          );
                        }
                        if (!$state.isLike) {
                          const likedCommentsList =
                            JSON.parse(localStorage.getItem("likedComments")) ||
                            [];
                          const index = likedCommentsList.findIndex(
                            comment =>
                              comment.id === $props.feedbackId &&
                              comment.user_id === $ctx.auth.info.id
                          );
                          if (index !== -1) {
                            likedCommentsList.splice(index, 1);
                            return localStorage.setItem(
                              "likedComments",
                              JSON.stringify(likedCommentsList)
                            );
                          }
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["saveInLocalStoreg"] != null &&
              typeof $steps["saveInLocalStoreg"] === "object" &&
              typeof $steps["saveInLocalStoreg"].then === "function"
            ) {
              $steps["saveInLocalStoreg"] = await $steps["saveInLocalStoreg"];
            }

            $steps["ifLogin"] =
              $ctx.auth.isLogin == false
                ? (() => {
                    const actionArgs = { args: [] };
                    return $globalActions["AuthGlobalContext.login"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
            if (
              $steps["ifLogin"] != null &&
              typeof $steps["ifLogin"] === "object" &&
              typeof $steps["ifLogin"].then === "function"
            ) {
              $steps["ifLogin"] = await $steps["ifLogin"];
            }

            $steps["splunk"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return $$.splunkEvent({
                        group: "feedback",
                        data: {
                          comment_id: $props.feedbackId,
                          doc_center: $props.docCenter
                        },
                        type: "like_comment",
                        token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                      });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["splunk"] != null &&
              typeof $steps["splunk"] === "object" &&
              typeof $steps["splunk"].then === "function"
            ) {
              $steps["splunk"] = await $steps["splunk"];
            }
          }}
        >
          {(() => {
            try {
              return +$props.like !== 0 || $state.isLike;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zTaJf
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.isLike
                      ? Number($props.like) + 1
                      : $props.like;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "2";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.isLike;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <HeartIcon
              className={classNames(projectcss.all, sty.svg__lsG2C)}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $state.isLike == true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <BoldheartIcon
              className={classNames(projectcss.all, sty.svg__sdFgJ)}
              role={"img"}
            />
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dw8Rz
            )}
          >
            {"\u067e\u0633\u0646\u062f\u06cc\u062f\u0646"}
          </div>
        </Stack__>
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <React.Fragment>
              <textarea
                data-plasmic-name={"reportText"}
                data-plasmic-override={overrides.reportText}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.reportText
                )}
                onChange={e => {
                  generateStateOnChangeProp($state, ["reportText", "value"])(
                    e.target.value
                  );
                }}
                placeholder={
                  "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0648 \u0634\u0631\u062d \u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631 \u0627\u06cc\u0646 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u062a\u06cc\u0645 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u0630\u06cc\u0631\u063424 \u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u0645\u0627\u060c \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0645\u062c\u062f\u062f\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u062f."
                }
                ref={ref => {
                  $refs["reportText"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["reportText", "value"]) ?? ""
                }
              />

              <Button
                children2={
                  "\u0627\u0631\u0633\u0627\u0644 \u06af\u0632\u0627\u0631\u0634"
                }
                className={classNames("__wab_instance", sty.button__iuHVx)}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__epBv)}
                    role={"img"}
                  />
                }
                loading={(() => {
                  try {
                    return $state.reportLoadinButton;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["if10Caracter"] =
                    $ctx.auth.isLogin && $props.commentText.length <= 10
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u062a\u0639\u062f\u0627\u062f \u062d\u0631\u0648\u0641 \u0628\u0627\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 10 \u062d\u0631\u0641 \u0628\u0627\u0634\u062f.",
                              undefined,
                              5000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["if10Caracter"] != null &&
                    typeof $steps["if10Caracter"] === "object" &&
                    typeof $steps["if10Caracter"].then === "function"
                  ) {
                    $steps["if10Caracter"] = await $steps["if10Caracter"];
                  }

                  $steps["loading"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["reportLoadinButton"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["loading"] != null &&
                    typeof $steps["loading"] === "object" &&
                    typeof $steps["loading"].then === "function"
                  ) {
                    $steps["loading"] = await $steps["loading"];
                  }

                  $steps["request"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return fetch(
                                "https://apigw.paziresh24.com/v1/feedbacks/report",
                                {
                                  headers: {
                                    "content-type": "application/json"
                                  },
                                  body: JSON.stringify({
                                    feedback_id: $props.feedbackId,
                                    report_text: $state.reportText.value
                                  }),
                                  method: "POST",
                                  credentials: "include"
                                }
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["request"] != null &&
                    typeof $steps["request"] === "object" &&
                    typeof $steps["request"].then === "function"
                  ) {
                    $steps["request"] = await $steps["request"];
                  }

                  $steps["closeDialog"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["closeDialog"] != null &&
                    typeof $steps["closeDialog"] === "object" &&
                    typeof $steps["closeDialog"].then === "function"
                  ) {
                    $steps["closeDialog"] = await $steps["closeDialog"];
                  }

                  $steps["offLoading"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["reportLoadinButton"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["offLoading"] != null &&
                    typeof $steps["offLoading"] === "object" &&
                    typeof $steps["offLoading"].then === "function"
                  ) {
                    $steps["offLoading"] = await $steps["offLoading"];
                  }

                  $steps["toast"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0631\u0631\u0633\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
                              undefined,
                              4989
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["toast"] != null &&
                    typeof $steps["toast"] === "object" &&
                    typeof $steps["toast"].then === "function"
                  ) {
                    $steps["toast"] = await $steps["toast"];
                  }

                  $steps["login"] =
                    $ctx.auth.isLogin == false
                      ? (() => {
                          const actionArgs = { args: [] };
                          return $globalActions[
                            "AuthGlobalContext.login"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["login"] != null &&
                    typeof $steps["login"] === "object" &&
                    typeof $steps["login"].then === "function"
                  ) {
                    $steps["login"] = await $steps["login"];
                  }

                  $steps["splunk"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId,
                                  report_text: $state.reportText.value
                                },
                                type: "report_comment",
                                token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__nr5Ux)}
                    role={"img"}
                  />
                }
              />
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.dialog)}
          onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={"\u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631"}
          trigger={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0EXmx)}
            >
              <InfoIcon
                className={classNames(projectcss.all, sty.svg__phmAr)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lDnuA
                )}
              >
                {"\u06af\u0632\u0627\u0631\u0634"}
              </div>
            </Stack__>
          }
        />
      </Stack__>
      <div
        data-plasmic-name={"\u0631\u0644\u0627"}
        data-plasmic-override={overrides.رلا}
        className={classNames(projectcss.all, sty.رلا)}
      >
        <textarea
          data-plasmic-name={"replyText"}
          data-plasmic-override={overrides.replyText}
          className={classNames(
            projectcss.all,
            projectcss.textarea,
            sty.replyText
          )}
          onChange={e => {
            generateStateOnChangeProp($state, ["replyText", "value"])(
              e.target.value
            );
          }}
          placeholder={
            "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f ..."
          }
          ref={ref => {
            $refs["replyText"] = ref;
          }}
          value={generateStateValueProp($state, ["replyText", "value"]) ?? ""}
        />

        <MultilineTextInput
          data-plasmic-name={"multilineTextInput"}
          data-plasmic-override={overrides.multilineTextInput}
          autoSize={true}
          className={classNames("__wab_instance", sty.multilineTextInput)}
          onValueChange={generateStateOnChangeProp($state, [
            "multilineTextInput",
            "value"
          ])}
          placeholder={
            "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f ..."
          }
          value={generateStateValueProp($state, [
            "multilineTextInput",
            "value"
          ])}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__eTi4F
          )}
          onClick={async event => {
            const $steps = {};

            $steps["request"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const formData = new FormData();
                        formData.append("feedback_id", $props.feedbackId);
                        formData.append("doctor_id", $props.doctorId);
                        formData.append("server_id", $props.serverId);
                        formData.append("description", $state.replyText.value);
                        return fetch(
                          "https://www.paziresh24.com/api/replyFeedback/",
                          {
                            method: "POST",
                            body: formData,
                            credentials: "include"
                          }
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["request"] != null &&
              typeof $steps["request"] === "object" &&
              typeof $steps["request"].then === "function"
            ) {
              $steps["request"] = await $steps["request"];
            }

            $steps["toast"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f. \u067e\u0633 \u0627\u0632 \u062a\u0627\u0626\u06cc\u062f \u062a\u0648\u0633\u0637 \u067e\u0630\u06cc\u0631\u063424\u060c \u0642\u0627\u0628\u0644 \u0646\u0645\u0627\u06cc\u0634 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f.",
                      undefined,
                      5000
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["toast"] != null &&
              typeof $steps["toast"] === "object" &&
              typeof $steps["toast"].then === "function"
            ) {
              $steps["toast"] = await $steps["toast"];
            }

            $steps["multiline"] = $ctx.auth.isLogin
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["multilineTextInput", "value"]
                    },
                    operation: 1
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, undefined);
                    return undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["multiline"] != null &&
              typeof $steps["multiline"] === "object" &&
              typeof $steps["multiline"].then === "function"
            ) {
              $steps["multiline"] = await $steps["multiline"];
            }

            $steps["invokeGlobalAction"] =
              $ctx.auth.isLogin == false
                ? (() => {
                    const actionArgs = { args: [] };
                    return $globalActions["AuthGlobalContext.login"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["splunk"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return $$.splunkEvent({
                        group: "feedback",
                        data: {
                          doctor_id: $props.doctorId,
                          comment_id: $props.feedbackId,
                          reply_text: $state.replyText.value
                        },
                        type: "reply_comment",
                        token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                      });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["splunk"] != null &&
              typeof $steps["splunk"] === "object" &&
              typeof $steps["splunk"].then === "function"
            ) {
              $steps["splunk"] = await $steps["splunk"];
            }
          }}
        >
          {"\u0627\u0631\u0633\u0627\u0644"}
        </div>
      </div>
      <DataFetcher
        className={classNames("__wab_instance", sty.httpRestApiFetcher__y2Mff)}
        dataName={"fetchedData"}
        errorDisplay={null}
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={null}
        method={"GET"}
        noLayout={false}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/ravi/v1/feedbacks?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.replyToFeedbackId})&limit=1&offset=0&sort=-created_at`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx =>
            (() => {
              try {
                return $ctx.fetchedData.list.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <ReplyCard
                className={classNames("__wab_instance", sty.replyCard__ardMi)}
                replyText={(() => {
                  try {
                    return $ctx.fetchedData.list[0].description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userName={(() => {
                  try {
                    return (
                      $ctx.fetchedData.list[0].user_display_name ||
                      "کاربر بدون نام"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            ) : null
          }
        </DataCtxReader__>
      </DataFetcher>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  اردنماشنظر: [
    "\u0627\u0631\u062f\u0646\u0645\u0627\u0634\u0646\u0638\u0631",
    "\u0633\u0647\u0646\u0642\u0637\u0647",
    "dialog3",
    "edditTextBox",
    "dialog4",
    "\u0646\u0627\u0645\u062a\u062a\u0627\u0631\u062e",
    "userAvatar",
    "chip",
    "\u0645\u062a\u0646\u0646\u0638\u0631",
    "dialog2",
    "\u0646\u0638\u0631\u0628\u0634\u062a\u0631\u0627\u06321",
    "\u0644\u0627\u0631\u0648\u0631\u062a",
    "dialog",
    "reportText",
    "\u0631\u0644\u0627",
    "replyText",
    "multilineTextInput"
  ],
  سهنقطه: [
    "\u0633\u0647\u0646\u0642\u0637\u0647",
    "dialog3",
    "edditTextBox",
    "dialog4"
  ],
  dialog3: ["dialog3", "edditTextBox"],
  edditTextBox: ["edditTextBox"],
  dialog4: ["dialog4"],
  نامتتارخ: [
    "\u0646\u0627\u0645\u062a\u062a\u0627\u0631\u062e",
    "userAvatar",
    "chip"
  ],
  userAvatar: ["userAvatar"],
  chip: ["chip"],
  متننظر: ["\u0645\u062a\u0646\u0646\u0638\u0631"],
  dialog2: [
    "dialog2",
    "\u0646\u0638\u0631\u0628\u0634\u062a\u0631\u0627\u06321"
  ],
  نظربشتراز1: ["\u0646\u0638\u0631\u0628\u0634\u062a\u0631\u0627\u06321"],
  لارورت: ["\u0644\u0627\u0631\u0648\u0631\u062a", "dialog", "reportText"],
  dialog: ["dialog", "reportText"],
  reportText: ["reportText"],
  رلا: ["\u0631\u0644\u0627", "replyText", "multilineTextInput"],
  replyText: ["replyText"],
  multilineTextInput: ["multilineTextInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  اردنماشنظر: "div";
  سهنقطه: typeof Popover;
  dialog3: typeof Dialog;
  edditTextBox: "textarea";
  dialog4: typeof Dialog;
  نامتتارخ: "div";
  userAvatar: typeof Avatar;
  chip: typeof Chip;
  متننظر: "div";
  dialog2: typeof Dialog;
  نظربشتراز1: "div";
  لارورت: "div";
  dialog: typeof Dialog;
  reportText: "textarea";
  رلا: "div";
  replyText: "textarea";
  multilineTextInput: typeof MultilineTextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewCard__VariantsArgs;
    args?: PlasmicReviewCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewCard__ArgProps,
          internalVariantPropNames: PlasmicReviewCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (
    nodeName === "\u0627\u0631\u062f\u0646\u0645\u0627\u0634\u0646\u0638\u0631"
  ) {
    func.displayName = "PlasmicReviewCard";
  } else {
    func.displayName = `PlasmicReviewCard.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewCard = Object.assign(
  // Top-level PlasmicReviewCard renders the root element
  makeNodeComponent(
    "\u0627\u0631\u062f\u0646\u0645\u0627\u0634\u0646\u0638\u0631"
  ),
  {
    // Helper components rendering sub-elements
    سهنقطه: makeNodeComponent("\u0633\u0647\u0646\u0642\u0637\u0647"),
    dialog3: makeNodeComponent("dialog3"),
    edditTextBox: makeNodeComponent("edditTextBox"),
    dialog4: makeNodeComponent("dialog4"),
    نامتتارخ: makeNodeComponent(
      "\u0646\u0627\u0645\u062a\u062a\u0627\u0631\u062e"
    ),
    userAvatar: makeNodeComponent("userAvatar"),
    chip: makeNodeComponent("chip"),
    متننظر: makeNodeComponent("\u0645\u062a\u0646\u0646\u0638\u0631"),
    dialog2: makeNodeComponent("dialog2"),
    نظربشتراز1: makeNodeComponent(
      "\u0646\u0638\u0631\u0628\u0634\u062a\u0631\u0627\u06321"
    ),
    لارورت: makeNodeComponent("\u0644\u0627\u0631\u0648\u0631\u062a"),
    dialog: makeNodeComponent("dialog"),
    reportText: makeNodeComponent("reportText"),
    رلا: makeNodeComponent("\u0631\u0644\u0627"),
    replyText: makeNodeComponent("replyText"),
    multilineTextInput: makeNodeComponent("multilineTextInput"),

    // Metadata about props expected for PlasmicReviewCard
    internalVariantProps: PlasmicReviewCard__VariantProps,
    internalArgProps: PlasmicReviewCard__ArgProps
  }
);

export default PlasmicReviewCard;
/* prettier-ignore-end */
