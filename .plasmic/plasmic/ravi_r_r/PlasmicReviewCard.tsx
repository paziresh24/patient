// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: hjUuvN6lhrZV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import EditAndReport from "../../EditAndReport"; // plasmic-import: 48DkFQMlhcuA/component
import Avatar from "../../Avatar"; // plasmic-import: 3i84rYjQRrs4/component
import Chip from "../../Chip"; // plasmic-import: 1bFBcAoH0lNN/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import ReplyCard from "../../ReplyCard"; // plasmic-import: qY29Y1sogsUa/component
import { Popover } from "@plasmicpkgs/radix-ui";
import StarRate from "../../StarRate"; // plasmic-import: mLhzoRbR5vw6/component
import MultilineTextInput from "../../MultilineTextInput"; // plasmic-import: CZBpNouNw7Ui/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewCard.module.css"; // plasmic-import: hjUuvN6lhrZV/css

import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon
import ThumbDownIcon from "../fragment_icons/icons/PlasmicIcon__ThumbDown"; // plasmic-import: jHvDymIOvRnf/icon
import ThumbUpIcon from "../fragment_icons/icons/PlasmicIcon__ThumbUp"; // plasmic-import: GRY2zHJ6uxOn/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import RepliesIcon from "../fragment_icons/icons/PlasmicIcon__Replies"; // plasmic-import: BamIPHX72k5k/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: lKZl6HF7GOiW/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon
import Icon17Icon2 from "./icons/PlasmicIcon__Icon17"; // plasmic-import: dwPoKnXC1x2G/icon
import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: nQIWSFtz7b-J/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 9Q_oq9_FnEFj/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: ucmv7JmAEMSo/icon

import __fn_splunkEvent from "@/common/services/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

createPlasmicElementProxy;

export type PlasmicReviewCard__VariantMembers = {
  raviExpFroDrakam: "raviExpFroDrakam";
};
export type PlasmicReviewCard__VariantsArgs = {
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
};
type VariantPropType = keyof PlasmicReviewCard__VariantsArgs;
export const PlasmicReviewCard__VariantProps = new Array<VariantPropType>(
  "raviExpFroDrakam"
);

export type PlasmicReviewCard__ArgsType = {
  userName?: string;
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
  recommendRange?: string;
  doctorUserId?: string;
  isShowReplyInput?: boolean;
};
type ArgPropType = keyof PlasmicReviewCard__ArgsType;
export const PlasmicReviewCard__ArgProps = new Array<ArgPropType>(
  "userName",
  "visitedTag",
  "setTime",
  "docCenter",
  "recommended",
  "commentText",
  "like",
  "feedbackId",
  "userId",
  "explanationOfIssue",
  "doctorEncounter",
  "qualityOfTreatment",
  "doctorSlug",
  "replyToFeedbackId",
  "recommendRange",
  "doctorUserId",
  "isShowReplyInput"
);

export type PlasmicReviewCard__OverridesType = {
  کاردنمایشنظر?: Flex__<"div">;
  نامکاربر?: Flex__<typeof DataFetcher>;
  نامتگتاریخ?: Flex__<"div">;
  editAndReport?: Flex__<typeof EditAndReport>;
  userAvatar?: Flex__<typeof Avatar>;
  chip?: Flex__<typeof Chip>;
  متننظر?: Flex__<"div">;
  لایکریپورت?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog>;
  reportText?: Flex__<"textarea">;
  button?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  نظربیشتراز1?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
  starRate?: Flex__<typeof StarRate>;
  dialog6?: Flex__<typeof Dialog>;
  سوشالها?: Flex__<"div">;
  توئیتر?: Flex__<typeof Button>;
  ایتا?: Flex__<typeof Button>;
  تلگرام?: Flex__<typeof Button>;
  واتساپ?: Flex__<typeof Button>;
  کپیکردن?: Flex__<"div">;
  کپیلینک?: Flex__<typeof Button>;
  ریپلای?: Flex__<"div">;
  replyText?: Flex__<"textarea">;
  multilineTextInput?: Flex__<typeof MultilineTextInput>;
  گرفتنریپلای?: Flex__<typeof DataFetcher>;
};

export interface DefaultReviewCardProps {
  userName?: string;
  visitedTag?: boolean;
  setTime?: string;
  docCenter?: string;
  recommended?: boolean;
  commentText?: string;
  like?: number;
  feedbackId?: string;
  userId?: string;
  explanationOfIssue?: string;
  doctorEncounter?: string;
  qualityOfTreatment?: string;
  doctorSlug?: string;
  replyToFeedbackId?: number;
  recommendRange?: string;
  doctorUserId?: string;
  isShowReplyInput?: boolean;
  raviExpFroDrakam?: SingleBooleanChoiceArg<"raviExpFroDrakam">;
  className?: string;
}

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewCard__RenderFunc(props: {
  variants: PlasmicReviewCard__VariantsArgs;
  args: PlasmicReviewCard__ArgsType;
  overrides: PlasmicReviewCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          visitedTag: false,
          recommended: false,
          isShowReplyInput: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "replyText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportText.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "isLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return false;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).some(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )
                  : false;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "reportLoadinButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "multilineTextInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "deleteLoadingButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "raviExpFroDrakam",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.raviExpFroDrakam
      },
      {
        path: "dialog6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "likeRate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (typeof window === "undefined") return 0;
                return window.localStorage.getItem("likedComments")
                  ? JSON.parse(localStorage.getItem("likedComments")).find(
                      item =>
                        item.id === $props.feedbackId &&
                        item.user_id === $ctx.auth.info.id
                    )?.rate
                  : 0;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={
        "\u06a9\u0627\u0631\u062f\u0646\u0645\u0627\u06cc\u0634\u0646\u0638\u0631"
      }
      data-plasmic-override={overrides.کاردنمایشنظر}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.کاردنمایشنظر,
        {
          [sty.کاردنمایشنظرraviExpFroDrakam]: hasVariant(
            $state,
            "raviExpFroDrakam",
            "raviExpFroDrakam"
          )
        }
      )}
      dir={"rtl"}
    >
      <DataFetcher
        data-plasmic-name={"\u0646\u0627\u0645\u06a9\u0627\u0631\u0628\u0631"}
        data-plasmic-override={overrides.نامکاربر}
        className={classNames("__wab_instance", sty.نامکاربر)}
        dataName={"fetchedData"}
        errorDisplay={null}
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={null}
        method={"GET"}
        noLayout={false}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/v1/users/${$props.userId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx => (
            <div
              data-plasmic-name={
                "\u0646\u0627\u0645\u062a\u06af\u062a\u0627\u0631\u06cc\u062e"
              }
              data-plasmic-override={overrides.نامتگتاریخ}
              className={classNames(projectcss.all, sty.نامتگتاریخ)}
            >
              {(() => {
                try {
                  return (
                    (
                      (+$props.qualityOfTreatment +
                        +$props.doctorEncounter +
                        +$props.explanationOfIssue) /
                      3
                    ).toFixed(1) !== "0.0"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cAdEv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rnD7L,
                      {
                        [sty.textraviExpFroDrakam__rnD7LQl6C7]: hasVariant(
                          $state,
                          "raviExpFroDrakam",
                          "raviExpFroDrakam"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            (+$props.qualityOfTreatment +
                              +$props.doctorEncounter +
                              +$props.explanationOfIssue) /
                            3
                          ).toFixed(1);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "%80 ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              ) : null}
              <EditAndReport
                data-plasmic-name={"editAndReport"}
                data-plasmic-override={overrides.editAndReport}
                className={classNames("__wab_instance", sty.editAndReport)}
                commentText={(() => {
                  try {
                    return $props.commentText;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                doctorEncounter={(() => {
                  try {
                    return $props.doctorEncounter;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                doctorSlug={(() => {
                  try {
                    return $props.doctorSlug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                doctorUserId={(() => {
                  try {
                    return $props.doctorUserId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                explanationOfIssue={(() => {
                  try {
                    return $props.explanationOfIssue;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                feedbackId={(() => {
                  try {
                    return $props.feedbackId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                qualityOfTreatment={(() => {
                  try {
                    return $props.qualityOfTreatment;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                recommendRange={(() => {
                  try {
                    return $props.recommendRange;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userId={(() => {
                  try {
                    return $props.userId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox__n7A1U)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return "/ravi/" + $props.userId + "/";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
              >
                <DataFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher__eXJp
                  )}
                  dataName={"avatarData"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"fetchError"}
                  headers={{
                    "Content-Type": "application/json",
                    Accept: "application/json"
                  }}
                  loadingDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o8OOa
                          )}
                        />
                      )}
                    </DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  previewSpinner={false}
                  url={(() => {
                    try {
                      return `https://apigw.paziresh24.com/v1/users/image?user_id=${$props.userId}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <Avatar
                        data-plasmic-name={"userAvatar"}
                        data-plasmic-override={overrides.userAvatar}
                        className={classNames("__wab_instance", sty.userAvatar)}
                        name={(() => {
                          try {
                            return (
                              $ctx.fetchedData.users[0]?.name ||
                              "کاربر بدون نام"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        src={(() => {
                          try {
                            return $ctx.avatarData.data.image_url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    )}
                  </DataCtxReader__>
                </DataFetcher>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hJuBl)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mTvMh)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2VaV1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.userName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0622\u0646\u0627\u0647\u06cc\u062a\u0627 \u0645\u0646\u0635\u0648\u0631\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___21RLp
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $ctx.fetchedData.users[0]?.name || "کاربر بدون نام"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0622\u0646\u0627\u0647\u06cc\u062a\u0627 \u0645\u0646\u0635\u0648\u0631\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $props.visitedTag;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Chip
                      data-plasmic-name={"chip"}
                      data-plasmic-override={overrides.chip}
                      className={classNames("__wab_instance", sty.chip)}
                      color={"gray"}
                      content={
                        "\u0648\u06cc\u0632\u06cc\u062a \u0634\u062f\u0647"
                      }
                      rounded={true}
                      size={"xSmall"}
                      slot={
                        <InfoIcon
                          className={classNames(projectcss.all, sty.svg__h3Tzz)}
                          role={"img"}
                        />
                      }
                    >
                      <SmileIcon
                        className={classNames(projectcss.all, sty.svg__lsXDn)}
                        role={"img"}
                      />
                    </Chip>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vdK60)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aF3Jg
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.setTime;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062f\u06cc\u0631\u0648\u0632";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return !!$props.docCenter;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yTb2M
                      )}
                    >
                      {"|"}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $props.docCenter !== undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pm0Q5
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.docCenter;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0645\u0637\u0628 \u062f\u06a9\u062a\u0631 \u0628\u0627\u0628\u06a9 \u0632\u0645\u0627\u0646\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                </Stack__>
              </div>
            </div>
          )}
        </DataCtxReader__>
      </DataFetcher>
      <Stack__
        as={"div"}
        data-plasmic-name={"\u0645\u062a\u0646\u0646\u0638\u0631"}
        data-plasmic-override={overrides.متننظر}
        hasGap={true}
        className={classNames(projectcss.all, sty.متننظر)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___53H3H)}
        >
          {false ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zoUnv)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wZ5Sn
                )}
              >
                {
                  "\u067e\u0632\u0634\u06a9 \u0631\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0646\u0645\u06cc \u06a9\u0646\u0645"
                }
              </div>
              <ThumbDownIcon
                className={classNames(projectcss.all, sty.svg__ecNXv)}
                role={"img"}
              />
            </Stack__>
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zLXc8)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___62Bj
              )}
            >
              {
                "\u067e\u0632\u0634\u06a9 \u0631\u0627 \u062a\u0648\u0635\u06cc\u0647 \u0645\u06cc\u06a9\u0646\u0645"
              }
            </div>
            <ThumbUpIcon
              className={classNames(projectcss.all, sty.svg__a8Ad)}
              role={"img"}
            />
          </Stack__>
        </Stack__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__le3Kw,
            {
              [sty.textraviExpFroDrakam__le3KwQl6C7]: hasVariant(
                $state,
                "raviExpFroDrakam",
                "raviExpFroDrakam"
              )
            }
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $props.commentText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u06a9\u0627\u0645\u0644\u0627 \u0627\u0632 \u0628\u0631\u062e\u0648\u0631\u062f \u062e\u0627\u0646\u0645 \u062f\u06a9\u062a\u0631 \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u0645 \u062e\u06cc\u0644\u06cc \u0648\u0642\u062a \u06af\u0630\u0627\u0634\u062a\u0646 \u0648 \u0635\u0628\u0648\u0631\u06cc \u06a9\u0631\u062f\u0646 \u062a\u0627 \u0628\u06cc\u0645\u0627\u0631\u06cc\u0645 \u0631\u0648 \u062a\u0634\u062e\u06cc\u0635 \u0628\u062f\u0646 \u062f\u0631\u0645\u0627\u0646\u0645 \u0631\u0648 \u062a\u0627\u0632\u0647 \u0634\u0631\u0648\u0639 \u06a9\u0631\u062f\u0645 \u0628\u0647 \u06a9\u0645\u06a9\u0634\u0648\u0646 \u0648 \u0645\u0637\u0645\u0639\u0646\u0645 \u06a9\u0647 \u062c\u0648\u0627\u0628 \u0645\u06cc\u06af\u06cc\u0631\u0645 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u06a9\u0646\u0645 \u0627\u06af\u0631 \u0645\u0634\u06a9\u0644\u06cc \u062f\u0627\u0631\u06cc\u0646 \u0627\u0632 \u0627\u06cc\u0634\u0648\u0646 \u06a9\u0645\u06a9 \u0628\u06af\u06cc\u0631\u06cc\u0646";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={
          "\u0644\u0627\u06cc\u06a9\u0631\u06cc\u067e\u0648\u0631\u062a"
        }
        data-plasmic-override={overrides.لایکریپورت}
        hasGap={true}
        className={classNames(projectcss.all, sty.لایکریپورت)}
      >
        <Dialog
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <React.Fragment>
              <textarea
                data-plasmic-name={"reportText"}
                data-plasmic-override={overrides.reportText}
                className={classNames(
                  projectcss.all,
                  projectcss.textarea,
                  sty.reportText
                )}
                onChange={e => {
                  generateStateOnChangeProp($state, ["reportText", "value"])(
                    e.target.value
                  );
                }}
                placeholder={
                  "\u0644\u0637\u0641\u0627 \u0639\u0644\u062a \u0648 \u0634\u0631\u062d \u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631 \u0627\u06cc\u0646 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0627\u0639\u0644\u0627\u0645 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u062a\u06cc\u0645 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u0630\u06cc\u0631\u063424 \u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0634\u0645\u0627\u060c \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631 \u0631\u0627 \u0645\u062c\u062f\u062f\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u062f."
                }
                ref={ref => {
                  $refs["reportText"] = ref;
                }}
                value={
                  generateStateValueProp($state, ["reportText", "value"]) ?? ""
                }
              />

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                children2={
                  "\u0627\u0631\u0633\u0627\u0644 \u06af\u0632\u0627\u0631\u0634"
                }
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttonraviExpFroDrakam]: hasVariant(
                    $state,
                    "raviExpFroDrakam",
                    "raviExpFroDrakam"
                  )
                })}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__epBv)}
                    role={"img"}
                  />
                }
                loading={(() => {
                  try {
                    return $state.reportLoadinButton;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["if10Caracter"] =
                    $ctx.auth.isLogin && $props.commentText.length <= 10
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u062a\u0639\u062f\u0627\u062f \u062d\u0631\u0648\u0641 \u0628\u0627\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 10 \u062d\u0631\u0641 \u0628\u0627\u0634\u062f.",
                              undefined,
                              5000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["if10Caracter"] != null &&
                    typeof $steps["if10Caracter"] === "object" &&
                    typeof $steps["if10Caracter"].then === "function"
                  ) {
                    $steps["if10Caracter"] = await $steps["if10Caracter"];
                  }

                  $steps["loading"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["reportLoadinButton"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["loading"] != null &&
                    typeof $steps["loading"] === "object" &&
                    typeof $steps["loading"].then === "function"
                  ) {
                    $steps["loading"] = await $steps["loading"];
                  }

                  $steps["request"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return fetch(
                                "https://apigw.paziresh24.com/ravi/v1/feedbacks/report?id= " +
                                  $props.feedbackId,
                                {
                                  headers: {
                                    "content-type": "application/json"
                                  },
                                  body: JSON.stringify({
                                    feedback_id: $props.feedbackId,
                                    report_text: $state.reportText.value
                                  }),
                                  method: "POST",
                                  credentials: "include"
                                }
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["request"] != null &&
                    typeof $steps["request"] === "object" &&
                    typeof $steps["request"].then === "function"
                  ) {
                    $steps["request"] = await $steps["request"];
                  }

                  $steps["closeDialog"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["closeDialog"] != null &&
                    typeof $steps["closeDialog"] === "object" &&
                    typeof $steps["closeDialog"].then === "function"
                  ) {
                    $steps["closeDialog"] = await $steps["closeDialog"];
                  }

                  $steps["offLoading"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["reportLoadinButton"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["offLoading"] != null &&
                    typeof $steps["offLoading"] === "object" &&
                    typeof $steps["offLoading"].then === "function"
                  ) {
                    $steps["offLoading"] = await $steps["offLoading"];
                  }

                  $steps["toast"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0631\u0631\u0633\u06cc \u062e\u0648\u0627\u0647\u062f \u0634\u062f.",
                              undefined,
                              4989
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["toast"] != null &&
                    typeof $steps["toast"] === "object" &&
                    typeof $steps["toast"].then === "function"
                  ) {
                    $steps["toast"] = await $steps["toast"];
                  }

                  $steps["login"] =
                    $ctx.auth.isLogin == false
                      ? (() => {
                          const actionArgs = { args: [] };
                          return $globalActions[
                            "AuthGlobalContext.login"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["login"] != null &&
                    typeof $steps["login"] === "object" &&
                    typeof $steps["login"].then === "function"
                  ) {
                    $steps["login"] = await $steps["login"];
                  }

                  $steps["splunk"] =
                    $state.reportText.value.length >= 10 && $ctx.auth.isLogin
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId,
                                  report_text: $state.reportText.value
                                },
                                type: "report_comment",
                                token: "f4fd4b50-fe90-48f3-a1ab-5a5070140318"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__nr5Ux)}
                    role={"img"}
                  />
                }
              />
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.dialog, {
            [sty.dialograviExpFroDrakam]: hasVariant(
              $state,
              "raviExpFroDrakam",
              "raviExpFroDrakam"
            )
          })}
          onOpenChange={generateStateOnChangeProp($state, ["dialog", "open"])}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={"\u06af\u0632\u0627\u0631\u0634 \u0646\u0638\u0631"}
          trigger={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0EXmx, {
                [sty.freeBoxraviExpFroDrakam___0EXmxQl6C7]: hasVariant(
                  $state,
                  "raviExpFroDrakam",
                  "raviExpFroDrakam"
                )
              })}
            >
              <InfoIcon
                className={classNames(projectcss.all, sty.svg__phmAr)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lDnuA
                )}
              >
                {"\u06af\u0632\u0627\u0631\u0634"}
              </div>
            </Stack__>
          }
        />

        <DataFetcher
          className={classNames(
            "__wab_instance",
            sty.httpRestApiFetcher__dvNua
          )}
          dataName={"fetchedData"}
          errorDisplay={null}
          errorName={"fetchError"}
          headers={{
            "Content-Type": "application/json",
            Accept: "application/json"
          }}
          loadingDisplay={null}
          method={"GET"}
          noLayout={false}
          previewSpinner={false}
          url={(() => {
            try {
              return `https://apigw.paziresh24.com/ravi/v1/feedbacks?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.replyToFeedbackId})&offset=0&sort=-created_at`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <DataCtxReader__>
            {$ctx =>
              (() => {
                try {
                  return $ctx.fetchedData.list.length > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Dialog
                  data-plasmic-name={"dialog2"}
                  data-plasmic-override={overrides.dialog2}
                  body={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x126B)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetchedData.list;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <ReplyCard
                            className={classNames(
                              "__wab_instance",
                              sty.replyCard__sQuYr
                            )}
                            isDoctor={(() => {
                              try {
                                return (
                                  currentItem.user_id == $props.doctorUserId
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            replyText={(() => {
                              try {
                                return currentItem.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            userId={(() => {
                              try {
                                return currentItem.user_id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        );
                      })}
                    </Stack__>
                  }
                  className={classNames("__wab_instance", sty.dialog2)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "dialog2",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["dialog2", "open"])}
                  title={"\u067e\u0627\u0633\u062e \u0647\u0627 "}
                  trigger={
                    (() => {
                      try {
                        return $ctx.fetchedData.list.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={
                          "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321"
                        }
                        data-plasmic-override={overrides.نظربیشتراز1}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.نظربیشتراز1)}
                      >
                        <RepliesIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___34YvM
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fw275
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0646\u0638\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646"
                          }
                        </div>
                      </Stack__>
                    ) : null
                  }
                />
              ) : null
            }
          </DataCtxReader__>
        </DataFetcher>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__o8WyD)}
        >
          <Popover
            data-plasmic-name={"popoverCore"}
            data-plasmic-override={overrides.popoverCore}
            align={"center"}
            className={classNames("__wab_instance", sty.popoverCore)}
            defaultOpen={false}
            modal={true}
            onOpenChange={generateStateOnChangeProp($state, [
              "popoverCore",
              "open"
            ])}
            open={generateStateValueProp($state, ["popoverCore", "open"])}
            overlay={
              <div className={classNames(projectcss.all, sty.freeBox__gJfpv)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4, 5];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <StarRate
                      data-plasmic-name={"starRate"}
                      data-plasmic-override={overrides.starRate}
                      className={classNames("__wab_instance", sty.starRate)}
                      key={currentIndex}
                      onSelect={async () => {
                        const $steps = {};

                        $steps["invokeGlobalAction2"] = !$ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = { args: [] };
                              return $globalActions[
                                "AuthGlobalContext.login"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["updateLikeRate"] = $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["likeRate"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLikeRate"] != null &&
                          typeof $steps["updateLikeRate"] === "object" &&
                          typeof $steps["updateLikeRate"].then === "function"
                        ) {
                          $steps["updateLikeRate"] = await $steps[
                            "updateLikeRate"
                          ];
                        }

                        $steps["updatePopoverCoreOpen"] = $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["popoverCore", "open"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePopoverCoreOpen"] != null &&
                          typeof $steps["updatePopoverCoreOpen"] === "object" &&
                          typeof $steps["updatePopoverCoreOpen"].then ===
                            "function"
                        ) {
                          $steps["updatePopoverCoreOpen"] = await $steps[
                            "updatePopoverCoreOpen"
                          ];
                        }

                        $steps["updateIsLike"] = $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["isLike"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIsLike"] != null &&
                          typeof $steps["updateIsLike"] === "object" &&
                          typeof $steps["updateIsLike"].then === "function"
                        ) {
                          $steps["updateIsLike"] = await $steps["updateIsLike"];
                        }

                        $steps["runCode"] = $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if ($state.isLike) {
                                      const likedComment = {
                                        user_id: $ctx.auth.info.id,
                                        id: $props.feedbackId,
                                        rate: $state.likeRate
                                      };
                                      const likedCommentsList =
                                        JSON.parse(
                                          localStorage.getItem("likedComments")
                                        ) || [];
                                      likedCommentsList.push(likedComment);
                                      localStorage.setItem(
                                        "likedComments",
                                        JSON.stringify(likedCommentsList)
                                      );
                                    }
                                    if (!$state.isLike) {
                                      const likedCommentsList =
                                        JSON.parse(
                                          localStorage.getItem("likedComments")
                                        ) || [];
                                      const index = likedCommentsList.findIndex(
                                        comment =>
                                          comment.id === $props.feedbackId &&
                                          comment.user_id === $ctx.auth.info.id
                                      );
                                      if (index !== -1) {
                                        likedCommentsList.splice(index, 1);
                                        return localStorage.setItem(
                                          "likedComments",
                                          JSON.stringify(likedCommentsList)
                                        );
                                      }
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = $ctx.auth.isLogin
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://ir-ravi-n8n.darkube.app/webhook/like_rate",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        feedback_id: $props.feedbackId,
                                        rate: $state.likeRate,
                                        user_id: $ctx.auth.info.id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      selected={(() => {
                        try {
                          return currentItem <= $state.likeRate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </div>
            }
            side={"bottom"}
            slideIn={true}
            themeResetClass={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens
            )}
            trigger={false}
          >
            {(() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qhLa0)}
                onClick={async event => {
                  const $steps = {};

                  $steps["ifLogin"] =
                    $ctx.auth.isLogin == false
                      ? (() => {
                          const actionArgs = { args: [] };
                          return $globalActions[
                            "AuthGlobalContext.login"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["ifLogin"] != null &&
                    typeof $steps["ifLogin"] === "object" &&
                    typeof $steps["ifLogin"].then === "function"
                  ) {
                    $steps["ifLogin"] = await $steps["ifLogin"];
                  }

                  $steps["updatePopoverCoreOpen"] = $ctx.auth.isLogin
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["popoverCore", "open"]
                          },
                          operation: 4,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePopoverCoreOpen"] != null &&
                    typeof $steps["updatePopoverCoreOpen"] === "object" &&
                    typeof $steps["updatePopoverCoreOpen"].then === "function"
                  ) {
                    $steps["updatePopoverCoreOpen"] = await $steps[
                      "updatePopoverCoreOpen"
                    ];
                  }

                  $steps["splunk"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return $$.splunkEvent({
                              group: "feedback",
                              data: {
                                comment_id: $props.feedbackId,
                                doc_center: $props.docCenter
                              },
                              type: "like_comment",
                              token: "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d",
                              api_host: "https://splunk-ravi-hec.paziresh24.com"
                            });
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["splunk"] != null &&
                    typeof $steps["splunk"] === "object" &&
                    typeof $steps["splunk"].then === "function"
                  ) {
                    $steps["splunk"] = await $steps["splunk"];
                  }
                }}
              >
                {(() => {
                  try {
                    return +$props.like !== 0 || $state.isLike;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zTaJf
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.isLike
                            ? Number($props.like) + 1
                            : $props.like;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "2";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return !$state.isLike;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant($state, "raviExpFroDrakam", "raviExpFroDrakam")
                        ? ThumbUpIcon
                        : ThumbUpIcon
                    }
                    className={classNames(projectcss.all, sty.svg__lsG2C, {
                      [sty.svgraviExpFroDrakam__lsG2CQl6C7]: hasVariant(
                        $state,
                        "raviExpFroDrakam",
                        "raviExpFroDrakam"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.isLike == true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant($state, "raviExpFroDrakam", "raviExpFroDrakam")
                        ? ThumbUpIcon
                        : ThumbUpIcon
                    }
                    className={classNames(projectcss.all, sty.svg__sdFgJ, {
                      [sty.svgraviExpFroDrakam__sdFgJQl6C7]: hasVariant(
                        $state,
                        "raviExpFroDrakam",
                        "raviExpFroDrakam"
                      )
                    })}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dw8Rz,
                    {
                      [sty.textraviExpFroDrakam__dw8RzQl6C7]: hasVariant(
                        $state,
                        "raviExpFroDrakam",
                        "raviExpFroDrakam"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "raviExpFroDrakam", "raviExpFroDrakam")
                    ? "\u0645\u0641\u06cc\u062f \u0628\u0648\u062f\u061f"
                    : " \u0686\u0642\u062f\u0631 \u0645\u0641\u06cc\u062f \u0628\u0648\u062f\u061f"}
                </div>
              </Stack__>
            ) : null}
          </Popover>
          <div
            className={classNames(projectcss.all, sty.freeBox__wNjA9)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $$.splunkEvent({
                          group: "feedback",
                          data: {
                            doctor_id: $props.doctorId,
                            comment_id: $props.feedbackId
                          },
                          type: "share_comment",
                          token: "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d",
                          api_host: "https://splunk-ravi-hec.paziresh24.com"
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <Dialog
              data-plasmic-name={"dialog6"}
              data-plasmic-override={overrides.dialog6}
              body={
                <DataFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher__ituI3
                  )}
                  dataName={"fetchedData"}
                  errorDisplay={null}
                  errorName={"fetchError"}
                  headers={{
                    "Content-Type": "application/json",
                    Accept: "application/json"
                  }}
                  loadingDisplay={
                    <DataCtxReader__>
                      {$ctx => (
                        <Icon17Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg__bbdhD,
                            "loader"
                          )}
                          role={"img"}
                        />
                      )}
                    </DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  previewSpinner={false}
                  url={(() => {
                    try {
                      return `https://ir-ravi-n8n.darkube.app/webhook/share-comment?slug=${$props.doctorSlug}&id=${$props.feedbackId}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o41Sk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tjC
                          )}
                        >
                          {
                            "\u0627\u06cc\u0646 \u0646\u0638\u0631 \u0631\u0627 \u0628\u0627 \u062f\u06cc\u06af\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                          }
                        </div>
                        <div
                          data-plasmic-name={
                            "\u0633\u0648\u0634\u0627\u0644\u0647\u0627"
                          }
                          data-plasmic-override={overrides.سوشالها}
                          className={classNames(projectcss.all, sty.سوشالها)}
                        >
                          <Button
                            data-plasmic-name={
                              "\u062a\u0648\u0626\u06cc\u062a\u0631"
                            }
                            data-plasmic-override={overrides.توئیتر}
                            children2={
                              <React.Fragment>
                                <Icon17Icon2
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dcuHo
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__j9D5J
                                  )}
                                >
                                  {"\u062a\u0648\u06cc\u06cc\u062a\u0631"}
                                </div>
                              </React.Fragment>
                            }
                            className={classNames("__wab_instance", sty.توئیتر)}
                            color={"blue"}
                            link={(() => {
                              try {
                                return `https://twitter.com/intent/tweet/?url=${$ctx.fetchedData.url}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.splunkEvent({
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-tweeter",
                                          token:
                                            "1668355b-c055-487f-8cb3-4274801d368c",
                                          api_host:
                                            "https://splunk-ravi-hec.paziresh24.com"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />

                          <Button
                            data-plasmic-name={"\u0627\u06cc\u062a\u0627"}
                            data-plasmic-override={overrides.ایتا}
                            children2={
                              <React.Fragment>
                                <EitaaIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___8OaBn
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mNgXb
                                  )}
                                >
                                  {"\u0627\u06cc\u062a\u0627"}
                                </div>
                              </React.Fragment>
                            }
                            className={classNames("__wab_instance", sty.ایتا)}
                            color={"orange"}
                            link={(() => {
                              try {
                                return `https://eitaa.com/share/url?url=${$ctx.fetchedData.url}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.splunkEvent({
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-eeta",
                                          token:
                                            "1668355b-c055-487f-8cb3-4274801d368c",
                                          api_host:
                                            "https://splunk-ravi-hec.paziresh24.com"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />

                          <Button
                            data-plasmic-name={
                              "\u062a\u0644\u06af\u0631\u0627\u0645"
                            }
                            data-plasmic-override={overrides.تلگرام}
                            children2={
                              <React.Fragment>
                                <Icon13Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oYc9Q
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__u1Y8
                                  )}
                                >
                                  {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                                </div>
                              </React.Fragment>
                            }
                            className={classNames("__wab_instance", sty.تلگرام)}
                            link={(() => {
                              try {
                                return `https://telegram.me/share/url?url=${$ctx.fetchedData.url}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.splunkEvent({
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-telegram",
                                          token:
                                            "1668355b-c055-487f-8cb3-4274801d368c",
                                          api_host:
                                            "https://splunk-ravi-hec.paziresh24.com"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />

                          <Button
                            data-plasmic-name={
                              "\u0648\u0627\u062a\u0633\u0627\u067e"
                            }
                            data-plasmic-override={overrides.واتساپ}
                            children2={
                              <React.Fragment>
                                <Icon16Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jcPhF
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gcPkG
                                  )}
                                >
                                  {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                                </div>
                              </React.Fragment>
                            }
                            className={classNames("__wab_instance", sty.واتساپ)}
                            color={"green"}
                            link={(() => {
                              try {
                                return `https://wa.me/?text=${$ctx.fetchedData.url}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.splunkEvent({
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-whatsapp",
                                          token:
                                            "1668355b-c055-487f-8cb3-4274801d368c",
                                          api_host:
                                            "https://splunk-ravi-hec.paziresh24.com"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kjRpj
                          )}
                        />

                        <div
                          data-plasmic-name={
                            "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646"
                          }
                          data-plasmic-override={overrides.کپیکردن}
                          className={classNames(projectcss.all, sty.کپیکردن)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vjYtk
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.fetchedData.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <Button
                            data-plasmic-name={
                              "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
                            }
                            data-plasmic-override={overrides.کپیلینک}
                            children2={
                              <React.Fragment>
                                <Icon15Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wewyW
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__rmbH3
                                  )}
                                >
                                  {
                                    "\u06a9\u067e\u06cc \u0644\u06cc\u0646\u06a9"
                                  }
                                </div>
                              </React.Fragment>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.کپیلینک
                            )}
                            color={"softBlue"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return navigator.share({
                                          url: $ctx.fetchedData.url,
                                          text: "این نظر رو در پذیرش24 ببین \uD83D\uDC47"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["runCode2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $$.splunkEvent({
                                          group: "feedback",
                                          data: {
                                            doctor_id: $props.doctorId,
                                            comment_id: $props.feedbackId
                                          },
                                          type: "share_comment-copy",
                                          token:
                                            "1668355b-c055-487f-8cb3-4274801d368c",
                                          api_host:
                                            "https://splunk-ravi-hec.paziresh24.com"
                                        });
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode2"] != null &&
                                typeof $steps["runCode2"] === "object" &&
                                typeof $steps["runCode2"].then === "function"
                              ) {
                                $steps["runCode2"] = await $steps["runCode2"];
                              }
                            }}
                            outline={true}
                          />
                        </div>
                      </Stack__>
                    )}
                  </DataCtxReader__>
                </DataFetcher>
              }
              className={classNames("__wab_instance", sty.dialog6)}
              onOpenChange={generateStateOnChangeProp($state, [
                "dialog6",
                "open"
              ])}
              open={generateStateValueProp($state, ["dialog6", "open"])}
              title={
                "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
              }
              trigger={
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iAvTv, {
                    [sty.freeBoxraviExpFroDrakam__iAvTvQl6C7]: hasVariant(
                      $state,
                      "raviExpFroDrakam",
                      "raviExpFroDrakam"
                    )
                  })}
                >
                  <Icon14Icon
                    className={classNames(projectcss.all, sty.svg__buJg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v5Zas
                    )}
                  >
                    {"\u0627\u0631\u0633\u0627\u0644 \u06a9\u0646 "}
                  </div>
                </Stack__>
              }
            />
          </div>
        </Stack__>
      </Stack__>
      {(() => {
        try {
          return $props.isShowReplyInput;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"\u0631\u06cc\u067e\u0644\u0627\u06cc"}
          data-plasmic-override={overrides.ریپلای}
          className={classNames(projectcss.all, sty.ریپلای)}
        >
          <textarea
            data-plasmic-name={"replyText"}
            data-plasmic-override={overrides.replyText}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.replyText
            )}
            onChange={e => {
              generateStateOnChangeProp($state, ["replyText", "value"])(
                e.target.value
              );
            }}
            placeholder={
              "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f ..."
            }
            ref={ref => {
              $refs["replyText"] = ref;
            }}
            value={generateStateValueProp($state, ["replyText", "value"]) ?? ""}
          />

          <MultilineTextInput
            data-plasmic-name={"multilineTextInput"}
            data-plasmic-override={overrides.multilineTextInput}
            autoSize={true}
            className={classNames("__wab_instance", sty.multilineTextInput, {
              [sty.multilineTextInputraviExpFroDrakam]: hasVariant(
                $state,
                "raviExpFroDrakam",
                "raviExpFroDrakam"
              )
            })}
            onValueChange={generateStateOnChangeProp($state, [
              "multilineTextInput",
              "value"
            ])}
            placeholder={
              "\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f ..."
            }
            value={generateStateValueProp($state, [
              "multilineTextInput",
              "value"
            ])}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eTi4F,
              {
                [sty.textraviExpFroDrakam__eTi4FQl6C7]: hasVariant(
                  $state,
                  "raviExpFroDrakam",
                  "raviExpFroDrakam"
                )
              }
            )}
            onClick={async event => {
              const $steps = {};

              $steps["request"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const formData = new FormData();
                          formData.append("feedback_id", $props.feedbackId);
                          formData.append(
                            "description",
                            $state.multilineTextInput.value
                          );
                          return fetch(
                            "https://apigw.paziresh24.com/ravi/v1/feedbacks/reply?id=" +
                              $props.feedbackId,
                            {
                              method: "POST",
                              body: formData,
                              credentials: "include"
                            }
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["request"] != null &&
                typeof $steps["request"] === "object" &&
                typeof $steps["request"].then === "function"
              ) {
                $steps["request"] = await $steps["request"];
              }

              $steps["toast"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "\u0646\u0638\u0631 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f. \u067e\u0633 \u0627\u0632 \u062a\u0627\u0626\u06cc\u062f \u062a\u0648\u0633\u0637 \u067e\u0630\u06cc\u0631\u063424\u060c \u0642\u0627\u0628\u0644 \u0646\u0645\u0627\u06cc\u0634 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f.",
                        undefined,
                        5000
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["toast"] != null &&
                typeof $steps["toast"] === "object" &&
                typeof $steps["toast"].then === "function"
              ) {
                $steps["toast"] = await $steps["toast"];
              }

              $steps["multiline"] = $ctx.auth.isLogin
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["multilineTextInput", "value"]
                      },
                      operation: 1
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, undefined);
                      return undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["multiline"] != null &&
                typeof $steps["multiline"] === "object" &&
                typeof $steps["multiline"].then === "function"
              ) {
                $steps["multiline"] = await $steps["multiline"];
              }

              $steps["invokeGlobalAction"] =
                $ctx.auth.isLogin == false
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["AuthGlobalContext.login"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["sendToN8N"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return fetch(
                          "https://apigw.paziresh24.com/ravi/v1/reply-webhook?id=" +
                            $props.feedbackId,
                          {
                            headers: { "content-type": "application/json" },
                            body: JSON.stringify({
                              doctor_id: $props.doctorId,
                              comment_id: $props.feedbackId,
                              reply_text: $state.multilineTextInput.value
                            }),
                            method: "POST",
                            credentials: "include"
                          }
                        );
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["sendToN8N"] != null &&
                typeof $steps["sendToN8N"] === "object" &&
                typeof $steps["sendToN8N"].then === "function"
              ) {
                $steps["sendToN8N"] = await $steps["sendToN8N"];
              }

              $steps["splunk"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $$.splunkEvent({
                          group: "feedback",
                          data: {
                            doctor_id: $props.doctorId,
                            comment_id: $props.feedbackId,
                            reply_text: $state.multilineTextInput.value
                          },
                          type: "reply_comment",
                          token: "3dfb4505-637a-4dfa-8c5d-4e4343d6ba0d",
                          api_host: "https://splunk-ravi-hec.paziresh24.com"
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["splunk"] != null &&
                typeof $steps["splunk"] === "object" &&
                typeof $steps["splunk"].then === "function"
              ) {
                $steps["splunk"] = await $steps["splunk"];
              }
            }}
          >
            {"\u0627\u0631\u0633\u0627\u0644"}
          </div>
        </div>
      ) : null}
      <DataFetcher
        data-plasmic-name={
          "\u06af\u0631\u0641\u062a\u0646\u0631\u06cc\u067e\u0644\u0627\u06cc"
        }
        data-plasmic-override={overrides.گرفتنریپلای}
        className={classNames("__wab_instance", sty.گرفتنریپلای)}
        dataName={"fetchedData"}
        errorDisplay={null}
        errorName={"fetchError"}
        headers={{
          "Content-Type": "application/json",
          Accept: "application/json"
        }}
        loadingDisplay={null}
        method={"GET"}
        noLayout={false}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/ravi/v1/feedbacks?where=(doctor_slug,eq,${$props.doctorSlug})~and(reply_to_feedback_id,eq,${$props.replyToFeedbackId})&limit=1&offset=0&sort=-created_at`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <DataCtxReader__>
          {$ctx =>
            (() => {
              try {
                return $ctx.fetchedData.list.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <ReplyCard
                className={classNames("__wab_instance", sty.replyCard__ardMi)}
                doctorSlug={(() => {
                  try {
                    return $props.doctorSlug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                doctorUserId={(() => {
                  try {
                    return $props.doctorUserId;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                id={(() => {
                  try {
                    return $ctx.fetchedData.list[0].Id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                isDoctor={(() => {
                  try {
                    return (
                      $ctx.fetchedData.list[0].user_id == $props.doctorUserId
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                replyText={(() => {
                  try {
                    return $ctx.fetchedData.list[0].description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userId={(() => {
                  try {
                    return $ctx.fetchedData.list[0].user_id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            ) : null
          }
        </DataCtxReader__>
      </DataFetcher>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  کاردنمایشنظر: [
    "\u06a9\u0627\u0631\u062f\u0646\u0645\u0627\u06cc\u0634\u0646\u0638\u0631",
    "\u0646\u0627\u0645\u06a9\u0627\u0631\u0628\u0631",
    "\u0646\u0627\u0645\u062a\u06af\u062a\u0627\u0631\u06cc\u062e",
    "editAndReport",
    "userAvatar",
    "chip",
    "\u0645\u062a\u0646\u0646\u0638\u0631",
    "\u0644\u0627\u06cc\u06a9\u0631\u06cc\u067e\u0648\u0631\u062a",
    "dialog",
    "reportText",
    "button",
    "dialog2",
    "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321",
    "popoverCore",
    "starRate",
    "dialog6",
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e",
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9",
    "\u0631\u06cc\u067e\u0644\u0627\u06cc",
    "replyText",
    "multilineTextInput",
    "\u06af\u0631\u0641\u062a\u0646\u0631\u06cc\u067e\u0644\u0627\u06cc"
  ],
  نامکاربر: [
    "\u0646\u0627\u0645\u06a9\u0627\u0631\u0628\u0631",
    "\u0646\u0627\u0645\u062a\u06af\u062a\u0627\u0631\u06cc\u062e",
    "editAndReport",
    "userAvatar",
    "chip"
  ],
  نامتگتاریخ: [
    "\u0646\u0627\u0645\u062a\u06af\u062a\u0627\u0631\u06cc\u062e",
    "editAndReport",
    "userAvatar",
    "chip"
  ],
  editAndReport: ["editAndReport"],
  userAvatar: ["userAvatar"],
  chip: ["chip"],
  متننظر: ["\u0645\u062a\u0646\u0646\u0638\u0631"],
  لایکریپورت: [
    "\u0644\u0627\u06cc\u06a9\u0631\u06cc\u067e\u0648\u0631\u062a",
    "dialog",
    "reportText",
    "button",
    "dialog2",
    "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321",
    "popoverCore",
    "starRate",
    "dialog6",
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e",
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  dialog: ["dialog", "reportText", "button"],
  reportText: ["reportText"],
  button: ["button"],
  dialog2: [
    "dialog2",
    "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321"
  ],
  نظربیشتراز1: [
    "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321"
  ],
  popoverCore: ["popoverCore", "starRate"],
  starRate: ["starRate"],
  dialog6: [
    "dialog6",
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e",
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  سوشالها: [
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e"
  ],
  توئیتر: ["\u062a\u0648\u0626\u06cc\u062a\u0631"],
  ایتا: ["\u0627\u06cc\u062a\u0627"],
  تلگرام: ["\u062a\u0644\u06af\u0631\u0627\u0645"],
  واتساپ: ["\u0648\u0627\u062a\u0633\u0627\u067e"],
  کپیکردن: [
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  کپیلینک: ["\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"],
  ریپلای: [
    "\u0631\u06cc\u067e\u0644\u0627\u06cc",
    "replyText",
    "multilineTextInput"
  ],
  replyText: ["replyText"],
  multilineTextInput: ["multilineTextInput"],
  گرفتنریپلای: [
    "\u06af\u0631\u0641\u062a\u0646\u0631\u06cc\u067e\u0644\u0627\u06cc"
  ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  کاردنمایشنظر: "div";
  نامکاربر: typeof DataFetcher;
  نامتگتاریخ: "div";
  editAndReport: typeof EditAndReport;
  userAvatar: typeof Avatar;
  chip: typeof Chip;
  متننظر: "div";
  لایکریپورت: "div";
  dialog: typeof Dialog;
  reportText: "textarea";
  button: typeof Button;
  dialog2: typeof Dialog;
  نظربیشتراز1: "div";
  popoverCore: typeof Popover;
  starRate: typeof StarRate;
  dialog6: typeof Dialog;
  سوشالها: "div";
  توئیتر: typeof Button;
  ایتا: typeof Button;
  تلگرام: typeof Button;
  واتساپ: typeof Button;
  کپیکردن: "div";
  کپیلینک: typeof Button;
  ریپلای: "div";
  replyText: "textarea";
  multilineTextInput: typeof MultilineTextInput;
  گرفتنریپلای: typeof DataFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewCard__VariantsArgs;
    args?: PlasmicReviewCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewCard__ArgProps,
          internalVariantPropNames: PlasmicReviewCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (
    nodeName ===
    "\u06a9\u0627\u0631\u062f\u0646\u0645\u0627\u06cc\u0634\u0646\u0638\u0631"
  ) {
    func.displayName = "PlasmicReviewCard";
  } else {
    func.displayName = `PlasmicReviewCard.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewCard = Object.assign(
  // Top-level PlasmicReviewCard renders the root element
  makeNodeComponent(
    "\u06a9\u0627\u0631\u062f\u0646\u0645\u0627\u06cc\u0634\u0646\u0638\u0631"
  ),
  {
    // Helper components rendering sub-elements
    نامکاربر: makeNodeComponent(
      "\u0646\u0627\u0645\u06a9\u0627\u0631\u0628\u0631"
    ),
    نامتگتاریخ: makeNodeComponent(
      "\u0646\u0627\u0645\u062a\u06af\u062a\u0627\u0631\u06cc\u062e"
    ),
    editAndReport: makeNodeComponent("editAndReport"),
    userAvatar: makeNodeComponent("userAvatar"),
    chip: makeNodeComponent("chip"),
    متننظر: makeNodeComponent("\u0645\u062a\u0646\u0646\u0638\u0631"),
    لایکریپورت: makeNodeComponent(
      "\u0644\u0627\u06cc\u06a9\u0631\u06cc\u067e\u0648\u0631\u062a"
    ),
    dialog: makeNodeComponent("dialog"),
    reportText: makeNodeComponent("reportText"),
    button: makeNodeComponent("button"),
    dialog2: makeNodeComponent("dialog2"),
    نظربیشتراز1: makeNodeComponent(
      "\u0646\u0638\u0631\u0628\u06cc\u0634\u062a\u0631\u0627\u06321"
    ),
    popoverCore: makeNodeComponent("popoverCore"),
    starRate: makeNodeComponent("starRate"),
    dialog6: makeNodeComponent("dialog6"),
    سوشالها: makeNodeComponent("\u0633\u0648\u0634\u0627\u0644\u0647\u0627"),
    توئیتر: makeNodeComponent("\u062a\u0648\u0626\u06cc\u062a\u0631"),
    ایتا: makeNodeComponent("\u0627\u06cc\u062a\u0627"),
    تلگرام: makeNodeComponent("\u062a\u0644\u06af\u0631\u0627\u0645"),
    واتساپ: makeNodeComponent("\u0648\u0627\u062a\u0633\u0627\u067e"),
    کپیکردن: makeNodeComponent("\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646"),
    کپیلینک: makeNodeComponent("\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"),
    ریپلای: makeNodeComponent("\u0631\u06cc\u067e\u0644\u0627\u06cc"),
    replyText: makeNodeComponent("replyText"),
    multilineTextInput: makeNodeComponent("multilineTextInput"),
    گرفتنریپلای: makeNodeComponent(
      "\u06af\u0631\u0641\u062a\u0646\u0631\u06cc\u067e\u0644\u0627\u06cc"
    ),

    // Metadata about props expected for PlasmicReviewCard
    internalVariantProps: PlasmicReviewCard__VariantProps,
    internalArgProps: PlasmicReviewCard__ArgProps
  }
);

export default PlasmicReviewCard;
/* prettier-ignore-end */
