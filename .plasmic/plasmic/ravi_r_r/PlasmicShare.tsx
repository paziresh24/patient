/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: elu6YJ3_KoYo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicShare.module.css"; // plasmic-import: elu6YJ3_KoYo/css

import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: lKZl6HF7GOiW/icon
import Icon17Icon from "../fragment_design_system/icons/PlasmicIcon__Icon17"; // plasmic-import: eCsLCdWP9DST/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import Icon17Icon2 from "./icons/PlasmicIcon__Icon17"; // plasmic-import: dwPoKnXC1x2G/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import EitaaIcon from "../fragment_icons/icons/PlasmicIcon__Eitaa"; // plasmic-import: qxWwW7vbw7na/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: nQIWSFtz7b-J/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 9Q_oq9_FnEFj/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: ucmv7JmAEMSo/icon

import __fn_splunkEvent from "@/common/services/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

createPlasmicElementProxy;

export type PlasmicShare__VariantMembers = {};
export type PlasmicShare__VariantsArgs = {};
type VariantPropType = keyof PlasmicShare__VariantsArgs;
export const PlasmicShare__VariantProps = new Array<VariantPropType>();

export type PlasmicShare__ArgsType = {};
type ArgPropType = keyof PlasmicShare__ArgsType;
export const PlasmicShare__ArgProps = new Array<ArgPropType>();

export type PlasmicShare__OverridesType = {
  root?: Flex__<"div">;
  dialog6?: Flex__<typeof Dialog>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
  سوشالها?: Flex__<"div">;
  توئیتر?: Flex__<typeof Button>;
  ایتا?: Flex__<typeof Button>;
  تلگرام?: Flex__<typeof Button>;
  واتساپ?: Flex__<typeof Button>;
  کپیکردن?: Flex__<"div">;
  کپیلینک?: Flex__<typeof Button>;
};

export interface DefaultShareProps {
  className?: string;
}

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShare__RenderFunc(props: {
  variants: PlasmicShare__VariantsArgs;
  args: PlasmicShare__ArgsType;
  overrides: PlasmicShare__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        plasmic_ravi_design_system_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Dialog
        data-plasmic-name={"dialog6"}
        data-plasmic-override={overrides.dialog6}
        body={
          <React.Fragment>
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              children={null}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"fetchedData"}
              errorDisplay={null}
              errorName={"fetchError"}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <Icon17Icon
                      className={classNames(
                        projectcss.all,
                        sty.svg__axytm,
                        "loader"
                      )}
                      role={"img"}
                    />
                  )}
                </DataCtxReader__>
              }
              method={"GET"}
              noLayout={false}
              previewSpinner={false}
              url={(() => {
                try {
                  return `https://ir-ravi-n8n.darkube.app/webhook/share-comment?slug=${$props.doctorSlug}&id=${$props.feedbackId}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jhKz0)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b9Kpg
                )}
              >
                {
                  "\u0627\u06cc\u0646 \u0646\u0638\u0631 \u0631\u0627 \u0628\u0627 \u062f\u06cc\u06af\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                }
              </div>
              <div
                data-plasmic-name={"\u0633\u0648\u0634\u0627\u0644\u0647\u0627"}
                data-plasmic-override={overrides.سوشالها}
                className={classNames(projectcss.all, sty.سوشالها)}
              >
                <Button
                  data-plasmic-name={"\u062a\u0648\u0626\u06cc\u062a\u0631"}
                  data-plasmic-override={overrides.توئیتر}
                  children2={
                    <React.Fragment>
                      <Icon17Icon2
                        className={classNames(projectcss.all, sty.svg__u0B4K)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jgZCp
                        )}
                      >
                        {"\u062a\u0648\u06cc\u06cc\u062a\u0631"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.توئیتر)}
                  color={"blue"}
                  link={(() => {
                    try {
                      return `https://twitter.com/intent/tweet/?url=${$ctx.fetchedData.url}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId
                                },
                                type: "share_comment-tweeter",
                                token: "1668355b-c055-487f-8cb3-4274801d368c",
                                api_host:
                                  "https://splunk-ravi-hec.paziresh24.com"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                />

                <Button
                  data-plasmic-name={"\u0627\u06cc\u062a\u0627"}
                  data-plasmic-override={overrides.ایتا}
                  children2={
                    <React.Fragment>
                      <EitaaIcon
                        className={classNames(projectcss.all, sty.svg__sd340)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dWOee
                        )}
                      >
                        {"\u0627\u06cc\u062a\u0627"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.ایتا)}
                  color={"orange"}
                  link={(() => {
                    try {
                      return `https://eitaa.com/share/url?url=${$ctx.fetchedData.url}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId
                                },
                                type: "share_comment-eeta",
                                token: "1668355b-c055-487f-8cb3-4274801d368c",
                                api_host:
                                  "https://splunk-ravi-hec.paziresh24.com"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                />

                <Button
                  data-plasmic-name={"\u062a\u0644\u06af\u0631\u0627\u0645"}
                  data-plasmic-override={overrides.تلگرام}
                  children2={
                    <React.Fragment>
                      <Icon13Icon
                        className={classNames(projectcss.all, sty.svg___3E6Pi)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7JzVp
                        )}
                      >
                        {"\u062a\u0644\u06af\u0631\u0627\u0645"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.تلگرام)}
                  link={(() => {
                    try {
                      return `https://telegram.me/share/url?url=${$ctx.fetchedData.url}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId
                                },
                                type: "share_comment-telegram",
                                token: "1668355b-c055-487f-8cb3-4274801d368c",
                                api_host:
                                  "https://splunk-ravi-hec.paziresh24.com"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                />

                <Button
                  data-plasmic-name={"\u0648\u0627\u062a\u0633\u0627\u067e"}
                  data-plasmic-override={overrides.واتساپ}
                  children2={
                    <React.Fragment>
                      <Icon16Icon
                        className={classNames(projectcss.all, sty.svg___5VlZ8)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1WebW
                        )}
                      >
                        {"\u0648\u0627\u062a\u0633\u0627\u067e"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.واتساپ)}
                  color={"green"}
                  link={(() => {
                    try {
                      return `https://wa.me/?text=${$ctx.fetchedData.url}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId
                                },
                                type: "share_comment-whatsapp",
                                token: "1668355b-c055-487f-8cb3-4274801d368c",
                                api_host:
                                  "https://splunk-ravi-hec.paziresh24.com"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___62WXk)}
              />

              <div
                data-plasmic-name={"\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646"}
                data-plasmic-override={overrides.کپیکردن}
                className={classNames(projectcss.all, sty.کپیکردن)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jxjee
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchedData.url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Button
                  data-plasmic-name={
                    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
                  }
                  data-plasmic-override={overrides.کپیلینک}
                  children2={
                    <React.Fragment>
                      <Icon15Icon
                        className={classNames(projectcss.all, sty.svg__z5Y4O)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___901OG
                        )}
                      >
                        {"\u06a9\u067e\u06cc \u0644\u06cc\u0646\u06a9"}
                      </div>
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.کپیلینک)}
                  color={"softBlue"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return navigator.share({
                                url: $ctx.fetchedData.url,
                                text: "این نظر رو در پذیرش24 ببین \uD83D\uDC47"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.splunkEvent({
                                group: "feedback",
                                data: {
                                  doctor_id: $props.doctorId,
                                  comment_id: $props.feedbackId
                                },
                                type: "share_comment-copy",
                                token: "1668355b-c055-487f-8cb3-4274801d368c",
                                api_host:
                                  "https://splunk-ravi-hec.paziresh24.com"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }
                  }}
                  outline={true}
                />
              </div>
            </Stack__>
          </React.Fragment>
        }
        className={classNames("__wab_instance", sty.dialog6)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog6", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["dialog6", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__e3V6T
            )}
          >
            {
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
            }
          </div>
        }
        trigger={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e5NKf)}
          >
            <Icon14Icon
              className={classNames(projectcss.all, sty.svg__toA7)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8JOzh
              )}
            >
              {"\u0627\u0631\u0633\u0627\u0644 \u06a9\u0646 "}
            </div>
          </Stack__>
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog6",
    "httpRestApiFetcher",
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e",
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  dialog6: [
    "dialog6",
    "httpRestApiFetcher",
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e",
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  httpRestApiFetcher: ["httpRestApiFetcher"],
  سوشالها: [
    "\u0633\u0648\u0634\u0627\u0644\u0647\u0627",
    "\u062a\u0648\u0626\u06cc\u062a\u0631",
    "\u0627\u06cc\u062a\u0627",
    "\u062a\u0644\u06af\u0631\u0627\u0645",
    "\u0648\u0627\u062a\u0633\u0627\u067e"
  ],
  توئیتر: ["\u062a\u0648\u0626\u06cc\u062a\u0631"],
  ایتا: ["\u0627\u06cc\u062a\u0627"],
  تلگرام: ["\u062a\u0644\u06af\u0631\u0627\u0645"],
  واتساپ: ["\u0648\u0627\u062a\u0633\u0627\u067e"],
  کپیکردن: [
    "\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646",
    "\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"
  ],
  کپیلینک: ["\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog6: typeof Dialog;
  httpRestApiFetcher: typeof DataFetcher;
  سوشالها: "div";
  توئیتر: typeof Button;
  ایتا: typeof Button;
  تلگرام: typeof Button;
  واتساپ: typeof Button;
  کپیکردن: "div";
  کپیلینک: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShare__VariantsArgs;
    args?: PlasmicShare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShare__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShare__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShare__ArgProps,
          internalVariantPropNames: PlasmicShare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShare";
  } else {
    func.displayName = `PlasmicShare.${nodeName}`;
  }
  return func;
}

export const PlasmicShare = Object.assign(
  // Top-level PlasmicShare renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog6: makeNodeComponent("dialog6"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),
    سوشالها: makeNodeComponent("\u0633\u0648\u0634\u0627\u0644\u0647\u0627"),
    توئیتر: makeNodeComponent("\u062a\u0648\u0626\u06cc\u062a\u0631"),
    ایتا: makeNodeComponent("\u0627\u06cc\u062a\u0627"),
    تلگرام: makeNodeComponent("\u062a\u0644\u06af\u0631\u0627\u0645"),
    واتساپ: makeNodeComponent("\u0648\u0627\u062a\u0633\u0627\u067e"),
    کپیکردن: makeNodeComponent("\u06a9\u067e\u06cc\u06a9\u0631\u062f\u0646"),
    کپیلینک: makeNodeComponent("\u06a9\u067e\u06cc\u0644\u06cc\u0646\u06a9"),

    // Metadata about props expected for PlasmicShare
    internalVariantProps: PlasmicShare__VariantProps,
    internalArgProps: PlasmicShare__ArgProps
  }
);

export default PlasmicShare;
/* prettier-ignore-end */
