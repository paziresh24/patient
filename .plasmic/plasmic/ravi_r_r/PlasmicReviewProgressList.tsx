// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qQzsBf58SqzNJX45iggq96
// Component: xpGRRNKB86D2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RaviProgress from "../../RaviProgress"; // plasmic-import: ku1RVOULmrFB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_ravi_design_system_css from "../ravi_design_system/plasmic.module.css"; // plasmic-import: pkMLinFwM9pzwv5S5KpiAu/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qQzsBf58SqzNJX45iggq96/projectcss
import sty from "./PlasmicReviewProgressList.module.css"; // plasmic-import: xpGRRNKB86D2/css

createPlasmicElementProxy;

export type PlasmicReviewProgressList__VariantMembers = {};
export type PlasmicReviewProgressList__VariantsArgs = {};
type VariantPropType = keyof PlasmicReviewProgressList__VariantsArgs;
export const PlasmicReviewProgressList__VariantProps =
  new Array<VariantPropType>();

export type PlasmicReviewProgressList__ArgsType = {
  items?: any;
  hideRates?: boolean;
};
type ArgPropType = keyof PlasmicReviewProgressList__ArgsType;
export const PlasmicReviewProgressList__ArgProps = new Array<ArgPropType>(
  "items",
  "hideRates"
);

export type PlasmicReviewProgressList__OverridesType = {
  root?: Flex__<"div">;
  raviProgress?: Flex__<typeof RaviProgress>;
};

export interface DefaultReviewProgressListProps {
  items?: any;
  hideRates?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReviewProgressList__RenderFunc(props: {
  variants: PlasmicReviewProgressList__VariantsArgs;
  args: PlasmicReviewProgressList__ArgsType;
  overrides: PlasmicReviewProgressList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          hideRates: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    (() => {
      try {
        return (() => {
          const totalValue = $props.items.reduce(
            (sum, item) => sum + +item.value,
            0
          );
          return !$props.hideRates && totalValue != 0;
        })();
      } catch (e) {
        if (
          e instanceof TypeError ||
          e?.plasmicType === "PlasmicUndefinedDataError"
        ) {
          return true;
        }
        throw e;
      }
    })() ? (
      <Stack__
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_fragment_design_system_css.plasmic_tokens,
          plasmic_ravi_design_system_css.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens,
          sty.root
        )}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <RaviProgress
              data-plasmic-name={"raviProgress"}
              data-plasmic-override={overrides.raviProgress}
              className={classNames("__wab_instance", sty.raviProgress)}
              key={currentIndex}
              lable={(() => {
                try {
                  return currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              value={(() => {
                try {
                  return currentItem.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "raviProgress"],
  raviProgress: ["raviProgress"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  raviProgress: typeof RaviProgress;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReviewProgressList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReviewProgressList__VariantsArgs;
    args?: PlasmicReviewProgressList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReviewProgressList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicReviewProgressList__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReviewProgressList__ArgProps,
          internalVariantPropNames: PlasmicReviewProgressList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReviewProgressList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReviewProgressList";
  } else {
    func.displayName = `PlasmicReviewProgressList.${nodeName}`;
  }
  return func;
}

export const PlasmicReviewProgressList = Object.assign(
  // Top-level PlasmicReviewProgressList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    raviProgress: makeNodeComponent("raviProgress"),

    // Metadata about props expected for PlasmicReviewProgressList
    internalVariantProps: PlasmicReviewProgressList__VariantProps,
    internalArgProps: PlasmicReviewProgressList__ArgProps
  }
);

export default PlasmicReviewProgressList;
/* prettier-ignore-end */
