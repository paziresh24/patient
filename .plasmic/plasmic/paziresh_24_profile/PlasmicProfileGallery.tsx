/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7r312uiqyadpVPdnRoAggk
// Component: -M0f8W0T-8eT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Gallery } from "@/common/fragment/components/gallery"; // plasmic-import: bNZsEb_qQE7u/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectcss
import sty from "./PlasmicProfileGallery.module.css"; // plasmic-import: -M0f8W0T-8eT/css

createPlasmicElementProxy;

export type PlasmicProfileGallery__VariantMembers = {};
export type PlasmicProfileGallery__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileGallery__VariantsArgs;
export const PlasmicProfileGallery__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileGallery__ArgsType = { gallery?: any };
type ArgPropType = keyof PlasmicProfileGallery__ArgsType;
export const PlasmicProfileGallery__ArgProps = new Array<ArgPropType>(
  "gallery"
);

export type PlasmicProfileGallery__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  freeBox?: Flex__<"div">;
  paizresh24Gallery?: Flex__<typeof Gallery>;
};

export interface DefaultProfileGalleryProps {
  gallery?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileGallery__RenderFunc(props: {
  variants: PlasmicProfileGallery__VariantsArgs;
  args: PlasmicProfileGallery__ArgsType;
  overrides: PlasmicProfileGallery__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.h2
        )}
      >
        {"\u06af\u0627\u0644\u0631\u06cc"}
      </h2>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Gallery
          data-plasmic-name={"paizresh24Gallery"}
          data-plasmic-override={overrides.paizresh24Gallery}
          className={classNames("__wab_instance", sty.paizresh24Gallery)}
          imageHeight={120}
          imageWidth={120}
          items={(() => {
            try {
              return $props.gallery;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  "https://www.paziresh24.com/_next/static/media/logo.5e03fe79.svg"
                ];
              }
              throw e;
            }
          })()}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "freeBox", "paizresh24Gallery"],
  h2: ["h2"],
  freeBox: ["freeBox", "paizresh24Gallery"],
  paizresh24Gallery: ["paizresh24Gallery"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  freeBox: "div";
  paizresh24Gallery: typeof Gallery;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileGallery__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileGallery__VariantsArgs;
    args?: PlasmicProfileGallery__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileGallery__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileGallery__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileGallery__ArgProps,
          internalVariantPropNames: PlasmicProfileGallery__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileGallery";
  } else {
    func.displayName = `PlasmicProfileGallery.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileGallery = Object.assign(
  // Top-level PlasmicProfileGallery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    freeBox: makeNodeComponent("freeBox"),
    paizresh24Gallery: makeNodeComponent("paizresh24Gallery"),

    // Metadata about props expected for PlasmicProfileGallery
    internalVariantProps: PlasmicProfileGallery__VariantProps,
    internalArgProps: PlasmicProfileGallery__ArgProps
  }
);

export default PlasmicProfileGallery;
/* prettier-ignore-end */
