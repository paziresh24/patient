/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7r312uiqyadpVPdnRoAggk
// Component: a5gwmBZCRoof

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileBreadcrumbsItems from "../../ProfileBreadcrumbsItems"; // plasmic-import: Rd-drOCrz_N9/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectcss
import sty from "./PlasmicProfileBreadcrumbs.module.css"; // plasmic-import: a5gwmBZCRoof/css

createPlasmicElementProxy;

export type PlasmicProfileBreadcrumbs__VariantMembers = {};
export type PlasmicProfileBreadcrumbs__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileBreadcrumbs__VariantsArgs;
export const PlasmicProfileBreadcrumbs__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProfileBreadcrumbs__ArgsType = { breadcrumbs?: any };
type ArgPropType = keyof PlasmicProfileBreadcrumbs__ArgsType;
export const PlasmicProfileBreadcrumbs__ArgProps = new Array<ArgPropType>(
  "breadcrumbs"
);

export type PlasmicProfileBreadcrumbs__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  profileBreadcrumbsItems?: Flex__<typeof ProfileBreadcrumbsItems>;
};

export interface DefaultProfileBreadcrumbsProps {
  breadcrumbs?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileBreadcrumbs__RenderFunc(props: {
  variants: PlasmicProfileBreadcrumbs__VariantsArgs;
  args: PlasmicProfileBreadcrumbs__ArgsType;
  overrides: PlasmicProfileBreadcrumbs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, "no-scroll")}
        style={{ width: "100%" }}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.breadcrumbs;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <ProfileBreadcrumbsItems
              data-plasmic-name={"profileBreadcrumbsItems"}
              data-plasmic-override={overrides.profileBreadcrumbsItems}
              className={classNames(
                "__wab_instance",
                sty.profileBreadcrumbsItems
              )}
              isHover={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              key={currentIndex}
              noIcon={(() => {
                try {
                  return currentIndex == $props.breadcrumbs.length - 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              title={(() => {
                try {
                  return currentItem.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={(() => {
                try {
                  return currentItem.href;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "profileBreadcrumbsItems"],
  freeBox: ["freeBox", "profileBreadcrumbsItems"],
  profileBreadcrumbsItems: ["profileBreadcrumbsItems"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  profileBreadcrumbsItems: typeof ProfileBreadcrumbsItems;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileBreadcrumbs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileBreadcrumbs__VariantsArgs;
    args?: PlasmicProfileBreadcrumbs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileBreadcrumbs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileBreadcrumbs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileBreadcrumbs__ArgProps,
          internalVariantPropNames: PlasmicProfileBreadcrumbs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileBreadcrumbs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileBreadcrumbs";
  } else {
    func.displayName = `PlasmicProfileBreadcrumbs.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileBreadcrumbs = Object.assign(
  // Top-level PlasmicProfileBreadcrumbs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    profileBreadcrumbsItems: makeNodeComponent("profileBreadcrumbsItems"),

    // Metadata about props expected for PlasmicProfileBreadcrumbs
    internalVariantProps: PlasmicProfileBreadcrumbs__VariantProps,
    internalArgProps: PlasmicProfileBreadcrumbs__ArgProps
  }
);

export default PlasmicProfileBreadcrumbs;
/* prettier-ignore-end */
