/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7r312uiqyadpVPdnRoAggk
// Component: AyZkzO0Ld0SI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ProfileBreadcrumbs from "../../ProfileBreadcrumbs"; // plasmic-import: a5gwmBZCRoof/component
import Collapsible from "../../Collapsible"; // plasmic-import: kYXN54tCkD2S/component
import { Accordion } from "@/common/fragment/components/accordion"; // plasmic-import: hxayod_-dwXy/codeComponent
import ProfileSeoSimilarLinks from "../../ProfileSeoSimilarLinks"; // plasmic-import: t9YD5mtJ9Hq-/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectcss
import sty from "./PlasmicProfileSeo.module.css"; // plasmic-import: AyZkzO0Ld0SI/css

import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon

createPlasmicElementProxy;

export type PlasmicProfileSeo__VariantMembers = {};
export type PlasmicProfileSeo__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfileSeo__VariantsArgs;
export const PlasmicProfileSeo__VariantProps = new Array<VariantPropType>();

export type PlasmicProfileSeo__ArgsType = {
  information?: any;
  feedbacks?: any;
  isOnlineVisitCenter?: boolean;
  expertises?: any;
  similarLinks?: any;
  center?: any;
  doctorExpertise?: string;
  countOfPageView?: string;
  bredcrumbs?: any;
};
type ArgPropType = keyof PlasmicProfileSeo__ArgsType;
export const PlasmicProfileSeo__ArgProps = new Array<ArgPropType>(
  "information",
  "feedbacks",
  "isOnlineVisitCenter",
  "expertises",
  "similarLinks",
  "center",
  "doctorExpertise",
  "countOfPageView",
  "bredcrumbs"
);

export type PlasmicProfileSeo__OverridesType = {
  root?: Flex__<"div">;
  profileBreadcrumbs?: Flex__<typeof ProfileBreadcrumbs>;
  collapsible?: Flex__<typeof Collapsible>;
  fragmentAccordion?: Flex__<typeof Accordion>;
  profileSeoSimilarLinks?: Flex__<typeof ProfileSeoSimilarLinks>;
};

export interface DefaultProfileSeoProps {
  information?: any;
  feedbacks?: any;
  isOnlineVisitCenter?: boolean;
  expertises?: any;
  similarLinks?: any;
  center?: any;
  doctorExpertise?: string;
  countOfPageView?: string;
  bredcrumbs?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfileSeo__RenderFunc(props: {
  variants: PlasmicProfileSeo__VariantsArgs;
  args: PlasmicProfileSeo__ArgsType;
  overrides: PlasmicProfileSeo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isOnlineVisitCenter: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zdzqO)}>
        <ProfileBreadcrumbs
          data-plasmic-name={"profileBreadcrumbs"}
          data-plasmic-override={overrides.profileBreadcrumbs}
          breadcrumbs={(() => {
            try {
              return $props.bredcrumbs;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.profileBreadcrumbs)}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__ql5Ki)}>
        <Collapsible
          data-plasmic-name={"collapsible"}
          data-plasmic-override={overrides.collapsible}
          className={classNames("__wab_instance", sty.collapsible)}
          defaultMaxHeight={"100px"}
          slot={
            <div className={classNames(projectcss.all, sty.freeBox___3Oxqh)}>
              <Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xaxc6
                    )}
                  >
                    {
                      "\u0645\u0634\u0627\u0647\u062f\u0647 \u06a9\u0645\u062a\u0631"
                    }
                  </div>
                }
                className={classNames("__wab_instance", sty.button__wSPyY)}
                color={"softBlue"}
                showStartIcon={true}
                size={"compact"}
                startIcon={
                  <ChevronUpIcon
                    className={classNames(projectcss.all, sty.svg__slO1)}
                    role={"img"}
                  />
                }
              />
            </div>
          }
          slot2={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__psc85)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yN06V
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return (() => {
                          const center = $props.center;
                          const information = $props.information;
                          const doctorExpertise = $props.doctorExpertise;
                          const feedbacks = $props.feedbacks;
                          const expertises = $props.expertises;
                          const isOnlineVisitCenter =
                            $props.isOnlineVisitCenter;
                          return `<p>${information.prefix} ${
                            information.display_name
                          }، ${doctorExpertise ?? "سایر"} در شهر ${
                            center?.city ?? "(ثبت نشده)"
                          } است. مطب ${information.prefix} ${
                            information.display_name
                          } در ${
                            center?.address ?? "(ثبت نشده)"
                          } واقع شده است که در صورت نیاز می‌توانید با شماره <span class="inline-block">${
                            !isOnlineVisitCenter &&
                            !!center?.display_number_array[0]
                              ? center?.display_number_array[0]
                              : "(ثبت نشده)"
                          }</span> تماس بگیرید.</p>
        <p>تاکنون   ${$props.countOfPageView ?? 0} نفر از پروفایل ${
                            information.prefix
                          } ${information.display_name}، ${
                            doctorExpertise ?? "سایر"
                          }  بازدید کرده‌اند؛ ${
                            !feedbacks?.details?.hide_rates
                              ? `همچنین ${
                                  +(
                                    (+(
                                      feedbacks?.details?.average_rates
                                        ?.average_quality_of_treatment ?? 0
                                    ) +
                                      +(
                                        feedbacks?.details?.average_rates
                                          ?.average_doctor_encounter ?? 0
                                      ) +
                                      +(
                                        feedbacks?.details?.average_rates
                                          ?.average_explanation_of_issue ?? 0
                                      )) /
                                    3
                                  )?.toFixed(1) * 20
                                }٪ مراجعین (${
                                  feedbacks?.details?.count_of_feedbacks ?? 0
                                } نظر ثبت شده) از ایشان رضایت داشته‌اند. <b>نظرات ${
                                  information.prefix
                                } ${
                                  information.display_name
                                }</b> در پروفایل دکتر در پذیرش۲۴  قابل مشاهده است.</p>`
                              : ""
                          }
        ${
          center?.freeturn_text
            ? `<p>زودترین زمان رزرو نوبت از مطب ${information.prefix} ${information.display_name} ${center?.freeturn_text} می‌باشد که می‌توانید از طریق وبسایت و یا اپلیکیشن نوبت‌دهی پذیرش۲۴ نوبت خود را به صورت اینترنتی و غیرحضوری دریافت کنید.</p>`
            : ""
        }
        <p>اگر زمان کافی برای مراجعه حضوری به پزشک مورد نظر خود را ندارید، به پروفایل پزشک در <a href="/" class="text-primary">پذیرش۲۴</a> سری بزنید و در صورت فعال بودن خدمات ویزیت آنلاین ایشان، نوبت ویزیت آنلاین خود را دریافت کنید؛ در غیر این‌صورت می‌توانید از سایر پزشکان ${
          doctorExpertise ?? "سایر"
        } <a href="/consult" class="text-primary"> ویزیت آنلاین (تلفنی و متنی)</a> نوبت بگیرید.</p>
        <p>در صورت نیاز به عکس و بیوگرافی و <b>آدرس اینستاگرام ${
          information.prefix
        } ${
                            information.display_name
                          }</b>، کانال تلگرام و وبسایت ایشان، اطلاعات موجود در پروفایل ایشان را مشاهده نمایید.</p>
        <ui>
        <li>آدرس مطب ${information.prefix} ${information.display_name}: ${
                            isOnlineVisitCenter ||
                            (!center?.address && !center?.city)
                              ? "ثبت نشده"
                              : `${center?.city}، ${center?.address}`
                          }</li>
        <li>تلفن مطب ${information.prefix} ${
                            information.display_name
                          }: <span class="inline-block">${
                            isOnlineVisitCenter ||
                            !center?.display_number_array[0]
                              ? "ثبت نشده"
                              : center?.display_number_array[0] ?? ""
                          }</span></li>
        <li>تخصص ${information.prefix} ${information.display_name}: ${
                            expertises?.expertises
                              ?.map?.(item => item?.alias_title)
                              ?.join("/ ") ?? expertises?.expertises?.[0]?.name
                          }</li>
        </ui>
        `;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <Accordion
                data-plasmic-name={"fragmentAccordion"}
                data-plasmic-override={overrides.fragmentAccordion}
                className={classNames("__wab_instance", sty.fragmentAccordion)}
                title={
                  "\u062a\u062e\u0635\u0635 \u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637"
                }
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wprRi)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $props.similarLinks;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <ProfileSeoSimilarLinks
                        data-plasmic-name={"profileSeoSimilarLinks"}
                        data-plasmic-override={overrides.profileSeoSimilarLinks}
                        className={classNames(
                          "__wab_instance",
                          sty.profileSeoSimilarLinks
                        )}
                        key={currentIndex}
                        title={(() => {
                          try {
                            return currentItem.caption;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        url={(() => {
                          try {
                            return currentItem.link;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
              </Accordion>
            </Stack__>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox__zoS6D)}>
            <Button
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__au9Xq
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u0628\u06cc\u0634\u062a\u0631"
                  }
                </div>
              }
              className={classNames("__wab_instance", sty.button__miWji)}
              color={"softBlue"}
              showStartIcon={true}
              size={"compact"}
              startIcon={
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__yLk)}
                  role={"img"}
                />
              }
            />
          </div>
        </Collapsible>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profileBreadcrumbs",
    "collapsible",
    "fragmentAccordion",
    "profileSeoSimilarLinks"
  ],
  profileBreadcrumbs: ["profileBreadcrumbs"],
  collapsible: ["collapsible", "fragmentAccordion", "profileSeoSimilarLinks"],
  fragmentAccordion: ["fragmentAccordion", "profileSeoSimilarLinks"],
  profileSeoSimilarLinks: ["profileSeoSimilarLinks"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profileBreadcrumbs: typeof ProfileBreadcrumbs;
  collapsible: typeof Collapsible;
  fragmentAccordion: typeof Accordion;
  profileSeoSimilarLinks: typeof ProfileSeoSimilarLinks;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileSeo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileSeo__VariantsArgs;
    args?: PlasmicProfileSeo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileSeo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProfileSeo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfileSeo__ArgProps,
          internalVariantPropNames: PlasmicProfileSeo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfileSeo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileSeo";
  } else {
    func.displayName = `PlasmicProfileSeo.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileSeo = Object.assign(
  // Top-level PlasmicProfileSeo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profileBreadcrumbs: makeNodeComponent("profileBreadcrumbs"),
    collapsible: makeNodeComponent("collapsible"),
    fragmentAccordion: makeNodeComponent("fragmentAccordion"),
    profileSeoSimilarLinks: makeNodeComponent("profileSeoSimilarLinks"),

    // Metadata about props expected for PlasmicProfileSeo
    internalVariantProps: PlasmicProfileSeo__VariantProps,
    internalArgProps: PlasmicProfileSeo__ArgProps
  }
);

export default PlasmicProfileSeo;
/* prettier-ignore-end */
