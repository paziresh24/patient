/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7r312uiqyadpVPdnRoAggk
// Component: _AH4Ju8JTju3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";
import ProfileActions2 from "../../ProfileActions2"; // plasmic-import: l1A3UpFFipsx/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7r312uiqyadpVPdnRoAggk/projectcss
import sty from "./PlasmicMore.module.css"; // plasmic-import: _AH4Ju8JTju3/css

import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: dYzWfdbRIW5L/icon

createPlasmicElementProxy;

export type PlasmicMore__VariantMembers = {};
export type PlasmicMore__VariantsArgs = {};
type VariantPropType = keyof PlasmicMore__VariantsArgs;
export const PlasmicMore__VariantProps = new Array<VariantPropType>();

export type PlasmicMore__ArgsType = { slug?: string };
type ArgPropType = keyof PlasmicMore__ArgsType;
export const PlasmicMore__ArgProps = new Array<ArgPropType>("slug");

export type PlasmicMore__OverridesType = {
  root?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
  svg?: Flex__<"svg">;
  profileActions2?: Flex__<typeof ProfileActions2>;
};

export interface DefaultMoreProps {
  slug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMore__RenderFunc(props: {
  variants: PlasmicMore__VariantsArgs;
  args: PlasmicMore__ArgsType;
  overrides: PlasmicMore__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <Popover
        data-plasmic-name={"popoverCore"}
        data-plasmic-override={overrides.popoverCore}
        align={"end"}
        className={classNames("__wab_instance", sty.popoverCore)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["popoverCore", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["popoverCore", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__trlmt)}>
            <ProfileActions2
              data-plasmic-name={"profileActions2"}
              data-plasmic-override={overrides.profileActions2}
              className={classNames("__wab_instance", sty.profileActions2)}
              slug={(() => {
                try {
                  return $props.slug;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
        }
        side={"bottom"}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__zv3Qa)}>
          <Icon20Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      </Popover>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "popoverCore", "svg", "profileActions2"],
  popoverCore: ["popoverCore", "svg", "profileActions2"],
  svg: ["svg"],
  profileActions2: ["profileActions2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popoverCore: typeof Popover;
  svg: "svg";
  profileActions2: typeof ProfileActions2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMore__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMore__VariantsArgs;
    args?: PlasmicMore__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMore__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMore__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMore__ArgProps,
          internalVariantPropNames: PlasmicMore__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMore__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMore";
  } else {
    func.displayName = `PlasmicMore.${nodeName}`;
  }
  return func;
}

export const PlasmicMore = Object.assign(
  // Top-level PlasmicMore renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popoverCore: makeNodeComponent("popoverCore"),
    svg: makeNodeComponent("svg"),
    profileActions2: makeNodeComponent("profileActions2"),

    // Metadata about props expected for PlasmicMore
    internalVariantProps: PlasmicMore__VariantProps,
    internalArgProps: PlasmicMore__ArgProps
  }
);

export default PlasmicMore;
/* prettier-ignore-end */
