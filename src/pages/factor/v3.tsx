// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from 'react';
import { PageParamsProvider as PageParamsProvider__ } from '@plasmicapp/react-web/lib/host';
import GlobalContextsProvider from '../../../.plasmic/plasmic/paziresh_24_factor/PlasmicGlobalContextsProvider';

import { PlasmicFactor } from '../../../.plasmic/plasmic/paziresh_24_factor/PlasmicFactor';
import { useRouter } from 'next/router';
import { LayoutWithHeaderAndFooter } from '@/common/components/layouts/layoutWithHeaderAndFooter';
import { ReactElement } from 'react';
import { withServerUtils } from '@/common/hoc/withServerUtils';
import { GetServerSidePropsContext } from 'next';
import { withCSR } from '@/common/hoc/withCsr';

const Factor = () => {
  // Use PlasmicFactor to render this component as it was
  // designed in Plasmic, by activating the appropriate variants,
  // attaching the appropriate event handlers, etc.  You
  // can also install whatever React hooks you need here to manage state or
  // fetch data.
  //
  // Props you can pass into PlasmicFactor are:
  // 1. Variants you want to activate,
  // 2. Contents for slots you want to fill,
  // 3. Overrides for any named node in the component to attach behavior and data,
  // 4. Props to set on the root node.
  //
  // By default, PlasmicFactor is wrapped by your project's global
  // variant context providers. These wrappers may be moved to
  // Next.js Custom App component
  // (https://nextjs.org/docs/advanced-features/custom-app).

  return (
    <GlobalContextsProvider>
      <PageParamsProvider__ route={useRouter()?.pathname} params={useRouter()?.query} query={useRouter()?.query}>
        <PlasmicFactor />
      </PageParamsProvider__>
    </GlobalContextsProvider>
  );
};

Factor.getLayout = function getLayout(page: ReactElement) {
  return (
    <LayoutWithHeaderAndFooter shouldShowPromoteApp={false} showBottomNavigation={false} {...page.props.config} showFooter={false}>
      {page}
    </LayoutWithHeaderAndFooter>
  );
};

export const getServerSideProps = withCSR(
  withServerUtils(async (context: GetServerSidePropsContext) => {
    return {
      props: {
        query: context.query,
      },
    };
  }),
);

export default Factor;
